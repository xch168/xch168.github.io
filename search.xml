<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[加快 Gradle 的同步速度]]></title>
      <url>https://xch168.github.io/2019/10/16/speed-up-gradle-sync/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Gradle 在5.1版本中加入了一个新功能：允许您从<strong>指定</strong>的<code>仓库（repository）</code>下载<strong>指定</strong>的<code>依赖（dependency)</code>。（对应于Android Studio 3.4 及以后的版本）</p>
</blockquote>
<a id="more"></a>
<h3 id="Gradle-默认找库流程"><a href="#Gradle-默认找库流程" class="headerlink" title="Gradle 默认找库流程"></a>Gradle 默认找库流程</h3><p>我们通常会在 Gradle 文件中配置几个仓库：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="查找流程"><a href="#查找流程" class="headerlink" title="查找流程"></a>查找流程</h4><blockquote>
<p>当 Gradle 需要去下载一个依赖时，它会按照上面声明的仓库顺序，去查找依赖。例如：要去下载<code>com.android.support.constraint:constraint-layout:1.1.3</code>，它首先会从 google 的仓库进行查找，因为该仓库有该库，所以就从 google 的仓库进行下载。但是如果你要下载的是 RxJava : <code>io.reactivex.rxjava2:rxjava:2.1.9</code>，Gradle仍会先去 google 仓库检查是否存在改库，显然是不存在的，这时 google 仓库就会返回<strong>404</strong>错误，然后 Gradle 去 jcenter 仓库查找。</p>
</blockquote>
<h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><blockquote>
<ol>
<li>性能问题：对于每个要下载的库，都要到定义的几个仓库去查找，而且查找的过程要发送网络请求，这样不仅浪费时间，又浪费资源。</li>
<li>如果仓库列表的第一个仓库返回一个错误的响应（如到 JCenter 去找 Google 的库时，返回409错误），这时 Gradle 就会结束查找，不会继续到后面的仓库去查找，这就会中断你的构建。</li>
<li>安全问题：如果有个依赖是在最后一个仓库（mavenCentral）中，一个恶意的人，上传了一个具有相同<code>group</code> 和 <code>artifact</code> 的库到 JCenter 上，因为 JCenter 查找的优先级 比 mavenCentral 高，所以就从JCenter 上下载了有问题的库。</li>
</ol>
</blockquote>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>一个依赖（dependency）的结构：</p>
<p><img src="/2019/10/16/speed-up-gradle-sync/coordinates-annotated.png" alt="dependency"></p>
<p>声明仓库过滤：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">"https://maven.google.com"</span></span><br><span class="line">        content &#123;</span><br><span class="line">            <span class="comment">// 正则匹配Group：满足 group 以 com.android开头</span></span><br><span class="line">            includeGroupByRegex <span class="string">"com\\.android.*"</span></span><br><span class="line">            includeGroupByRegex <span class="string">"androidx.*"</span></span><br><span class="line">            <span class="comment">// 指定Group：满足 group 为 android.arch.lifecycle</span></span><br><span class="line">            includeGroup <span class="string">"android.arch.lifecycle"</span></span><br><span class="line">            includeGroup <span class="string">"android.arch.core"</span></span><br><span class="line">            includeGroup <span class="string">"com.google.firebase"</span></span><br><span class="line">            includeGroup <span class="string">"com.google.android.gms"</span></span><br><span class="line">            includeGroup <span class="string">"com.google.android.material"</span></span><br><span class="line">            includeGroup <span class="string">"com.google.gms"</span></span><br><span class="line">            includeGroup <span class="string">"zipflinger"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">'https://jcenter.bintray.com'</span></span><br><span class="line">        content &#123;</span><br><span class="line">            includeGroupByRegex <span class="string">"com\\.google.*"</span></span><br><span class="line">            includeGroupByRegex <span class="string">"com\\.sun.*"</span></span><br><span class="line">            includeGroupByRegex <span class="string">"com\\.squareup.*"</span></span><br><span class="line">            includeGroupByRegex <span class="string">"com\\.jakewharton.*"</span></span><br><span class="line">            </span><br><span class="line">            excludeGroup <span class="string">"com.google.firebase"</span></span><br><span class="line">            excludeGroup <span class="string">"com.google.android.gms"</span></span><br><span class="line">            excludeGroup <span class="string">"com.google.android.material"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>include</code> 和 <code>exclude</code> 在每个仓库的行为：</p>
<ol>
<li>只有一个 include 列表：Gradle 只会在该仓库下载在 include 列表指定 group 的库；</li>
<li>只有一个 exclude 列表：Gradle 会在该仓库下载除 exclude 指定 group 之外的所有库；</li>
<li>有一个 include 和 exclude 列表：Gradle 会在该仓库下载在 include 列表包含的，但没在 exclude 列表的库。</li>
</ol>
</blockquote>
<p><strong>NOTE：</strong></p>
<blockquote>
<p>如果在一个仓库中指定了<code>includeGroup</code>，而在其他仓库没有指定任何 group。那么 Gradle 在其他几个仓库中仍执行默认的依序查找。</p>
</blockquote>
<p><img src="/2019/10/16/speed-up-gradle-sync/good-and-bad-annotated.png" alt="note"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>为了获取最佳的性能，应该将每个 group 列到对应的仓库下，这样 Gradle 在下载依赖的时候，就只会去正确的仓库下载。</p>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://jebware.com/blog/?p=573" target="_blank" rel="noopener">Save time and reduce risk with Gradle’s includeGroup</a></li>
<li><a href="https://docs.gradle.org/5.1.1/release-notes.html#repository-to-dependency-matching" target="_blank" rel="noopener">Repository to dependency matching</a></li>
<li><a href="https://github.com/android/plaid/blob/master/repositories.gradle" target="_blank" rel="noopener">repositories.gradle of plaid</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ThreadLocal 解析]]></title>
      <url>https://xch168.github.io/2019/04/23/ThreadLocal-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>ThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有在指定线程中可以获取到存储的数据，对于其他线程来说则无法获取到数据。（可以将ThreadLocal&lt;T&gt; 视为 Map&lt;Thread, T&gt;，但 ThreadLocal 的实现并非如此。）</p>
</blockquote>
<a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 新开2个线程用于设置 &amp; 获取 ThreadLocal的值</span></span><br><span class="line">        MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable, <span class="string">"线程1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable, <span class="string">"线程2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ThreadLocal &amp; 初始化</span></span><br><span class="line">        <span class="keyword">private</span> ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> String <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"初始化值"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 运行线程时，分别设置 &amp; 获取 ThreadLocal的值</span></span><br><span class="line">            String name = Thread.currentThread().getName();</span><br><span class="line">            threadLocal.set(name + <span class="string">"保存的值"</span>); <span class="comment">// 设置值 = 线程名</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name + <span class="string">"："</span> + threadLocal.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">2</span>：线程<span class="number">2</span>保存的值</span><br><span class="line">线程<span class="number">1</span>：线程<span class="number">1</span>保存的值</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上述结果看出，在2个线程分别设置ThreadLocal值和分别获取值，结果互不干扰。</span></span><br></pre></td></tr></table></figure>
<h3 id="ThreadLocal的引用关系"><a href="#ThreadLocal的引用关系" class="headerlink" title="ThreadLocal的引用关系"></a>ThreadLocal的引用关系</h3><p><img src="/2019/04/23/ThreadLocal-analysis/ThreadLocal-ref.png" alt="ThreadLocal-ref"></p>
<blockquote>
<p><strong>关系说明：</strong></p>
<ul>
<li>1个Thread有且仅有1个ThreadLocalMap对象；</li>
<li>1个Entry对象的Key弱引用指向1个ThreadLocal对象；</li>
<li>1个ThreadLocalMap对象存储多个Entry对象；</li>
<li>1个ThreadLocal对象可以被多个线程所共享；</li>
<li>ThreadLocal对象不持有Value，Value由线程的Entry对象持有。</li>
</ul>
</blockquote>
<h3 id="源码解析（API-28）"><a href="#源码解析（API-28）" class="headerlink" title="源码解析（API 28）"></a>源码解析（API 28）</h3><h4 id="ThreadLocal-set"><a href="#ThreadLocal-set" class="headerlink" title="ThreadLocal#set()"></a>ThreadLocal#set()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置值到ThreadLocal</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取当前线程</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 2. 获取该线程的ThreadLocalMap对象，这是数据保存的地方</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">// 3. 若该线程的ThreadLocalMap对象已存在，则直接替换该值，否则创建</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 替换 or 保存数据</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 创建ThreadLocalMap</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前线程的threadLocals变量的引用</span></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建当前线程的ThreadLocalMap对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ThreadLocal-get"><a href="#ThreadLocal-get" class="headerlink" title="ThreadLocal#get()"></a>ThreadLocal#get()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从ThreadLocal中获取当前线程保存的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取当前线程</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 2. 获取当前线程的ThreadLocalMap对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">// 3. 若该线程的ThreadLocalMap对象已存在，则直接获取该Map里的值；否则通过初始化函数创建一个ThreadLocalMap</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T value = initialValue();</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ThreadLocal-remove"><a href="#ThreadLocal-remove" class="headerlink" title="ThreadLocal#remove()"></a>ThreadLocal#remove()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除当前线程在该ThreadLocal中保存的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">    <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">        m.remove(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Thread-threadLocals"><a href="#Thread-threadLocals" class="headerlink" title="Thread.threadLocals"></a>Thread.threadLocals</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Thread类持有threadLocals变量</span></span><br><span class="line">    <span class="comment">// 线程类实例化后，每个线程对象拥有独立的threadLocals变量</span></span><br><span class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<p>当某些数据是以线程为作用域并且不同线程具有不同的数据副本的时候，就可以考虑采用ThreadLocal。</p>
</blockquote>
<p>在Android中，使用ThreadLocal来保存每个线程的Looper。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了在线程中使用Handler，必须先调用该方法，创建该线程的Looper，并保存到ThreadLocal中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从ThreadLocal中获取当前线程的Looper</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ThreadLocal如何做到线程安全"><a href="#ThreadLocal如何做到线程安全" class="headerlink" title="ThreadLocal如何做到线程安全"></a>ThreadLocal如何做到线程安全</h3><ul>
<li>每个线程都拥有独立的<code>threadLocals</code>变量（指向<code>ThreadLocalMap</code>对象）；</li>
<li>每当线程访问<code>threadLocals</code>变量时，访问的都是各自线程自己的<code>ThreadLocalMap</code>对象；</li>
<li><code>ThreadLocalMap</code>访问的key值为当前的<code>ThreadLocal</code>实例。</li>
</ul>
<p>上述3点，保证了线程间的数据访问隔离，即线程安全。</p>
<h3 id="ThreadLocal的副作用"><a href="#ThreadLocal的副作用" class="headerlink" title="ThreadLocal的副作用"></a>ThreadLocal的副作用</h3><blockquote>
<p>ThreadLocal的主要问题是会产生<code>脏数据</code>和<code>内存泄漏</code>。这两个问题通常是在线程池中使用ThreadLocal引发的，因为线程池有线程复用和内存常驻两个特点。</p>
</blockquote>
<ol>
<li><p>脏数据</p>
<blockquote>
<p>线程复用会产生脏数据。由于线程池会重用Thread对象，那么与Thread绑定的类的静态属性ThreadLocal变量也会被重用。如果在实现的线程run()方法体中不显示调用remove()清理与线程相关的ThreadLocal信息，那么倘若下一个线程不调用set()设置初始值，就可能get()到重用的线程信息，包括ThreadLocal所管理的线程对象的value值。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirtyDataInThreadLocal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用固定大小为1的线程池，说明上一个线程属性会被下一个线程属性复用</span></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            Mythread thread = <span class="keyword">new</span> Mythread();</span><br><span class="line">            pool.execute(thread);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="comment">// 第一个线程set后，并没有进行remove</span></span><br><span class="line">                <span class="comment">// 而第二个线程由于某种原因没有进行set操作</span></span><br><span class="line">                threadLocal.set(<span class="keyword">this</span>.getName() + <span class="string">", session info."</span>);</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" 线程是 "</span> + threadLocal.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 线程是 Thread-0, session info.</span><br><span class="line">Thread-1 线程是 Thread-0, session info.</span><br></pre></td></tr></table></figure>
</li>
<li><p>内存泄漏</p>
<blockquote>
<p><strong>“ThreadLocal instances are typically private  static fields in classes”</strong></p>
<p>上面这句是源码的注释，该注释提示使用<code>static</code>关键字来修饰ThreadLocal。在此场景下，寄希望于ThreadLocal对象失去引用后，触发弱引用机制来回收Entry的Value就不现实了。在上例中，如果不进行remove()操作，那么这个线程执行完后，通过ThreadLocal对象持有的String对象是不会被释放的。</p>
</blockquote>
</li>
</ol>
<p><strong>解决办法</strong>：</p>
<p>以上两个问题的解决办法，就是在每次用完ThreadLocal时，必须要及时调用<code>remove()</code>方法清理。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/reference/java/lang/ThreadLocal.html" target="_blank" rel="noopener">ThreadLocal</a></li>
<li><a href="https://www.jianshu.com/p/22be9653df3f" target="_blank" rel="noopener">Java多线程：带你了解神秘的线程变量 ThreadLocal</a></li>
<li><a href="https://www.jianshu.com/p/4167d7ff5ec1" target="_blank" rel="noopener">带你了解源码中的 ThreadLocal</a></li>
<li><a href="https://blog.csdn.net/singwhatiwanna/article/details/48350919" target="_blank" rel="noopener">Android的消息机制之ThreadLocal的工作原理</a></li>
<li><a href="https://blog.csdn.net/Hacker_ZhiDian/article/details/80330280" target="_blank" rel="noopener">线程组和 ThreadLocal</a></li>
<li>《Android 开发艺术探索》</li>
<li>《Java 并发编程实战》</li>
<li>《码出高效：Java开发手册》</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SharedPreferences解析]]></title>
      <url>https://xch168.github.io/2019/04/18/SharedPreferences-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>SharedPreferences(简称SP)是Android中常用的数据存储方式，SP采用key-value(键值对)形式，主要用于轻量级的数据存储，尤其适合保存应用的配置参数，但不建议使用SP来存储大规模的数据，可能会降低性能。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>SP采用XML文件格式来保存数据，该文件位于<code>/data/data/&lt;packageName&gt;/shared_prefs/</code>。</p>
</blockquote>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载SP文件数据,“my_prefs”为文件名</span></span><br><span class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"my_prefs"</span>, Context.MODE_PRIVATE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line">SharedPreferences.Editor editor = sp.edit();</span><br><span class="line">editor.putString(<span class="string">"blog"</span>, <span class="string">"www.xucanhui.com"</span>);</span><br><span class="line"><span class="comment">// 提交数据：同步方式，有返回值表示数据保存是否成功</span></span><br><span class="line"><span class="keyword">boolean</span> result = editor.commit(); </span><br><span class="line"><span class="comment">// 提交数据：异步方式，没有返回值</span></span><br><span class="line"><span class="comment">// editor.apply()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line">String blog = sp.getString(<span class="string">"blog"</span>, <span class="string">""</span>);</span><br></pre></td></tr></table></figure>
<p>my_prefs.xml文件内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"blog"</span>&gt;</span>www.xucanhui.com<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><blockquote>
<p>来源：<a href="http://gityuan.com/2017/06/18/SharedPreferences/" target="_blank" rel="noopener">http://gityuan.com/2017/06/18/SharedPreferences/</a></p>
</blockquote>
<h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="/2019/04/18/SharedPreferences-analysis/shared_preference.jpg" alt="shared_preference"></p>
<p><strong>说明</strong>：SharedPreferences与Editor只是两个接口，SharedPreferencesImpl和EditorImp分别实现了对应的接口。另外，ContextImpl记录着SharedPreferences的重要数据，如下：</p>
<ul>
<li>sSharedPrefsCache：以包名为key，二级key是SP文件，以SharedPreferencesImp为value的嵌套map结构，sSharedPrefsCache是静态成员变量，每个进程只有唯一的一份，且由ContextImpl.class锁保护。</li>
<li>mSharedPrefsPaths：记录所有的SP文件，以文件名为key，具体文件为value的map结构。</li>
<li>mPreferencesDir：是值SP所在目录，即<code>/data/data/&lt;packageName&gt;/shared_prefs/</code></li>
</ul>
<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p><img src="/2019/04/18/SharedPreferences-analysis/shared_preferences_arch.jpg" alt="shared_preferences_arch"></p>
<p><strong>说明</strong>：</p>
<ol>
<li><p>putXxx()操作：把数据写入到EditorImpl.mModified；</p>
</li>
<li><p>apply()或者commit()操作：</p>
<p>a. 先调用<code>commitToMemory()</code>，将数据同步到SharedPreferencesImpl的mMap，并保存到MemoryCommitResult的<code>mapToWriteToDisk</code>；</p>
<p>b. 再调用<code>enqueueDiskWrite()</code>，写入到磁盘文件；在这之前把原有数据保存到<code>.bak</code>后缀的文件，用于在写磁盘的过程出现任何异常可恢复数据。</p>
</li>
<li><p>getXxx()操作：从SharedPreferencesImpl.mMap读取数据。</p>
</li>
</ol>
<h3 id="源码分析-API-28"><a href="#源码分析-API-28" class="headerlink" title="源码分析(API 28)"></a>源码分析(API 28)</h3><h4 id="获取SharedPreferences"><a href="#获取SharedPreferences" class="headerlink" title="获取SharedPreferences"></a>获取SharedPreferences</h4><blockquote>
<p>可以通过<code>Activity.getPreferences(mode)</code>、<code>PreferenceManager.getDefaultSharedPreferences(context)</code>或者<code>Context.getSharedPreferences(name,mode)</code>来获取SharedPreferences实例，</p>
<p>最终调用的是ContextImpl的getSharedPreferences(name, mode)。</p>
</blockquote>
<p><strong>ContextImpl#getSharedPreferences(name, mode)</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextImpl</span> <span class="keyword">extends</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"ContextImpl.class"</span>)</span><br><span class="line">    <span class="keyword">private</span> ArrayMap&lt;String, File&gt; mSharedPrefsPaths;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SharedPreferences <span class="title">getSharedPreferences</span><span class="params">(String name, <span class="keyword">int</span> mode)</span> </span>&#123; </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        File file;</span><br><span class="line">        <span class="keyword">synchronized</span> (ContextImpl.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSharedPrefsPaths == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mSharedPrefsPaths = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 先从mSharedPrefsPaths查询是否存在相应文件</span></span><br><span class="line">            file = mSharedPrefsPaths.get(name);</span><br><span class="line">            <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果文件不存在，则创建新的文件</span></span><br><span class="line">                file = getSharedPreferencesPath(name);</span><br><span class="line">                <span class="comment">// 将新创建的文件保存到mSharedPrefsPaths，以文件名为key</span></span><br><span class="line">                mSharedPrefsPaths.put(name, file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getSharedPreferences(file, mode);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">getSharedPreferencesPath</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> makeFilename(getPreferencesDir(), name + <span class="string">".xml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> File <span class="title">getPreferencesDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mSync) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPreferencesDir == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 创建目录/data/data/&lt;packageName&gt;/shared_prefs/</span></span><br><span class="line">                mPreferencesDir = <span class="keyword">new</span> File(getDataDir(), <span class="string">"shared_prefs"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ensurePrivateDirExists(mPreferencesDir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ContextImpl#getSharedPreferences(file, mode)</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SharedPreferences <span class="title">getSharedPreferences</span><span class="params">(File file, <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">    SharedPreferencesImpl sp;</span><br><span class="line">    <span class="keyword">synchronized</span> (ContextImpl.class) &#123;</span><br><span class="line">        <span class="keyword">final</span> ArrayMap&lt;File, SharedPreferencesImpl&gt; cache = getSharedPreferencesCacheLocked();</span><br><span class="line">        sp = cache.get(file);</span><br><span class="line">        <span class="keyword">if</span> (sp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkMode(mode);</span><br><span class="line">            <span class="keyword">if</span> (getApplicationInfo().targetSdkVersion &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isCredentialProtectedStorage()</span><br><span class="line">                    &amp;&amp; !getSystemService(UserManager.class)</span><br><span class="line">                    .isUserUnlockingOrUnlocked(UserHandle.myUserId())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"SharedPreferences in credential encrypted "</span></span><br><span class="line">                                                    + <span class="string">"storage are not available until after user is unlocked"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建SharedPreferencesImpl</span></span><br><span class="line">            sp = <span class="keyword">new</span> SharedPreferencesImpl(file, mode);</span><br><span class="line">            cache.put(file, sp);</span><br><span class="line">            <span class="keyword">return</span> sp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 指定多进程模式，则当文件被其他进程改变是，则会重新加载</span></span><br><span class="line">    <span class="keyword">if</span> ((mode &amp; Context.MODE_MULTI_PROCESS) != <span class="number">0</span> ||</span><br><span class="line">        getApplicationInfo().targetSdkVersion &lt; android.os.Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">        <span class="comment">// If somebody else (some other process) changed the prefs</span></span><br><span class="line">        <span class="comment">// file behind our back, we reload it.  This has been the</span></span><br><span class="line">        <span class="comment">// historical (if undocumented) behavior.</span></span><br><span class="line">        sp.startReloadIfChangedUnexpectedly();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"ContextImpl.class"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> ArrayMap&lt;File, SharedPreferencesImpl&gt; <span class="title">getSharedPreferencesCacheLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sSharedPrefsCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sSharedPrefsCache = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String packageName = getPackageName();</span><br><span class="line">    ArrayMap&lt;File, SharedPreferencesImpl&gt; packagePrefs = sSharedPrefsCache.get(packageName);</span><br><span class="line">    <span class="keyword">if</span> (packagePrefs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        packagePrefs = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">        sSharedPrefsCache.put(packageName, packagePrefs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> packagePrefs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>SharedPreferencesImpl初始化</strong>：</p>
<p><strong>SharedPreferencesImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferencesImpl(File file, <span class="keyword">int</span> mode) &#123;</span><br><span class="line">    mFile = file;</span><br><span class="line">    <span class="comment">// 创建.bak后缀的备份文件，用于在发生异常时，可以通过备份文件来恢复数据</span></span><br><span class="line">    mBackupFile = makeBackupFile(file);</span><br><span class="line">    mMode = mode;</span><br><span class="line">    mLoaded = <span class="keyword">false</span>;</span><br><span class="line">    mMap = <span class="keyword">null</span>;</span><br><span class="line">    mThrowable = <span class="keyword">null</span>;</span><br><span class="line">    startLoadFromDisk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>SharedPreferencesImpl#startLoadFromDisk()</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startLoadFromDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        mLoaded = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过工作线程读取文件数据到mMap</span></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="string">"SharedPreferencesImpl-load"</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            loadFromDisk();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mLoaded) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mBackupFile.exists()) &#123;</span><br><span class="line">            mFile.delete();</span><br><span class="line">            mBackupFile.renameTo(mFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Debugging</span></span><br><span class="line">    <span class="keyword">if</span> (mFile.exists() &amp;&amp; !mFile.canRead()) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Attempt to read preferences file "</span> + mFile + <span class="string">" without permission"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">null</span>;</span><br><span class="line">    StructStat stat = <span class="keyword">null</span>;</span><br><span class="line">    Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stat = Os.stat(mFile.getPath());</span><br><span class="line">        <span class="keyword">if</span> (mFile.canRead()) &#123;</span><br><span class="line">            BufferedInputStream str = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                str = <span class="keyword">new</span> BufferedInputStream(</span><br><span class="line">                    <span class="keyword">new</span> FileInputStream(mFile), <span class="number">16</span> * <span class="number">1024</span>);</span><br><span class="line">                map = (Map&lt;String, Object&gt;) XmlUtils.readMapXml(str);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Cannot read "</span> + mFile.getAbsolutePath(), e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                IoUtils.closeQuietly(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">        <span class="comment">// An errno exception means the stat failed. Treat as empty/non-existing by</span></span><br><span class="line">        <span class="comment">// ignoring.</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        thrown = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        mLoaded = <span class="keyword">true</span>;</span><br><span class="line">        mThrowable = thrown;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// It's important that we always signal waiters, even if we'll make</span></span><br><span class="line">        <span class="comment">// them fail with an exception. The try-finally is pretty wide, but</span></span><br><span class="line">        <span class="comment">// better safe than sorry.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (thrown == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mMap = map;</span><br><span class="line">                    mStatTimestamp = stat.st_mtim;</span><br><span class="line">                    mStatSize = stat.st_size;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// In case of a thrown exception, we retain the old map. That allows</span></span><br><span class="line">            <span class="comment">// any open editors to commit and store updates.</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            mThrowable = t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mLock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>获取SharedPreferences总结</strong>：</p>
<ol>
<li>首次使用则创建相应xml文件；</li>
<li>异步加载文件内容到内存，此时执行getXxx()和edit()方法都是阻塞等待的，直到文件数据全部加载到内存；</li>
<li>一旦数据完全加载到内存，后续的getXxx()则是直接访问内存。</li>
</ol>
</blockquote>
<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p><strong>SharedPreferencesImpl#getString(key, defValue)</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key, @Nullable String defValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="comment">// 检查数据是否加载完成</span></span><br><span class="line">        awaitLoadedLocked();</span><br><span class="line">        String v = (String)mMap.get(key);</span><br><span class="line">        <span class="keyword">return</span> v != <span class="keyword">null</span> ? v : defValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">awaitLoadedLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mLoaded) &#123;</span><br><span class="line">        BlockGuard.getThreadPolicy().onReadFromDisk();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!mLoaded) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 当没有加载完成，则进入等待状态</span></span><br><span class="line">            mLock.wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException unused) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mThrowable != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(mThrowable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="编辑数据"><a href="#编辑数据" class="headerlink" title="编辑数据"></a>编辑数据</h4><p>获取Editor编辑器实例：<code>SharedPreferencesImpl#edit()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Editor <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="comment">// 等待数据加载完成</span></span><br><span class="line">        awaitLoadedLocked();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 创建EditorImpl实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EditorImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>EditorImpl#putString(key, value)</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EditorImpl</span> <span class="keyword">implements</span> <span class="title">Editor</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"mEditorLock"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; mModified = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"mEditorLock"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mClear = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 插入数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Editor <span class="title">putString</span><span class="params">(String key, @Nullable String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mEditorLock) &#123;</span><br><span class="line">            <span class="comment">// 插入数据，暂存到mModified</span></span><br><span class="line">            mModified.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Editor <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mEditorLock) &#123;</span><br><span class="line">            mModified.put(key, <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空全部数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Editor <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mEditorLock) &#123;</span><br><span class="line">            mClear = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h4><blockquote>
<p>保存数据，主要是调用<code>commit()</code>和<code>apply()</code>方法来完成的。</p>
</blockquote>
<p><strong>EditorImpl#commit()</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据更新到内存</span></span><br><span class="line">    MemoryCommitResult mcr = commitToMemory();</span><br><span class="line">    <span class="comment">// 将内存数据同步到文件</span></span><br><span class="line">    SharedPreferencesImpl.<span class="keyword">this</span>.enqueueDiskWrite(</span><br><span class="line">        mcr, <span class="keyword">null</span> <span class="comment">/* sync write on this thread okay */</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 进入等待状态，直到写入文件的操作完成</span></span><br><span class="line">        mcr.writtenToDiskLatch.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通知监听器，并在主线程回调onSharedPreferenceChanged()方法</span></span><br><span class="line">    notifyListeners(mcr);</span><br><span class="line">    <span class="comment">// 返回文件操作的结果</span></span><br><span class="line">    <span class="keyword">return</span> mcr.writeToDiskResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>EditorImpl#commitToMemory()</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> MemoryCommitResult <span class="title">commitToMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> memoryStateGeneration;</span><br><span class="line">    List&lt;String&gt; keysModified = <span class="keyword">null</span>;</span><br><span class="line">    Set&lt;OnSharedPreferenceChangeListener&gt; listeners = <span class="keyword">null</span>;</span><br><span class="line">    Map&lt;String, Object&gt; mapToWriteToDisk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (SharedPreferencesImpl.<span class="keyword">this</span>.mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mDiskWritesInFlight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            mMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(mMap);</span><br><span class="line">        &#125;</span><br><span class="line">        mapToWriteToDisk = mMap;</span><br><span class="line">        mDiskWritesInFlight++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> hasListeners = mListeners.size() &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (hasListeners) &#123;</span><br><span class="line">            keysModified = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            listeners = <span class="keyword">new</span> HashSet&lt;OnSharedPreferenceChangeListener&gt;(mListeners.keySet());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mEditorLock) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> changesMade = <span class="keyword">false</span>;</span><br><span class="line">			<span class="comment">// 当mClear为true，则直接清空mMap</span></span><br><span class="line">            <span class="keyword">if</span> (mClear) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mapToWriteToDisk.isEmpty()) &#123;</span><br><span class="line">                    changesMade = <span class="keyword">true</span>;</span><br><span class="line">                    mapToWriteToDisk.clear();</span><br><span class="line">                &#125;</span><br><span class="line">                mClear = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; e : mModified.entrySet()) &#123;</span><br><span class="line">                String k = e.getKey();</span><br><span class="line">                Object v = e.getValue();</span><br><span class="line">               	<span class="comment">// this是一个特殊值，当v为空，相当于remove该条数据</span></span><br><span class="line">                <span class="keyword">if</span> (v == <span class="keyword">this</span> || v == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!mapToWriteToDisk.containsKey(k)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mapToWriteToDisk.remove(k);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mapToWriteToDisk.containsKey(k)) &#123;</span><br><span class="line">                        Object existingValue = mapToWriteToDisk.get(k);</span><br><span class="line">                        <span class="keyword">if</span> (existingValue != <span class="keyword">null</span> &amp;&amp; existingValue.equals(v)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mapToWriteToDisk.put(k, v);</span><br><span class="line">                &#125;</span><br><span class="line">				<span class="comment">// 表示数据有改变</span></span><br><span class="line">                changesMade = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (hasListeners) &#123;</span><br><span class="line">                    keysModified.add(k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 清空mModified的数据</span></span><br><span class="line">            mModified.clear();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (changesMade) &#123;</span><br><span class="line">                mCurrentMemoryStateGeneration++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            memoryStateGeneration = mCurrentMemoryStateGeneration;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MemoryCommitResult(memoryStateGeneration, keysModified, listeners,</span><br><span class="line">                                  mapToWriteToDisk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>EditorImpl#enqueueDiskWrite()</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueueDiskWrite</span><span class="params">(<span class="keyword">final</span> MemoryCommitResult mcr,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> Runnable postWriteRunnable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isFromSyncCommit = (postWriteRunnable == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Runnable writeToDiskRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mWritingToDiskLock) &#123;</span><br><span class="line">                <span class="comment">// 执行文件写入操作</span></span><br><span class="line">                writeToFile(mcr, isFromSyncCommit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                mDiskWritesInFlight--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (postWriteRunnable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                postWriteRunnable.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用commit方法，会进入这个分支，在当前线程执行</span></span><br><span class="line">    <span class="keyword">if</span> (isFromSyncCommit) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> wasEmpty = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            wasEmpty = mDiskWritesInFlight == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (wasEmpty) &#123;</span><br><span class="line">            writeToDiskRunnable.run();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用apply方法，会执行该句，将任务放入单线程的线程池中执行</span></span><br><span class="line">    QueuedWork.queue(writeToDiskRunnable, !isFromSyncCommit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>EditorImpl#writeToFile()</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeToFile</span><span class="params">(MemoryCommitResult mcr, <span class="keyword">boolean</span> isFromSyncCommit)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> fileExists = mFile.exists();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fileExists) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> needsWrite = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only need to write if the disk state is older than this commit</span></span><br><span class="line">        <span class="keyword">if</span> (mDiskStateGeneration &lt; mcr.memoryStateGeneration) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isFromSyncCommit) &#123;</span><br><span class="line">                needsWrite = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    <span class="comment">// No need to persist intermediate states. Just wait for the latest state to</span></span><br><span class="line">                    <span class="comment">// be persisted.</span></span><br><span class="line">                    <span class="keyword">if</span> (mCurrentMemoryStateGeneration == mcr.memoryStateGeneration) &#123;</span><br><span class="line">                        needsWrite = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有改变，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (!needsWrite) &#123;</span><br><span class="line">            mcr.setDiskWriteResult(<span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> backupFileExists = mBackupFile.exists();</span><br><span class="line">        <span class="keyword">if</span> (!backupFileExists) &#123;</span><br><span class="line">            <span class="comment">// 当备份文件不存在，则把mFile重命名为备份文件</span></span><br><span class="line">            <span class="keyword">if</span> (!mFile.renameTo(mBackupFile)) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"Couldn't rename file "</span> + mFile</span><br><span class="line">                      + <span class="string">" to backup file "</span> + mBackupFile);</span><br><span class="line">                mcr.setDiskWriteResult(<span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则，直接删除mFile</span></span><br><span class="line">            mFile.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileOutputStream str = createFileOutputStream(mFile);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mcr.setDiskWriteResult(<span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将mMap全部信息写入文件</span></span><br><span class="line">        XmlUtils.writeMapXml(mcr.mapToWriteToDisk, str);</span><br><span class="line"></span><br><span class="line">        writeTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        FileUtils.sync(str);</span><br><span class="line"></span><br><span class="line">        fsyncTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        str.close();</span><br><span class="line">        ContextImpl.setFilePermissionsFromMode(mFile.getPath(), mMode, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> StructStat stat = Os.stat(mFile.getPath());</span><br><span class="line">            <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                mStatTimestamp = stat.st_mtim;</span><br><span class="line">                mStatSize = stat.st_size;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">            <span class="comment">// Do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">            fstatTime = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入成功，删除备份文件</span></span><br><span class="line">        mBackupFile.delete();</span><br><span class="line"></span><br><span class="line">        mDiskStateGeneration = mcr.memoryStateGeneration;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回写入成功，唤醒等待线程</span></span><br><span class="line">        mcr.setDiskWriteResult(<span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"writeToFile: Got exception:"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"writeToFile: Got exception:"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果文件写入操作失败，则删除未成功写入的文件</span></span><br><span class="line">    <span class="keyword">if</span> (mFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mFile.delete()) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Couldn't clean up partially-written file "</span> + mFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回写入失败，唤醒等待线程</span></span><br><span class="line">    mcr.setDiskWriteResult(<span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>EditorImpl#apply()</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把数据更新到内存</span></span><br><span class="line">    <span class="keyword">final</span> MemoryCommitResult mcr = commitToMemory();</span><br><span class="line">    <span class="keyword">final</span> Runnable awaitCommit = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 进入等待状态</span></span><br><span class="line">                mcr.writtenToDiskLatch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    QueuedWork.addFinisher(awaitCommit);</span><br><span class="line"></span><br><span class="line">    Runnable postWriteRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            awaitCommit.run();</span><br><span class="line">            QueuedWork.removeFinisher(awaitCommit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据以异步的方式写入文件</span></span><br><span class="line">    SharedPreferencesImpl.<span class="keyword">this</span>.enqueueDiskWrite(mcr, postWriteRunnable);</span><br><span class="line"></span><br><span class="line">    notifyListeners(mcr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="IO瓶颈"><a href="#IO瓶颈" class="headerlink" title="IO瓶颈"></a>IO瓶颈</h4><blockquote>
<p>IO瓶颈是造成SP性能差的最大原因，解决IO瓶颈，80%的性能问题就解决了。</p>
</blockquote>
<p>SP的IO瓶颈包括<code>读取数据到内存</code>与<code>数据写入磁盘</code>两部分。</p>
<ol>
<li><p>读取数据到内存有两个场景会触发：</p>
<p>a. SP文件没有被加载到内存时，调用getSharedPreferences方法会初始化文件并读入内存。</p>
<p>b. 版本低于Android-H或使用了MULTI_PROCESS标记时，每次调用getSharedPreference方法时都会读入。</p>
<p><strong>优化</strong>：</p>
<blockquote>
<p>我们可以优化的便是b了，每次加载数据到内存太过影响效率，但H以下版本已经很低了，基本可以忽略。</p>
<p>对于MULTI_PROCESS，可以采用ContentProvider等其他方式，效率更好，而且可避免SP数据丢失的情况。</p>
</blockquote>
</li>
<li><p>数据写入到磁盘也有两个场景会触发：</p>
<p>a. Editor的commit方法，每次执行时同步写入磁盘。</p>
<p>b. Editor的apply方法，每次执行时在单线程池中写入磁盘，异步写入。</p>
<p><strong>优化</strong>：</p>
<blockquote>
<p>commit和apply的方法区别在于同步写入和异步写入，以及是否需要返回值。</p>
<p>在不需要返回值的情况下，使用apply方法可以极大的提高性能。</p>
<p>同时，多个写入操作可以合并为一个commit/apply，将多个写入操作合并后也能提高IO性能。</p>
</blockquote>
</li>
</ol>
<h4 id="锁性能差"><a href="#锁性能差" class="headerlink" title="锁性能差"></a>锁性能差</h4><ol>
<li><p>SP的get操作，会锁定SharedPreferences对象，互斥其他操作。</p>
</li>
<li><p>SP的put操作，edit()及commitToMemory会锁定SharedPreferences对象，put操作会锁定Editor对象，写入磁盘更会锁定一个写入锁。</p>
</li>
</ol>
<p><strong>优化</strong>：</p>
<blockquote>
<p>由于锁的缘故，SP操作并发时，耗时会增加。减少锁耗时，是一个优化点。</p>
<p>由于读写操作的锁均是SP实例对象的，将数据分拆到不同的sp文件中，便是减少锁耗时的直接方案。</p>
<p>降低单文件访问频率，多文件均摊访问，以减少锁耗时。</p>
</blockquote>
<h4 id="优化总结"><a href="#优化总结" class="headerlink" title="优化总结"></a>优化总结</h4><blockquote>
<ul>
<li>强烈建议不要在sp里面存储特别大的key/value, 有助于减少卡顿/anr；</li>
<li>请不要高频地使用apply, 尽可能地批量提交;commit直接在主线程操作, 更要注意了；</li>
<li>不要使用MODE_MULTI_PROCESS；</li>
<li>高频写操作的key与高频读操作的key可以适当地拆分文件, 由于减少同步锁竞争；</li>
<li>不要一上来就执行getSharedPreferences().edit(), 应该分成两大步骤来做, 中间可以执行其他代码；</li>
<li>不要连续多次edit(), 应该获取一次获取edit(),然后多次执行putxxx(), 减少内存波动; 经常看到大家喜欢封装方法, 结果就导致这种情况的出现；</li>
<li>每次commit时会把全部的数据更新的文件, 所以整个文件是不应该过大的, 影响整体性能。</li>
</ul>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/reference/android/content/SharedPreferences.html" target="_blank" rel="noopener">SharedPreferences</a></li>
<li><a href="http://gityuan.com/2017/06/18/SharedPreferences/" target="_blank" rel="noopener">全面剖析SharedPreferences</a></li>
<li><a href="https://www.cnblogs.com/puff/p/5530825.html" target="_blank" rel="noopener">SharedPreferences优化总结</a></li>
<li><a href="https://yakivmospan.com/blog/best-practice-shared-preferences/" target="_blank" rel="noopener">Best Practice - SharedPreferences</a></li>
<li><a href="https://stackoverflow.com/questions/6276358/pros-and-cons-of-sqlite-and-shared-preferences" target="_blank" rel="noopener">Pros and Cons of SQLite and Shared Preferences</a></li>
<li><a href="https://www.jianshu.com/p/40e42da910e2" target="_blank" rel="noopener">庖丁解牛之SharedPreferences超级大卡顿</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AsyncTask解析]]></title>
      <url>https://xch168.github.io/2019/04/12/AsyncTask-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>AsyncTask是一个抽象类，它是Android封装的一个轻量级异步操作的类。它可以在线程池中执行后台任务，然后把执行的进度和最终的结果传递到主线程，并在主线程中更新UI。</p>
</blockquote>
<a id="more"></a>
<h3 id="AsyncTask简介"><a href="#AsyncTask简介" class="headerlink" title="AsyncTask简介"></a>AsyncTask简介</h3><h4 id="AsyncTask的泛型参数"><a href="#AsyncTask的泛型参数" class="headerlink" title="AsyncTask的泛型参数"></a>AsyncTask的泛型参数</h4><p>AsyncTask的类声明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>泛型参数说明：</p>
<p><strong>Params</strong>：执行异步任务时传入的参数类型。</p>
<p><strong>Progress</strong>：在后台执行时，发布的进度单位类型。</p>
<p><strong>Result</strong>：异步任务执行完成后，返回的结果类型。</p>
<h4 id="AsyncTask的核心方法"><a href="#AsyncTask的核心方法" class="headerlink" title="AsyncTask的核心方法"></a>AsyncTask的核心方法</h4><p><strong>onPreExecute()</strong></p>
<blockquote>
<p>该方法会在后台任务开始执行前调用，并在<code>主线程</code>执行。用于进行一些界面上的初始化操作，比如显示一个进度条对话框等。</p>
</blockquote>
<p><strong>doInBackground(Params…)</strong></p>
<blockquote>
<p>这个方法在<code>子线程</code>中运行，应该在这里处理所有的耗时任务。</p>
<p>任务执行结束，可以通过<code>return</code>语句来返回任务执行的结果。这个方法不能执行UI操作，如果需要进行UI更新操作，如更新任务进度，可以调用<code>publishProgress(Progress…)</code>来完成。</p>
</blockquote>
<p><strong>onProgressUpdate(Progress…)</strong></p>
<blockquote>
<p>当在后台任务中调用<code>publishProgress(Progress…)</code>后，这个方法就会马上被调用，方法中携带的参数是后台任务传过来的，该方法在<code>主线程</code>运行，所以可以进行UI更新。</p>
</blockquote>
<p><strong>onPostExecute(Result)</strong></p>
<blockquote>
<p>当<code>doInBackground(Params...)</code>执行完毕，并通过<code>return</code>进行返回时，这个方法就会马上被调用。返回的数据会被作为该方法的参数传递过来，该方法是在<code>主线程</code>中运行，可以利用返回的数据进行UI更新操作，如提醒任务执行的结果或关闭掉进度条对话框等。</p>
</blockquote>
<p>这几个方法的调用顺序：</p>
<p><strong>需要进度更新</strong>： onPreExecute() –&gt; doInBackground() –&gt; publishProgress() –&gt; onProgressUpdate() –&gt; onPostExecute()</p>
<p><strong>不需要进度更新</strong>：onPreExecute() –&gt; doInBackground() –&gt; onPostExecute()</p>
<blockquote>
<p>除了上面的几个核心方法外，AsyncTask还提供了<code>onCancelled()</code>方法，该方法运行在<code>主线程</code>，当异步任务取消时，该方法就会被调用，这个时候<code>onPostExecute(Result)</code>就不会被调用。</p>
<p><strong>NOTE</strong>：AsyncTask中的<code>cancel()</code>方法并不是真正去取消任务，只是将这个任务设置为取消状态，需要在<code>doInBackgroud(Params…)</code>方法中判断终止任务。</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>定义任务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Integer</span>, <span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        progressDialog.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> downloadPercent = doDownload();</span><br><span class="line">                publishProgress(downloadPercent);</span><br><span class="line">                <span class="keyword">if</span> (downloadPercent &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">        progressDialog.setMessage(<span class="string">"当前下载进度："</span> + values[<span class="number">0</span>] + <span class="string">"%"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean result)</span> </span>&#123;</span><br><span class="line">        progressDialog.dismiss();</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">"下载成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">"下载失败"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行任务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> DownloadTask().execute();</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong>：</p>
<ol>
<li><p>AsyncTask实例必须在<code>主线程</code>中创建。</p>
</li>
<li><p><code>execute(Params…)</code>方法必须在<code>主线程</code>中调用。</p>
</li>
<li><p>不要手动去调用<code>onPreExecute()</code>,<code>onPostExecute(Result)</code>,<code>doInBackground(Params…)</code>, <code>onProgressUpdate(Progress…)</code>这几个方法。</p>
</li>
<li>一个任务实例只能执行一次，如果执行第二次将会抛出异常。</li>
</ol>
<h3 id="源码解析-API-28"><a href="#源码解析-API-28" class="headerlink" title="源码解析(API 28)"></a>源码解析(API 28)</h3><p><code>全局</code>线程池配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 &lt;= 核心线程的数量 &lt;= 4, 至少比CPU数少1，以避免CPU处于饱和工作状态，不能及时处理用户的其他事件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</span><br><span class="line">    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// static表示全局的，所有的AsyncTask实例共用，用于执行任务(可并行处理任务)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">        CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class="line">        sPoolWorkQueue, sThreadFactory);</span><br><span class="line">    threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">    THREAD_POOL_EXECUTOR = threadPoolExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>全局</code>顺序任务调度器配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static表示全局的，所有的AsyncTask实例共用，用于控制任务的串行执行，一次只能执行一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> InternalHandler sHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用于存储待执行的任务</span></span><br><span class="line">    <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">    Runnable mActive;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将任务插入到任务队列中</span></span><br><span class="line">        mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    r.run();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    scheduleNext();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 判断是否有正在执行的任务，没有的话，就执行下一个任务</span></span><br><span class="line">        <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduleNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从任务队列里获取一个任务，并放到线程池中去执行</span></span><br><span class="line">        <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>构建任务</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>((Looper) <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">(@Nullable Handler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(handler != <span class="keyword">null</span> ? handler.getLooper() : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">(@Nullable Looper callbackLooper)</span> </span>&#123;</span><br><span class="line">    mHandler = callbackLooper == <span class="keyword">null</span> || callbackLooper == Looper.getMainLooper()</span><br><span class="line">        ? getMainHandler()</span><br><span class="line">        : <span class="keyword">new</span> Handler(callbackLooper);</span><br><span class="line"></span><br><span class="line">    mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">            Result result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                <span class="comment">// 调用doInBackground执行耗时任务</span></span><br><span class="line">                result = doInBackground(mParams);</span><br><span class="line">                Binder.flushPendingCommands();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</span><br><span class="line">                mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">throw</span> tr;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postResult(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                postResultIfNotInvoked(get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                android.util.Log.w(LOG_TAG, e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>, e.getCause());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                postResultIfNotInvoked(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span>&lt;<span class="title">Params</span>, <span class="title">Result</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">    Params[] mParams;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postResultIfNotInvoked</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> wasTaskInvoked = mTaskInvoked.get();</span><br><span class="line">    <span class="keyword">if</span> (!wasTaskInvoked) &#123;</span><br><span class="line">        postResult(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT, <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">    message.sendToTarget();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：在构造方法中，主要是初始化了<code>mWorker</code>和<code>mFuture</code>两个成员变量，mWorker是一个<code>Callable</code>对象，作为mFuture的构建参数。在mWorker的<code>call()</code>方法中，会调用<code>doInBackground()</code>执行耗时任务，并将执行结果通过<code>postResult(result)</code>传递给内部Handler跳转到主线程中。</p>
<p><strong>执行任务</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec, Params... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">            <span class="keyword">case</span> RUNNING:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                                                + <span class="string">" the task is already running."</span>);</span><br><span class="line">            <span class="keyword">case</span> FINISHED:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                                                + <span class="string">" the task has already been executed "</span></span><br><span class="line">                                                + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">    onPreExecute();</span><br><span class="line"></span><br><span class="line">    mWorker.mParams = params;</span><br><span class="line">    <span class="comment">// 使用串行执行器控制任务执行，可以使用自定义执行器来实现并行执行</span></span><br><span class="line">    exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：在执行<code>execute(Params)</code>方法时，会调用<code>executeOnExecutor</code>并传入一个<code>sDefaultExecutor</code>，这是前面创建的一个全局的<code>SerialExecutor</code>，它用于控制任务的串行执行。</p>
<p><strong>线程切换</strong>：</p>
<blockquote>
<p>mWorker中call()方法，会先执行<code>doInBackground</code>，并将执行结果通过<code>postResult()</code>发送到主线程。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// getHandler()返回的是InternalHandler实例，这是一个主线程Handler</span></span><br><span class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT, <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">    message.sendToTarget();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                <span class="comment">// There is only one result</span></span><br><span class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                <span class="comment">// 更新进度</span></span><br><span class="line">                result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在收到<code>MESSAGE_POST_RESULT</code>消息时，会调用<code>finish</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">        onCancelled(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onPostExecute(result);</span><br><span class="line">    &#125;</span><br><span class="line">    mStatus = Status.FINISHED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：如果任务取消了，就会回调<code>onCancelled(result)</code>方法，否则回调<code>onPostExecute(result)</code>。</p>
<p><strong>AsyncTask的串行和并行</strong>：</p>
<blockquote>
<p>从源码可以看出，默认情况下AsyncTask的执行效果是<code>串行</code>的，因为使用<code>SerialExecutor</code>类来保证队列的串行。如果想使用并行执行任务，可以跳过<code>SerialExecutor</code>类，使用<code>executeOnExecutor()</code>来执行任务。</p>
</blockquote>
<h3 id="AsyncTask使用不当的后果"><a href="#AsyncTask使用不当的后果" class="headerlink" title="AsyncTask使用不当的后果"></a>AsyncTask使用不当的后果</h3><ol>
<li><p><strong>内存泄漏</strong></p>
<blockquote>
<p>如果AsyncTask被声明为Activity的非静态内部类，那么AsyncTask会保留一个对创建了AsyncTask的Activity的引用。如果Activity已经被销毁，AsyncTask的后台线程还在执行，它将继续在内存里保留这个引用，导致Activity无法被回收，引起内存泄露。所以最好在Activity的<code>onDestroy()</code>方法中调用<code>cancel()</code>来取消任务。</p>
</blockquote>
</li>
<li><p><strong>结果丢失</strong></p>
<blockquote>
<p>屏幕旋转或Activity在后台被系统杀掉等情况会导致Activity的重新创建，之前运行的AsyncTask（非静态的内部类）会持有一个之前Activity的引用，这个引用已经无效，这时调用onPostExecute()再去更新界面将不再生效。</p>
</blockquote>
</li>
</ol>
<h3 id="为什么AsyncTask必须在主线程实例化"><a href="#为什么AsyncTask必须在主线程实例化" class="headerlink" title="为什么AsyncTask必须在主线程实例化"></a>为什么AsyncTask必须在主线程实例化</h3><ul>
<li><p>在Android 5.1(API 22)之前，AsyncTask内部用于控制线程切换的sHandler的初始化代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InternalHandler sHandler = <span class="keyword">new</span> InternalHandler();</span><br></pre></td></tr></table></figure>
<p>这就导致AsyncTask必须在主线程创建，才能让sHandler与主线程的Looper关联，来实现线程切换的相关逻辑。</p>
</li>
<li><p>在Android 5.1(API 22)之后，sHandler的初始化代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> InternalHandler sHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getMainHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (AsyncTask.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sHandler = <span class="keyword">new</span> InternalHandler(Looper.getMainLooper());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从代码可见，InternalHandler在实例化的时候会传入<code>Looper.getMainLooper()</code>，那么AsyncTask不是就可以在子线程中创建？经测试，在子线程创建不会报错。</p>
<p>在API28的源码中，构造方法的注释：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new asynchronous task. This constructor must be invoked on the UI thread.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>((Looper) <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注释指出必须在主线程调用该构造方法，可能是为了兼容旧版的系统。</p>
</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/reference/android/os/AsyncTask.html" target="_blank" rel="noopener">AsyncTask</a></li>
<li><a href="http://weishu.me/2016/01/18/dive-into-asynctask/" target="_blank" rel="noopener">你真的了解AsyncTask？</a></li>
<li><a href="https://lrh1993.gitbooks.io/android_interview_guide/content/android/basis/asynctask.html" target="_blank" rel="noopener">AsyncTask详解</a></li>
<li><a href="https://juejin.im/post/58842012570c350062c111dd" target="_blank" rel="noopener">关于AsyncTask的一次深度解析</a></li>
<li><a href="https://blog.csdn.net/singwhatiwanna/article/details/17596225" target="_blank" rel="noopener">Android源码分析—带你认识不一样的AsyncTask</a></li>
<li><a href="https://www.jianshu.com/p/37502bbbb25a" target="_blank" rel="noopener">AsyncTask的原理 及其源码分析</a></li>
<li><a href="https://blog.csdn.net/lmj623565791/article/details/38614699" target="_blank" rel="noopener">Android AsyncTask 源码解析</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntentService解析]]></title>
      <url>https://xch168.github.io/2019/04/02/IntentService-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Android中的Service是运行在主线程（UI线程），如果要处理耗时任务，需要手动创建工作线程，不然会有ANR的风险。IntentService继承于Service，内部使用工作线程来处理请求的任务。</p>
</blockquote>
<a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Step1. 定义IntentService的子类：传入线程名称、重写<code>onHandleIntent()</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntentService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIntentService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 传入工作线程的名称</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"MyIntentService"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理耗时任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step2. 在AndroidManifest.xml注册</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".MyIntentService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>Step3. 发送任务请求</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(context, MyIntentService.class);</span><br><span class="line">context.startService(intent);</span><br></pre></td></tr></table></figure>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IntentService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Looper mServiceLooper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ServiceHandler mServiceHandler;</span><br><span class="line">    <span class="keyword">private</span> String mName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mRedelivery;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(looper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// onHandleIntent()方法在工作线程中执行，执行完后调用stopSelf方法关掉Service</span></span><br><span class="line">            onHandleIntent((Intent)msg.obj);</span><br><span class="line">            stopSelf(msg.arg1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntentService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        mName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntentRedelivery</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        mRedelivery = enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 创建HandlerThread，这是一个工作线程，</span></span><br><span class="line">        <span class="comment">// 因此使用IntentService，不用再额外创建子线程，就可以处理耗时任务</span></span><br><span class="line">        HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 获取工作线程的Looper</span></span><br><span class="line">        mServiceLooper = thread.getLooper();</span><br><span class="line">        <span class="comment">// 将工作线程的Looper与Handler进行绑定，使其在工作线程中处理任务</span></span><br><span class="line">        mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">        msg.arg1 = startId;</span><br><span class="line">        msg.obj = intent;</span><br><span class="line">        <span class="comment">// 将任务消息加入到工作队列中</span></span><br><span class="line">        mServiceHandler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        onStart(intent, startId);</span><br><span class="line">        <span class="keyword">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mServiceLooper.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(@Nullable Intent intent)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>stopSelf()和stopSelf(int startId)的区别：</strong></p>
<blockquote>
<p>在调用stopSelf(startId)时，系统会检测是否还有startId存在，如果存在，则不销毁Service，否则销毁Service。即stopSelf(startId)和onStartCommand()成对的时候，Service才被销毁。</p>
<p>在调用stopSelf()时，实际调用的是stopSelf(-1)，那么将直接销毁Service，系统就不会检测是否还有其他的startId存在。</p>
</blockquote>
<p><strong>总结：</strong></p>
<p>从上面源码可以看出，IntentService本质是采用Handler和HandlerThread方式：</p>
<ol>
<li>通过<code>HandlerThread</code>单独开启一个线程；</li>
<li>创建一个名为<code>ServiceHandler</code>的内部Handler；</li>
<li>将<code>ServiceHandler</code>与<code>HandlerThread</code>所对应的子线程进行绑定；</li>
<li>通过<code>onStartCommand()</code>传递给服务的Intent，依次插入到工作队列中，并逐个发送给<code>onHandleIntent()</code>；</li>
<li>通过<code>onHandleIntent()</code>来依次处理所有Intent请求对象所对应的任务。</li>
</ol>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li>线程任务需要按顺序，在后台执行的使用场景，如：离线下载。</li>
<li>由于所有的任务都在一个Thread Looper里面来做，所以不适合多个数据同时请求的场景。</li>
</ul>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><h4 id="IntentService与Service的区别"><a href="#IntentService与Service的区别" class="headerlink" title="IntentService与Service的区别"></a>IntentService与Service的区别</h4><ul>
<li>Service依赖于应用程序的主线程，所以不宜在Service中编写耗时的逻辑和操作，否则会引起ANR；IntentService创建一个工作线程来处理任务。</li>
<li>Service需要主动调用<code>stopSelf()</code>来结束服务，而IntentService不需要（在所有Intent处理完后，系统会自动关闭服务）。</li>
</ul>
<h4 id="IntentService与其他线程的区别"><a href="#IntentService与其他线程的区别" class="headerlink" title="IntentService与其他线程的区别"></a>IntentService与其他线程的区别</h4><ul>
<li>IntentService内部采用HandlerThread实现，作用类似于后台线程。</li>
<li>与后台线程相比，IntentService是一种后台服务，优势是：优先级高，不易被系统杀死，从而保证任务的执行。（对于后台线程，若进程中没有活动的四大组件，则该线程的优先级非常低，容易被系统杀死，无法保证任务的执行。）</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://lrh1993.gitbooks.io/android_interview_guide/content/android/basis/IntentService.html" target="_blank" rel="noopener">IntentService详解</a></li>
<li><a href="https://developer.android.com/reference/android/app/IntentService" target="_blank" rel="noopener">IntentService</a></li>
<li><a href="https://developer.android.com/training/run-background-service/create-service" target="_blank" rel="noopener">Create a background service</a></li>
<li><a href="https://developer.android.com/guide/components/services.html" target="_blank" rel="noopener">Service</a></li>
<li><a href="https://www.jianshu.com/p/5c1fae2794f6" target="_blank" rel="noopener">Android Service stopSelf</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HandlerThread解析]]></title>
      <url>https://xch168.github.io/2019/03/19/HandlerThread-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>HandlerThread是一个包含<code>Looper</code>的Thread，通过这个Looper可以创建Handler，所以被称为HandlerThread。</p>
</blockquote>
<a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HandlerThread handlerThread = <span class="keyword">new</span> HandlerThread(<span class="string">"handler-thread"</span>);</span><br><span class="line">handlerThread.start(); <span class="comment">// 必须在Handler创建前调用，因为线程start后才会创建Looper</span></span><br><span class="line"></span><br><span class="line">Handler threadHandler = <span class="keyword">new</span> Handler(handlerThread.getLooper()) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">        <span class="comment">// 处理消息，因为这个方法是在子线程调用，所以可以在这执行耗时任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>如果没有HandlerThread，我们在子线程中创建Handler，需要这么操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Handler threadHandler;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line"></span><br><span class="line">        threadHandler = <span class="keyword">new</span> Handler(Looper.myLooper()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">                <span class="comment">// 处理消息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<p>显然步骤比HandlerThread多了好几步，那么接下来我们来看看HandlerThread的实现原理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mPriority;</span><br><span class="line">    <span class="keyword">int</span> mTid = -<span class="number">1</span>;</span><br><span class="line">    Looper mLooper;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTid = Process.myTid();</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            mLooper = Looper.myLooper();</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置线程优先级，因为HandlerThread是作为工作线程，所有可以根据就要降低其优先级</span></span><br><span class="line">        Process.setThreadPriority(mPriority);</span><br><span class="line">        onLooperPrepared();</span><br><span class="line">        Looper.loop();</span><br><span class="line">        mTid = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>分析</strong>：在HandlerThread的run方法中，会调用<code>Looper.prepare()</code>来进行当前线程Looper的初始化，并调用<code>Looper.loop()</code>方法来启动Looper循环。由此可见，HandlerThread只是替我们做了这两步操作。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote>
<p>HandlerThread所做的就是在新开的子线程中创建Looper，所以它的使用场景就是Thread + Looper使用场景的结合，即：<code>在子线程中执行耗时，多任务的操作。</code></p>
</blockquote>
<blockquote>
<p>HandlerThread的特点：<code>单线程串行执行任务</code>。</p>
</blockquote>
<p>可以使用HandlerThread来处理本地IO读写操作（数据库、文件），因为本地IO操作大多数耗时属于毫秒级别，对于单线程 + 异步队列的形式不会产生较大的阻塞。因此不适合处理网络IO操作。</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong>：只要开启一个线程，就可以处理多个耗时任务。</p>
<p><strong>缺点</strong>：任务是串行执行的，不能并行执行。一旦队列中有某个任务执行时间过长，就会导致后续的任务都会被延迟处理。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>HandlerThread不再需要使用的时候，要调用<code>quitSafe()</code>或者<code>quit()</code>方法来结束线程。</li>
<li><code>quitSafe()</code>会等待正在处理的消息处理完后再退出，而<code>quit()</code>不管是否正在处理消息，直接移除所有回调。</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://lrh1993.gitbooks.io/android_interview_guide/content/android/basis/HandlerThread.html" target="_blank" rel="noopener">HandlerThread详解</a></li>
<li><a href="https://droidyue.com/blog/2015/11/08/make-use-of-handlerthread/" target="_blank" rel="noopener">详解 Android 中的 HandlerThread</a></li>
<li><a href="https://developer.android.com/reference/android/os/HandlerThread.html" target="_blank" rel="noopener">HandlerThread</a></li>
<li><a href="https://www.jianshu.com/p/4a8dc2f50ae6" target="_blank" rel="noopener">Android多线程：这是一份详细的HandlerThread源码分析攻略</a></li>
<li><a href="https://waylenw.github.io/Android/android-handler-thread-usage/" target="_blank" rel="noopener">Android HandlerThread使用总结</a></li>
<li><a href="https://blog.csdn.net/u011240877/article/details/72905631" target="_blank" rel="noopener">HandlerThread 使用场景及源码解析</a></li>
<li><a href="https://www.cnblogs.com/zhaoyanjun/p/6062880.html" target="_blank" rel="noopener">Android HandlerThread 总结使用</a></li>
<li><a href="https://androidtrainningcenter.blogspot.com/2013/12/handler-vs-timer-fixed-period-execution.html" target="_blank" rel="noopener">Handler vs Timer</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BlockCanary原理分析]]></title>
      <url>https://xch168.github.io/2019/03/18/BlockCanary-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>BlockCanary是Android平台上的一个轻量的，非侵入式的性能监控组件，可以在使用应用的时候检测主线程上的各种卡顿问题，并可通过组件提供的各种信息分析出原因并进行修复。</p>
</blockquote>
<a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>项目地址：<a href="https://github.com/markzhai/AndroidPerformanceMonitor" target="_blank" rel="noopener">https://github.com/markzhai/AndroidPerformanceMonitor</a></p>
</blockquote>
<p>Step1. 配置build.gradle</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// most often used way, enable notification to notify block event</span></span><br><span class="line">    implementation <span class="string">'com.github.markzhai:blockcanary-android:1.5.0'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// this way you only enable BlockCanary in debug package</span></span><br><span class="line">    <span class="comment">// debugImplementation 'com.github.markzhai:blockcanary-android:1.5.0'</span></span><br><span class="line">    <span class="comment">// releaseImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step2. 在Application中注册</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// Do it on main process</span></span><br><span class="line">        BlockCanary.install(<span class="keyword">this</span>, <span class="keyword">new</span> BlockCanaryContext()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step3. 检测结果</p>
<p><img src="/2019/03/18/BlockCanary-analysis/blockcanary-result.png" alt="blockcanary-result"></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p>在Android中，应用的卡顿，主要是在主线程阻塞导致的。Looper是主线程的消息调度者，所以以它为突破点。</p>
</blockquote>
<p><strong>Looper#loop()</strong>：</p>
<blockquote>
<p>在Looper的loop方法中，有一个Printer，它在每个Message处理的前后被调用，而如果主线程卡住了，就是<code>dispatchMessage</code>里卡住了。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">        <span class="keyword">final</span> Printer logging = me.mLogging;</span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">                            msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>获取主线程的Looper</strong>：</p>
<blockquote>
<p>因为Looper在每个线程最多只有一个实例，所以只要获取到主线程的Looper，就可以设置一个自定义的Printer对象到里面。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Looper mainLooper = Looper.getMainLooper();</span><br></pre></td></tr></table></figure>
<p><strong>创建自定义Printer</strong></p>
<blockquote>
<p>在Printer的println方法去计算主线程一条Message处理的时长，当时长超过设定的阈值时就判定是卡顿了。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mStartedPrinting) &#123;</span><br><span class="line">        mStartTimeMillis = System.currentTimeMillis();</span><br><span class="line">        mStartThreadTimeMillis = SystemClock.currentThreadTimeMillis();</span><br><span class="line">        mStartedPrinting = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        mStartedPrinting = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (isBlock(endTime)) &#123;</span><br><span class="line">            notifyBlockEvent(endTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBlock</span><span class="params">(<span class="keyword">long</span> endTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> endTime - mStartTimeMillis &gt; mBlockThresholdMillis;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>设置自定义Printer到主线程Looper</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Looper.getMainLooper().setMessageLogging(mainLooperPrinter);</span><br></pre></td></tr></table></figure>
<p><strong>流程图</strong>：</p>
<p><img src="/2019/03/18/BlockCanary-analysis/blockcanary-flow.png" alt="blockcanary-flow"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/" target="_blank" rel="noopener">BlockCanary — 轻松找出Android App界面卡顿元凶</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android消息机制——Handler]]></title>
      <url>https://xch168.github.io/2019/03/16/android-handler/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Handler是Android消息机制的上层接口。通过它可以轻松地将一个任务切换到Handler所在的线程中去执行。通常情况下，Handler的使用场景就是<code>更新UI</code>。</p>
</blockquote>
<a id="more"></a>
<h3 id="Handler的使用"><a href="#Handler的使用" class="headerlink" title="Handler的使用"></a>Handler的使用</h3><blockquote>
<p>在子线程中，进行耗时操作，执行完操作后，发送消息，通知主线程更新UI。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Activity</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 更新UI</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState, PersistableBundle persistentState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState, persistentState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 执行耗时任务</span></span><br><span class="line">                ...</span><br><span class="line">                <span class="comment">// 任务执行完后，通知Handler更新UI</span></span><br><span class="line">                Message message = Message.obtain();</span><br><span class="line">                message.what = <span class="number">1</span>;</span><br><span class="line">                mHandler.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Handler架构"><a href="#Handler架构" class="headerlink" title="Handler架构"></a>Handler架构</h3><blockquote>
<p>Handler消息机制主要包括：<code>MessageQueue</code>、<code>Handler</code>、<code>Looper</code>这三大部分，以及<code>Message</code>。</p>
<p><strong>Message</strong>：需要传递的消息，可以传递数据；</p>
<p><strong>MessageQueue</strong>：消息队列，但是它的内部实现并不是用的队列，而是通过单链表的数据结构来维护消息列表，因为单链表在插入和删除上比较有优势。主要功能是向消息池投递消息（<code>MessageQueue.enqueueMessage</code>）和取走消息池的消息（<code>MessageQueue.next</code>）。</p>
<p><strong>Handler</strong>：消息辅助类，主要功能是向消息池发送各种消息事件（<code>Handler.sendMessage</code>）和处理相应消息事件（<code>Handler.handleMessage</code>）；</p>
<p><strong>Looper</strong>：消息控制器，不断循环执行（<code>Looper.loop</code>），从MessageQueue中读取消息，按分发机制将消息分发给目标处理者。</p>
</blockquote>
<p><img src="/2019/03/16/android-handler/handler-class.png" alt="handler-class"></p>
<p>从上面的类图可以看出：</p>
<ul>
<li>Looper有一个MessageQueue消息队列；</li>
<li>MessageQueue有一组待处理的Message；</li>
<li>Message中记录发送和处理消息的Handler；</li>
<li>Handler中有Looper和MessageQueue。</li>
</ul>
<blockquote>
<p><strong>MessageQueue、Handler和Looper三者之间的关系：</strong></p>
<p>每个线程中只能存在一个Looper，Looper是保存在ThreadLocal中的。</p>
<p>主线程（UI线程）已经创建了一个Looper，所以在主线程中不需要再创建Looper，但是在其他线程中需要创建Looper。</p>
<p>每个线程中可以有多个Handler，即一个Looper可以处理来自多个Handler的消息。</p>
<p>Looper中维护一个MessageQueue，来维护消息队列，消息队列中的Message可以来自不同的Handler。</p>
</blockquote>
<p><img src="/2019/03/16/android-handler/handler-arch.png" alt="handler-arch"></p>
<h3 id="Handler的运行流程"><a href="#Handler的运行流程" class="headerlink" title="Handler的运行流程"></a>Handler的运行流程</h3><blockquote>
<p>在子线程执行完耗时操作，当Handler发送消息时，将会调用<code>MessageQueue.enqueueMessage</code>，向消息队列中添加消息。</p>
<p>当通过<code>Looper.loop</code>开启循环后，会不断地从消息池中读取消息，即调用<code>MessageQueue.next</code>，</p>
<p>然后调用目标Handler（即发送该消息的Handler）的<code>dispatchMessage</code>方法传递消息，</p>
<p>然后返回到Handler所在线程，目标Handler收到消息，调用<code>handleMessage</code>方法，接收消息，处理消息。</p>
</blockquote>
<p><img src="/2019/03/16/android-handler/handler-flow.png" alt="handler-flow"></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="在子线程创建Handler"><a href="#在子线程创建Handler" class="headerlink" title="在子线程创建Handler"></a>在子线程创建Handler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Looper.prepare();</span><br><span class="line"></span><br><span class="line">          mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// process incoming messages here</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          Looper.loop();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>从上面可以看出，在子线程中创建Handler之前，要调用<code>Looper.prepare()</code>方法，Handler创建后，还要调用<code>Looper.loop()</code>方法。而前面我们在主线程创建Handler却不要这两个步骤，因为系统帮我们做了。</p>
<h4 id="主线程的Looper"><a href="#主线程的Looper" class="headerlink" title="主线程的Looper"></a>主线程的Looper</h4><blockquote>
<p>在ActivityThread的main方法，会调用<code>Looper.prepareMainLooper()</code>来初始化Looper，并调用<code>Looper.loop()</code>方法来开启循环。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThread</span> <span class="keyword">extends</span> <span class="title">ClientTransactionHandler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h4><blockquote>
<p>从上可知，要使用Handler，必须先创建一个Looper。</p>
</blockquote>
<p><strong>初始化Looper</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        prepare(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        prepare(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sMainLooper = myLooper();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">        mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">        mThread = Thread.currentThread();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上可以看出，不能重复创建Looper，每个线程只能创建一个。创建Looper，并保存在<code>ThreadLocal</code>。其中ThreadLocal是线程本地存储区（Thread Local Storage，简称TLS），每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的TLS区域。</p>
<p><strong>开启Looper</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 获取TLS存储的Looper对象</span></span><br><span class="line">        <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">        <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进入loop主循环方法</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Message msg = queue.next(); <span class="comment">// 可能会阻塞，因为next()方法可能会无线循环</span></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">            <span class="keyword">final</span> Printer logging = me.mLogging;</span><br><span class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">                logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">                        msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> dispatchStart = needStartTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> dispatchEnd;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获取msg的目标Handler，然后分发Message</span></span><br><span class="line">                msg.target.dispatchMessage(msg);</span><br><span class="line">                dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                    Trace.traceEnd(traceTag);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            msg.recycleUnchecked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><p><strong>创建Handler</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 必须先执行Looper.prepare()，才能获取Looper对象，否则为null</span></span><br><span class="line">        mLooper = Looper.myLooper();</span><br><span class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread "</span> + Thread.currentThread()</span><br><span class="line">                        + <span class="string">" that has not called Looper.prepare()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mQueue = mLooper.mQueue;  <span class="comment">// 消息队列，来自Looper对象</span></span><br><span class="line">        mCallback = callback;     <span class="comment">// 回调方法</span></span><br><span class="line">        mAsynchronous = async;    <span class="comment">// 设置消息是否为异步处理方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>发送消息</strong>：</p>
<blockquote>
<p>子线程通过Handler的post()方法或send()方法发送消息，最终都是调用<code>sendMessageAtTime()</code>方法。</p>
</blockquote>
<p>post方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(Runnable r, <span class="keyword">long</span> uptimeMillis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(getPostMessage(r), uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(Runnable r, Object token, <span class="keyword">long</span> uptimeMillis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(getPostMessage(r, token), uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postDelayed</span><span class="params">(Runnable r, <span class="keyword">long</span> delayMillis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">    Message m = Message.obtain();</span><br><span class="line">    m.callback = r;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>send方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmptyMessageDelayed(what, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">    Message msg = Message.obtain();</span><br><span class="line">    msg.what = what;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageAtTime</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    Message msg = Message.obtain();</span><br><span class="line">    msg.what = what;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        delayMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sendMessageAtTime()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    MessageQueue queue = mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">            <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    msg.target = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="分发消息"><a href="#分发消息" class="headerlink" title="分发消息"></a>分发消息</h4><blockquote>
<p>在loop()方法中，获取到下一条消息后，执行<code>msg.target.dispatchMessage(msg)</code>，来分发消息到目标Handler。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 当Message存在回调方法，调用该回调方法</span></span><br><span class="line">            handleCallback(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 当Handler存在Callback成员变量时，回调其handleMessage()方法</span></span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Handler自身的回调方法</span></span><br><span class="line">            handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        message.callback.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Handler的使用技巧"><a href="#Handler的使用技巧" class="headerlink" title="Handler的使用技巧"></a>Handler的使用技巧</h3><h4 id="在子线程里弹Toast"><a href="#在子线程里弹Toast" class="headerlink" title="在子线程里弹Toast"></a>在子线程里弹Toast</h4><p>当我们尝试在子线程里直接弹Toast的时候，会crash：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: Can<span class="string">'t toast on a thread that has not called Looper.prepare()</span></span><br></pre></td></tr></table></figure>
<p>因为Toast的实现依赖于Handler，按子线程使用Handler的要求修改即可，同理的还有<code>Dialog</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Toast显示出来了"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<h4 id="从其他线程访问UI线程"><a href="#从其他线程访问UI线程" class="headerlink" title="从其他线程访问UI线程"></a>从其他线程访问UI线程</h4><blockquote>
<p>Android中只能在UI线程对UI进行修改，Android提供了下面几个方法来访问UI线程，其本质都是将消息发送给UI线程中的Handler。</p>
</blockquote>
<ul>
<li>Activity.runOnUiThread(Runnable)</li>
<li>View.post(Runnable)</li>
<li>View.postDelayed(Runnable, long)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Bitmap bitmap = loadImageFromNetwork(<span class="string">"http://example.com/image.png"</span>);</span><br><span class="line">        mImageView.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mImageView.setImageBitmap(bitmap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<h4 id="在onCreate方法获取View的宽高"><a href="#在onCreate方法获取View的宽高" class="headerlink" title="在onCreate方法获取View的宽高"></a>在onCreate方法获取View的宽高</h4><blockquote>
<p>在onCreate方法中直接获取View的宽高都为0，因为View还没有测量完成。当通过View的post方法，其实是将这个Runnable放到主线程的Handler，等测量完成后，就会执行这个Runnable，因为测量操作也是Handler的一个任务，而Handler中的任务是线性执行的，所以post的任务会在测量完后执行。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">view.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> width = view.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = view.getHeight(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2019/03/16/android-handler/handler-message.png" alt="handler-message"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/reference/android/os/Handler" target="_blank" rel="noopener">Handler</a></li>
<li><a href="https://developer.android.com/training/multiple-threads/communicate-ui" target="_blank" rel="noopener">Communicate with the UI thread</a></li>
<li><a href="https://lrh1993.gitbooks.io/android_interview_guide/content/android/basis/message-mechanism.html" target="_blank" rel="noopener">Android消息机制</a></li>
<li><a href="http://yifeiyuan.me/blog/f77487d3.html" target="_blank" rel="noopener">一文看穿 Handler</a></li>
<li><a href="https://blog.csdn.net/luoshengyang/article/details/6817933" target="_blank" rel="noopener">Android应用程序消息处理机制（Looper、Handler）分析</a></li>
<li><a href="http://gityuan.com/2015/12/26/handler-message-framework/" target="_blank" rel="noopener">Android消息机制1-Handler(Java层)</a></li>
<li><a href="https://developer.android.com/guide/components/processes-and-threads.html" target="_blank" rel="noopener">进程和线程</a></li>
<li><a href="https://www.jianshu.com/p/7f5342ceba34" target="_blank" rel="noopener">探究为何：在onCreate中通过View.post能获取宽高</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android应用ANR分析]]></title>
      <url>https://xch168.github.io/2019/03/09/android-anr-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>当Android应用的UI线程被阻塞太久时，就会触发一个”Application Not Responding“（ANR）错误。如果APP运行在前台，系统就会弹出一个提示框，告知用户，用户可以选择继续等待或者强制关掉。</p>
</blockquote>
<a id="more"></a>
<h3 id="ANR的原因"><a href="#ANR的原因" class="headerlink" title="ANR的原因"></a>ANR的原因</h3><blockquote>
<p>ANR是因为负责更新UI的主线程无法处理用户输入事件或绘制操作，而导致的糟糕体验。</p>
</blockquote>
<p>在Android中，程序的响应性是由Activity Manager与Window Manager系统服务来负责监控的，当系统检测到下面的条件之一时会显示ANR的对话框：</p>
<ul>
<li>对输入事件（例如硬件点击或者屏幕触摸事件），5秒内都无响应。</li>
<li>BroadcastReceiver不能在10秒内结束接收到的任务。</li>
</ul>
<h3 id="ANR的触发场景"><a href="#ANR的触发场景" class="headerlink" title="ANR的触发场景"></a>ANR的触发场景</h3><ol>
<li>在主线程执行耗时的IO操作。</li>
<li>在主线程执行耗时的计算。</li>
<li>在主线程与其他进程进行同步的binder调用，并且另一个进程需要很长时间才能返回。</li>
<li>主线程因等待其他线程的同步锁（<code>synchronized</code>）而被长时间阻塞。</li>
<li>主线程与另一个线程处于死锁状态。</li>
</ol>
<h3 id="检测ANR"><a href="#检测ANR" class="headerlink" title="检测ANR"></a>检测ANR</h3><h4 id="Strict-mode"><a href="#Strict-mode" class="headerlink" title="Strict mode"></a>Strict mode</h4><blockquote>
<p>使用<code>StrictMode</code>可以帮助你在开发的过程中发现在主线程意外的IO操作。</p>
</blockquote>
<p>可以在Application、Activity或者其他应用组件进行配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (DEVELOPER_MODE) &#123;</span><br><span class="line">         StrictMode.setThreadPolicy(<span class="keyword">new</span> StrictMode.ThreadPolicy.Builder()</span><br><span class="line">                 .detectDiskReads()</span><br><span class="line">                 .detectDiskWrites()</span><br><span class="line">                 .detectNetwork()   <span class="comment">// or .detectAll() for all detectable problems</span></span><br><span class="line">                 .penaltyLog()</span><br><span class="line">                 .build());</span><br><span class="line">         StrictMode.setVmPolicy(<span class="keyword">new</span> StrictMode.VmPolicy.Builder()</span><br><span class="line">                 .detectLeakedSqlLiteObjects()</span><br><span class="line">                 .detectLeakedClosableObjects()</span><br><span class="line">                 .penaltyLog()</span><br><span class="line">                 .penaltyDeath()</span><br><span class="line">                 .build());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">super</span>.onCreate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="允许后台ANR弹窗"><a href="#允许后台ANR弹窗" class="headerlink" title="允许后台ANR弹窗"></a>允许后台ANR弹窗</h4><blockquote>
<p>默认情况下，Android只显示前台ANR弹窗，如果需要允许显示后台ANR弹窗，就要到开发者选项，开启”Show all ANRs“。</p>
</blockquote>
<h4 id="TraceView"><a href="#TraceView" class="headerlink" title="TraceView"></a>TraceView</h4><blockquote>
<p>使用Traceview去跟踪正在运行的应用，并定位主线程忙碌的位置。</p>
</blockquote>
<h4 id="分析traces日志文件"><a href="#分析traces日志文件" class="headerlink" title="分析traces日志文件"></a>分析traces日志文件</h4><blockquote>
<p>当发生ANR，Android系统会存储日志文件。</p>
<p>日志路径：</p>
<p>旧版系统：<code>/data/anr/traces.txt</code></p>
<p>新版系统：<code>/data/anr/anr_*</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn_doANR).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码触发了ANR，相关日志：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"main"</span> prio=<span class="number">5</span> tid=<span class="number">1</span> Sleeping</span><br><span class="line">  | group=<span class="string">"main"</span> sCount=<span class="number">1</span> dsCount=<span class="number">0</span> flags=<span class="number">1</span> obj=<span class="number">0x75115ec8</span> self=<span class="number">0xeb674000</span></span><br><span class="line">  | sysTid=<span class="number">10723</span> nice=-<span class="number">10</span> cgrp=<span class="keyword">default</span> sched=<span class="number">0</span>/<span class="number">0</span> handle=<span class="number">0xf02fa494</span></span><br><span class="line">  | state=S schedstat=( <span class="number">384398145</span> <span class="number">34829357</span> <span class="number">257</span> ) utm=<span class="number">26</span> stm=<span class="number">12</span> core=<span class="number">2</span> HZ=<span class="number">100</span></span><br><span class="line">  | stack=<span class="number">0xff10b000</span>-<span class="number">0xff10d000</span> stackSize=<span class="number">8</span>MB</span><br><span class="line">  | held mutexes= <span class="comment">// Java调用堆栈信息，可以查看调用关系，定位到具体位置</span></span><br><span class="line">  at java.lang.Thread.sleep(Native method)</span><br><span class="line">  - sleeping on &lt;<span class="number">0x02ed72b7</span>&gt; (a java.lang.Object)</span><br><span class="line">  at java.lang.Thread.sleep(Thread.java:<span class="number">373</span>)</span><br><span class="line">  - locked &lt;<span class="number">0x02ed72b7</span>&gt; (a java.lang.Object)</span><br><span class="line">  at java.lang.Thread.sleep(Thread.java:<span class="number">314</span>)</span><br><span class="line">  at com.github.xch168.anrdemo.MainActivity$<span class="number">1</span>.onClick(MainActivity.java:<span class="number">18</span>)<span class="comment">// 触发ANR的方法</span></span><br><span class="line">  at android.view.View.performClick(View.java:<span class="number">6597</span>)</span><br><span class="line">  at android.view.View.performClickInternal(View.java:<span class="number">6574</span>)</span><br><span class="line">  at android.view.View.access$<span class="number">3100</span>(View.java:<span class="number">778</span>)</span><br><span class="line">  at android.view.View$PerformClick.run(View.java:<span class="number">25885</span>)</span><br><span class="line">  at android.os.Handler.handleCallback(Handler.java:<span class="number">873</span>)</span><br><span class="line">  at android.os.Handler.dispatchMessage(Handler.java:<span class="number">99</span>)</span><br><span class="line">  at android.os.Looper.loop(Looper.java:<span class="number">193</span>)</span><br><span class="line">  at android.app.ActivityThread.main(ActivityThread.java:<span class="number">6669</span>)</span><br><span class="line">  at java.lang.reflect.Method.invoke(Native method)</span><br><span class="line">  at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:<span class="number">493</span>)</span><br><span class="line">  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">858</span>)</span><br></pre></td></tr></table></figure>
<h3 id="如何避免ANR"><a href="#如何避免ANR" class="headerlink" title="如何避免ANR"></a>如何避免ANR</h3><ol>
<li>在工作线程中，执行耗时操作，如网络、DB操作或者Bitmap大小调整的操作。</li>
<li>使用AsyncTask来执行耗时操作。</li>
<li>使用线程或者HandlerThread，要通过<code>Process.setThreadPriority()</code>并传递<code>THREAD_PRIORITY_BACKGROUND</code>来设置线程的优先级为”background“，不然这个线程仍然会使得你的应用显得卡顿，因为这个线程默认与UI线程有着同样的优先级。</li>
<li>避免在BroadcastReceiver中执行耗时操作，如保存数据或者注册一个Notification。不能通过工作线程来执行复杂的任务操作，而应该启动一个<code>IntentService</code>来响应BroadcastReceiver中的长时间任务。</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/topic/performance/vitals/anr" target="_blank" rel="noopener">ANRs</a></li>
<li><a href="http://hukai.me/android-training-course-in-chinese/performance/perf-anr/index.html" target="_blank" rel="noopener">避免出现程序无响应ANR</a></li>
<li><a href="https://www.jianshu.com/p/30c1a5ad63a3" target="_blank" rel="noopener">Android应用ANR分析</a></li>
<li><a href="https://developer.android.com/reference/android/os/StrictMode.html" target="_blank" rel="noopener">StrictMode</a></li>
<li><a href="https://www.jianshu.com/p/ad1a84b6ec69" target="_blank" rel="noopener">ANR监测机制</a></li>
<li><a href="https://gityuan.com/2016/07/02/android-anr/" target="_blank" rel="noopener">理解Android ANR的触发原理</a></li>
<li><a href="https://juejin.im/post/5be698d4e51d452acb74ea4c" target="_blank" rel="noopener">Android ANR日志分析指南</a></li>
<li><a href="https://mp.weixin.qq.com/s/7h-waxrNn-K2XFmRA92p5w" target="_blank" rel="noopener">ANR 原理与实战技巧</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Performance </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android OOM分析]]></title>
      <url>https://xch168.github.io/2019/02/24/android-oom-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>OOM(Out of Memory)即内存溢出，是因为应用所需要分配的内存超过系统对应用内存的阈值，而抛出的<code>java.lang.OutOfMemoryError</code>错误。</p>
<p>OOM的根本原因是开发者对内存使用不当造成的。</p>
</blockquote>
<a id="more"></a>
<h3 id="Android内存分配与回收机制"><a href="#Android内存分配与回收机制" class="headerlink" title="Android内存分配与回收机制"></a>Android内存分配与回收机制</h3><blockquote>
<p>Android系统仅会在新的内存分配之前判断Heap的尾端剩余空间是否足够，如果不够就会触发GC操作，从而腾出更多空闲的内存空间。</p>
</blockquote>
<h4 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h4><blockquote>
<p>Android的Heap空间是一个<code>Generational Heap Memory</code>的模型，最近分配的对象会存放在<code>Young Generation</code>区域，当一个对象在这个区域停留的时间达到一定程度，它会被移动到<code>Old Generation</code>，最后累积一定时间再移动到<code>Permanent Generation</code>区域。</p>
</blockquote>
<p><img src="/2019/02/24/android-oom-analysis/android-memory-mode.png" alt="android_memory_mode"></p>
<h4 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h4><blockquote>
<p>系统会根据内存中不同的内存数据类型分别执行不同的GC操作。例如，刚分配到<code>Young Generation</code>区域的对象通常更容易被销毁回收，同时在<code>Young Generation</code>区域的gc操作速度回比<code>Old Generation</code>区域的gc速度更快。</p>
<p>每一个Generation的内存区域都有固定的大小，随着新的对象陆续被分配到此区域，当这些对象总的大小快达到这一级别内存区域的阈值时，会触发GC操作，以腾出空间来存放其他新的对象。</p>
<p>通常情况下，GC发生的时候，所有的线程都是会被暂停的。执行GC所占用的时间和它发生在哪一个Generation也有关系，<code>Young Generation</code>中每次GC操作时间是最短的，<code>Old Generation</code>其次，<code>Permanent Generation</code>最长。执行时间的长短也和当前Generation中的对象数量有关。</p>
</blockquote>
<p><img src="/2019/02/24/android-oom-analysis/gc_threshold.png" alt="gc_threshold"></p>
<h4 id="获取内存的阈值"><a href="#获取内存的阈值" class="headerlink" title="获取内存的阈值"></a>获取内存的阈值</h4><blockquote>
<p>为了整个Android系统的内存控制需要，Android系统为每个应用程序都设置了一个硬性的<code>Dalvik Heap Size</code>最大限制阈值，这个阈值在不同的设备上回因为RAM大小不同而有所差异。如果你的应用占用内存空间已经接近这个阈值，此时再尝试分配内存的话，很容易引起<code>OutOfMemoryError</code>的错误。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Heap Size阈值</span></span><br><span class="line">ActivityManager am = (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line"><span class="comment">// 返回值是以Mb为单位</span></span><br><span class="line"><span class="keyword">int</span> memoryClass = am.getMemoryClass();</span><br></pre></td></tr></table></figure>
<h3 id="OOM触发条件"><a href="#OOM触发条件" class="headerlink" title="OOM触发条件"></a>OOM触发条件</h3><blockquote>
<p>只要allocated + 新分配的内存 &gt;= getMemoryClass()的时候就会发生OOM。</p>
</blockquote>
<p><img src="/2019/02/24/android-oom-analysis/oom-error.png" alt="oom-error"></p>
<h3 id="避免OOM的方法"><a href="#避免OOM的方法" class="headerlink" title="避免OOM的方法"></a>避免OOM的方法</h3><h4 id="减小对象的内存占用"><a href="#减小对象的内存占用" class="headerlink" title="减小对象的内存占用"></a>减小对象的内存占用</h4><blockquote>
<p>避免OOM的第一步就是要尽量减少新分配出来的对象占用内存的大小，尽量使用更加轻量级的对象。</p>
</blockquote>
<p><strong>1. 使用更加轻量的数据结构</strong></p>
<blockquote>
<p>使用<code>ArrayMap</code>/<code>SparseArray</code>替代HashMap等传统数据结构。</p>
<p><code>ArrayMap</code>是Android系统专为移动操作系统编写的容器，在大多数情况下，比HashMap效率更高，占用内存更少。</p>
<p><code>SparseArray</code>更加高效在于它们避免了对key和value的autobox自动装箱，并且避免了装箱后的解箱。</p>
</blockquote>
<p><strong>2. 避免在Android里面使用Enum</strong></p>
<blockquote>
<p>Android官方说明”<strong>Enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.</strong>“，所以应避免在Android里面使用枚举。</p>
</blockquote>
<p><strong>3. 减小Bitmap对象的内存占用</strong></p>
<blockquote>
<p>Bitmap是一个极容易消耗内存的大胖子，减小创建处理的Bitmap的内存占用是很重要的，通常来说有下面2个措施：</p>
<ul>
<li>inSampleSize：缩放比例，在把图片载入内存之前，我们需要先计算出一个合适的缩放比例，避免不必要的大图载入。</li>
<li>decode format：解码格式，选择<code>ARGB_8888</code>/<code>RGB_565</code>/<code>ARGB_4444</code>/<code>ALPHA_8</code>，存在很大差异。</li>
</ul>
</blockquote>
<p><strong>4. 使用更小的图片</strong></p>
<blockquote>
<p>对应资源图片，要特别留意这张图片是否存在可压缩的空间，是否可以使用一张更小的图片。尽量使用更小的图片不仅仅可以减少内存的使用，还可以避免出现大量的<code>InflationException</code>。假设有一张很大的图片被XML文件直接引用，很有可能在初始化视图的时候会因为内存不足而发生<code>InflationException</code>，这个问题的根本原因其实是发生了OOM。</p>
</blockquote>
<h4 id="内存对象的重复利用"><a href="#内存对象的重复利用" class="headerlink" title="内存对象的重复利用"></a>内存对象的重复利用</h4><blockquote>
<p>大多数对象的复用，最终实施的方案都是利用对象池技术，要么是在编写代码的时候显示的在程序里面去创建对象池，然后处理好复用的实现逻辑，要么就是利用系统框架既有的某些复用特性达到减少对象的重复创建，从而减少内存的分配与回收。</p>
</blockquote>
<blockquote>
<p>在Android上面最常用的一个缓存算法是LRU(Least Recently Use)，建议操作原理如下图所示：</p>
</blockquote>
<p><img src="/2019/02/24/android-oom-analysis/android_perf_2_lru_mode.png" alt="android_perf_2_lru_mode"></p>
<p><strong>1. 复用系统自带的资源</strong></p>
<blockquote>
<p>Android系统本身内置了许多的资源，如字符串、颜色、图片、动画、样式以及简单布局等，这些资源可以在应用程序中直接使用。这样做不仅仅可以减少应用程序的自身负重，减小APK的大小。但是要留意Android系统的版本差异性。</p>
</blockquote>
<p><strong>2. 注意在ListView/GridView等出现大量重复子组件的视图里面对ConvertView的复用</strong><br><strong>3. Bitmap对象的复用</strong></p>
<blockquote>
<p>在RecyclerView、ListView、GridView等显示大量图片的控件里面需要使用LRU机制来缓存处理好的Bitmap。</p>
</blockquote>
<blockquote>
<p>利用<code>inBitmap</code>的高级特性提高Android系统在Bitmap分配与释放执行效率上的提升。使用<code>inBitmap</code>属性可以告知Bitmap解码器去尝试使用已经存在的内存区域，新解码的bitmap会尝试去使用之前那张bitmap在heap中所占据的<code>pixel data</code>内存区域，而不是去问内存重新申请一块区域来存放bitmap。利用这种特性，即使是上千张的图片，也只会仅仅只需要占用屏幕所能够显示的图片数量的大小。</p>
</blockquote>
<p><img src="/2019/02/24/android-oom-analysis/android_perf_2_inbitmap_new.png" alt="android_perf_2_inbitmap_new"></p>
<p>使用inBitmap需要注意的几个限制条件：</p>
<ul>
<li><p>在SDK 11~18之间，重用的bitmap大小必须是一致的，例如给inBitmap赋值的图片大小为100x100，那么新申请的bitmap必须也为100x100才能够被重用。从SDK 19开始，新申请的bitmap大小必须小于或等于已经赋值过的bitmap大小。</p>
</li>
<li><p>新申请的bitmap与旧的bitmap必须有相同的解码格式，例如前面的bitmap是8888，那么久不能支持4444和565格式的bitmap了。我们可以创建一个包含多种典型可重用bitmap的对象池，这样后续的bitmap创建都能找到合适的”模板“去进行重用。</p>
<p><img src="/2019/02/24/android-oom-analysis/android_perf_2_inbitmap_pool.png" alt="android_perf_2_inbitmap_pool"></p>
</li>
</ul>
<p><strong>4. 避免在onDraw方法里面执行对象的创建</strong></p>
<blockquote>
<p>类似onDraw等频繁调用的方法，一定需要注意避免在这里做创建对象的操作，因为它会迅速增加内存的使用，而且很容易引起频繁的GC，甚至是内存抖动。</p>
</blockquote>
<p><strong>5. StringBuilder</strong></p>
<blockquote>
<p>当代码中需要使用到大量的字符串拼接操作，就有必要考虑使用StringBuilder来代替频繁的”+“。</p>
</blockquote>
<h4 id="避免对象的内存泄漏"><a href="#避免对象的内存泄漏" class="headerlink" title="避免对象的内存泄漏"></a>避免对象的内存泄漏</h4><blockquote>
<p>内存对象的泄漏，会导致一些不再使用的对象无法及时释放，这样一方面占用了宝贵的内存空间，很容易导致后续需要分配内存的时候，空闲空间不足而出现OOM。显然，这还使得每级Generation的内存区域可用空间变小，GC就会更容易被触发，容易出现内存抖动，从而引起性能问题。</p>
</blockquote>
<p><strong>1. 注意Activity的泄漏</strong></p>
<blockquote>
<p>通常来说，Activity的泄漏是内存泄漏里面最为严重的问题，它占用的内存最多，影响面广。</p>
<p>导致Activity泄漏的两种情况：</p>
<ul>
<li>内部类引用导致Activity的泄漏</li>
<li>Activity Context被传递到其他实例中，这可能导致自身被引用而发生泄漏。</li>
</ul>
</blockquote>
<p><strong>2. 考虑使用Application Context而不是Activity Context</strong></p>
<blockquote>
<p>对于大部分非必须使用Activity Context的情况（Dialog的Context就必须是Activity Context），都可以考虑使用Application Context而不是Activity的Context，这样就可以避免不经意的Activity泄漏。</p>
</blockquote>
<p><strong>3. 注意临时Bitmap对象的及时回收</strong></p>
<blockquote>
<p>临时创建的某个相对比较大的bitmap对象，在经过转换得到新的bitmap对象之后，应该尽快回收原始的bitmap，这样能够更快释放原始bitmap所占用的空间。</p>
</blockquote>
<p><strong>注意Bitmap类里面提供的<code>createBitmap()方法</code></strong>：</p>
<p><img src="/2019/02/24/android-oom-analysis/android_perf_oom_create_bitmap.png" alt="android_perf_oom_create_bitmap"></p>
<p>这个函数返回的bitmap有可能和source bitmap是同一个，在回收的时候，需要特别检查source bitmap与return bitmap的引用是否相同，只有在不等的情况下，才能够执行source bitmap的recycle方法。</p>
<p><strong>4. 注意监听器的注销</strong></p>
<blockquote>
<p>在Android程序里面存在很多需要register和unregister的监听器，需要确保在合适的时候及时unregister那些监听器。手动add的listener，需要记得及时remove这个listener。</p>
</blockquote>
<p><strong>5. 注意缓存容器中的对象泄漏</strong></p>
<blockquote>
<p>如果容器是静态或者全局的，那么对于里面存放的对象要及时remove。</p>
</blockquote>
<p><strong>6. 注意WebView的泄漏</strong></p>
<blockquote>
<p>Android中WebView存在很大的兼容性问题，需要再合适的时机进行销毁。</p>
</blockquote>
<p><strong>7. 注意Cursor对象是否及时关闭</strong></p>
<blockquote>
<p>对于数据库查询的Cursor，如果没有及时关闭就会造成泄漏。</p>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://hukai.me/android-performance-oom/" target="_blank" rel="noopener">Android内存优化之OOM</a></li>
<li><a href="http://hukai.me/android-performance-memory/" target="_blank" rel="noopener">Android性能优化之内存篇</a></li>
<li><a href="https://www.cnblogs.com/scetopcsa/p/4005398.html" target="_blank" rel="noopener">Android OOM 解决方案</a></li>
<li><a href="https://www.jianshu.com/p/ed88b12cc65e" target="_blank" rel="noopener">android内存泄漏 OOM查找总结</a></li>
<li><a href="https://mp.weixin.qq.com/s/UQj4_SdoLW93SmxPszZPdA?" target="_blank" rel="noopener">Android OOM案例分析</a></li>
<li><a href="https://www.jianshu.com/p/e574f0ffdb42" target="_blank" rel="noopener">不可思议的OOM</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Performance </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeakCanary原理分析]]></title>
      <url>https://xch168.github.io/2019/02/22/leakcanary-principle-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p><a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">LeakCanary</a>是一个开源的内存泄漏检测库，极大简化了内存泄漏的检测流程。了解其工作原理，有助于我们更好的理解Android的内存管理机制。</p>
</blockquote>
<a id="more"></a>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>在<code>build.gradle</code>中添加配置：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  debugImplementation <span class="string">'com.squareup.leakcanary:leakcanary-android:1.6.3'</span></span><br><span class="line">  releaseImplementation <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'</span></span><br><span class="line">  <span class="comment">// Optional, if you use support library fragments:</span></span><br><span class="line">  debugImplementation <span class="string">'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>Application</code>类中添加代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LeakCanary.isInAnalyzerProcess(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            <span class="comment">// This process is dedicated to LeakCanary for heap analysis.</span></span><br><span class="line">            <span class="comment">// You should not init your app in this process.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LeakCanary.install(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// Normal app init code...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用RefWatcher观察那些本该被GC回收掉的对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RefWatcher refWatcher = LeakCanary.installedRefWatcher();</span><br><span class="line"></span><br><span class="line"><span class="comment">// We expect schrodingerCat to be gone soon (or not), let's watch it.</span></span><br><span class="line">refWatcher.watch(schrodingerCat);</span><br></pre></td></tr></table></figure>
<h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><blockquote>
<ol>
<li><code>RefWatcher.watch()</code>创建一个<code>KeyedWeakReference</code>到要被监控的对象。</li>
<li>然后在后台线程检查引用是否被清除，如果没有，调用GC。</li>
<li>如果引用还是未被清除，把heap内存dump到APP对应的文件系统中的一个<code>.hprof</code>文件中。</li>
<li>在另一个进程中的<code>HeapAnalyzerService</code>有一个<code>HeapAnalyzer</code>使用<a href="https://github.com/square/haha" target="_blank" rel="noopener">HAHA</a>解析这个文件。</li>
<li>在Heap Dump中，<code>HeapAnalyzer</code>根据唯一的reference key找到了<code>KeyedWeakReference</code>，并定位了泄漏的引用。</li>
<li><code>HeapAnalyzer</code>计算到<code>GC Roots</code>的最短强引用路径，并确定是否泄漏，如果是的话，建立导致泄漏的引用链。</li>
<li>引用链传递到APP进程中的<code>DisplayLeakService</code>，并以通知的形式展示出来。</li>
</ol>
</blockquote>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="创建RefWatcher"><a href="#创建RefWatcher" class="headerlink" title="创建RefWatcher"></a>创建RefWatcher</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LeakCanary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@NonNull</span> <span class="function">RefWatcher <span class="title">install</span><span class="params">(@NonNull Application application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> refWatcher(application) <span class="comment">// 创建AndroidRefWatcherBuilder对象</span></span><br><span class="line">            .listenerServiceClass(DisplayLeakService.class) <span class="comment">// 配置监听分析结果的服务</span></span><br><span class="line">            .excludedRefs(AndroidExcludedRefs.createAppDefaults().build()) <span class="comment">// 配置排除的系统泄露</span></span><br><span class="line">            .buildAndInstall(); <span class="comment">// 创建一个Refwatcher并监听Activity的引用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>AndroidRefWatcherBuilder#buildAndInstall</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidRefWatcherBuilder</span> <span class="keyword">extends</span> <span class="title">RefWatcherBuilder</span>&lt;<span class="title">AndroidRefWatcherBuilder</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@NonNull</span> <span class="function">RefWatcher <span class="title">buildAndInstall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LeakCanaryInternals.installedRefWatcher != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"buildAndInstall() should only be called once."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建RefWatcher对象</span></span><br><span class="line">        RefWatcher refWatcher = build();</span><br><span class="line">        <span class="keyword">if</span> (refWatcher != DISABLED) &#123;</span><br><span class="line">            <span class="keyword">if</span> (enableDisplayLeakActivity) &#123;</span><br><span class="line">                LeakCanaryInternals.setEnabledAsync(context, DisplayLeakActivity.class, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (watchActivities) &#123;</span><br><span class="line">                <span class="comment">// 监听Activity的引用</span></span><br><span class="line">                ActivityRefWatcher.install(context, refWatcher);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (watchFragments) &#123;</span><br><span class="line">               	<span class="comment">// 监听Fragment的引用</span></span><br><span class="line">                FragmentRefWatcher.Helper.install(context, refWatcher);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        LeakCanaryInternals.installedRefWatcher = refWatcher;</span><br><span class="line">        <span class="keyword">return</span> refWatcher;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="监听Activity的引用"><a href="#监听Activity的引用" class="headerlink" title="监听Activity的引用"></a>监听Activity的引用</h4><p><strong>ActivityRefWatcher</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityRefWatcher</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">install</span><span class="params">(@NonNull Context context, @NonNull RefWatcher refWatcher)</span> </span>&#123;</span><br><span class="line">        Application application = (Application) context.getApplicationContext();</span><br><span class="line">        ActivityRefWatcher activityRefWatcher = <span class="keyword">new</span> ActivityRefWatcher(application, refWatcher);</span><br><span class="line"></span><br><span class="line">        application.registerActivityLifecycleCallbacks(activityRefWatcher.lifecycleCallbacks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Application.ActivityLifecycleCallbacks lifecycleCallbacks = <span class="keyword">new</span> ActivityLifecycleCallbacksAdapter() &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityDestroyed</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 在Activity执行完onDestroyed方法时，调用RefWatcher的watch来监控该Activity是否泄露</span></span><br><span class="line">            refWatcher.watch(activity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="检查引用"><a href="#检查引用" class="headerlink" title="检查引用"></a>检查引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RefWatcher</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RefWatcher DISABLED = <span class="keyword">new</span> RefWatcherBuilder&lt;&gt;().build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程控制器，在 onDestroy() 之后并且主线程空闲时执行内存泄漏检测</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WatchExecutor watchExecutor;</span><br><span class="line">    <span class="comment">// 判断是否处于调试模式，调试模式中不会进行内存泄漏检测，因为在调试过程中可能会保留上一个引用从而导致错误信息上报。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DebuggerControl debuggerControl;</span><br><span class="line">    <span class="comment">// 用于主动触发GC操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GcTrigger gcTrigger;</span><br><span class="line">    <span class="comment">// 堆信息转储者，dump 内存泄漏处的 heap 信息到 hprof 文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HeapDumper heapDumper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HeapDump.Listener heapdumpListener;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HeapDump.Builder heapDumpBuilder;</span><br><span class="line">    <span class="comment">// 保存每个被检测对象所对应的唯一key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; retainedKeys;</span><br><span class="line">    <span class="comment">// 引用队列，和WeakReference配合使用，当弱引用所引用的对象被GC回收，该弱引用就会被加入到这个队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReferenceQueue&lt;Object&gt; queue;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">(Object watchedReference)</span> </span>&#123;</span><br><span class="line">        watch(watchedReference, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">(Object watchedReference, String referenceName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == DISABLED) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        checkNotNull(watchedReference, <span class="string">"watchedReference"</span>);</span><br><span class="line">        checkNotNull(referenceName, <span class="string">"referenceName"</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> watchStartNanoTime = System.nanoTime();</span><br><span class="line">        <span class="comment">// 为被检测对象生成唯一的key值，并保存到retainedKeys</span></span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        retainedKeys.add(key);</span><br><span class="line">        <span class="comment">// 创建被检测对象的弱引用，并传入该对象的key</span></span><br><span class="line">        <span class="keyword">final</span> KeyedWeakReference reference = <span class="keyword">new</span> KeyedWeakReference(watchedReference, key, referenceName, queue);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 异步检测这个对象是否被回收</span></span><br><span class="line">        ensureGoneAsync(watchStartNanoTime, reference);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureGoneAsync</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> watchStartNanoTime, <span class="keyword">final</span> KeyedWeakReference reference)</span> </span>&#123;</span><br><span class="line">        watchExecutor.execute(<span class="keyword">new</span> Retryable() &#123;</span><br><span class="line">            <span class="meta">@Override</span> <span class="keyword">public</span> Retryable.<span class="function">Result <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ensureGone(reference, watchStartNanoTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"ReferenceEquality"</span>) <span class="comment">// Explicitly checking for named null.</span></span><br><span class="line">    Retryable.<span class="function">Result <span class="title">ensureGone</span><span class="params">(<span class="keyword">final</span> KeyedWeakReference reference, <span class="keyword">final</span> <span class="keyword">long</span> watchStartNanoTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> gcStartNanoTime = System.nanoTime();</span><br><span class="line">        <span class="keyword">long</span> watchDurationMs = NANOSECONDS.toMillis(gcStartNanoTime - watchStartNanoTime);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 移除对象已经被回收的弱引用</span></span><br><span class="line">        removeWeaklyReachableReferences();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调试模式检测不准确</span></span><br><span class="line">        <span class="keyword">if</span> (debuggerControl.isDebuggerAttached()) &#123;</span><br><span class="line">            <span class="comment">// The debugger can create false leaks.</span></span><br><span class="line">            <span class="keyword">return</span> RETRY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断引用是否存在，不存在，表示被对象被回收</span></span><br><span class="line">        <span class="keyword">if</span> (gone(reference)) &#123;</span><br><span class="line">            <span class="keyword">return</span> DONE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 触发GC</span></span><br><span class="line">        gcTrigger.runGc();</span><br><span class="line">        <span class="comment">// GC后再移除对象已经被回收的弱引用</span></span><br><span class="line">        removeWeaklyReachableReferences();</span><br><span class="line">        <span class="comment">// 如果该引用还存在，就表示对象已经泄露</span></span><br><span class="line">        <span class="keyword">if</span> (!gone(reference)) &#123;</span><br><span class="line">            <span class="keyword">long</span> startDumpHeap = System.nanoTime();</span><br><span class="line">            <span class="keyword">long</span> gcDurationMs = NANOSECONDS.toMillis(startDumpHeap - gcStartNanoTime);</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// dump出heap的内存快照</span></span><br><span class="line">            File heapDumpFile = heapDumper.dumpHeap();</span><br><span class="line">            <span class="keyword">if</span> (heapDumpFile == RETRY_LATER) &#123;</span><br><span class="line">                <span class="comment">// Could not dump the heap.</span></span><br><span class="line">                <span class="keyword">return</span> RETRY;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> heapDumpDurationMs = NANOSECONDS.toMillis(System.nanoTime() - startDumpHeap);</span><br><span class="line">			<span class="comment">// 构建HeapDump对象</span></span><br><span class="line">            HeapDump heapDump = heapDumpBuilder.heapDumpFile(heapDumpFile).referenceKey(reference.key)</span><br><span class="line">                                               .referenceName(reference.name)</span><br><span class="line">                                               .watchDurationMs(watchDurationMs)</span><br><span class="line">                                               .gcDurationMs(gcDurationMs)</span><br><span class="line">                                               .heapDumpDurationMs(heapDumpDurationMs)</span><br><span class="line">                                               .build();</span><br><span class="line">			<span class="comment">// 分析HeapDump对象</span></span><br><span class="line">            heapdumpListener.analyze(heapDump);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gone</span><span class="params">(KeyedWeakReference reference)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !retainedKeys.contains(reference.key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeWeaklyReachableReferences</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        KeyedWeakReference ref;</span><br><span class="line">        <span class="comment">// 当弱引用所引用的对象被回收，就会把该引用放到queue中，所以可以通过queue来判断对象是否被回收</span></span><br><span class="line">        <span class="keyword">while</span> ((ref = (KeyedWeakReference) queue.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            retainedKeys.remove(ref.key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Dump-Heap"><a href="#Dump-Heap" class="headerlink" title="Dump Heap"></a>Dump Heap</h4><blockquote>
<p>AndroidHeapDumper是HeapDumper的实现类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidHeapDumper</span> <span class="keyword">implements</span> <span class="title">HeapDumper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">dumpHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File heapDumpFile = leakDirectoryProvider.newHeapDumpFile();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (heapDumpFile == RETRY_LATER) &#123;</span><br><span class="line">            <span class="keyword">return</span> RETRY_LATER;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 生成.hprof文件</span></span><br><span class="line">            Debug.dumpHprofData(heapDumpFile.getAbsolutePath());</span><br><span class="line">            cancelToast(toast);</span><br><span class="line">            notificationManager.cancel(notificationId);</span><br><span class="line">            <span class="keyword">return</span> heapDumpFile;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            CanaryLog.d(e, <span class="string">"Could not dump heap"</span>);</span><br><span class="line">            <span class="comment">// Abort heap dump</span></span><br><span class="line">            <span class="keyword">return</span> RETRY_LATER;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解析hprof"><a href="#解析hprof" class="headerlink" title="解析hprof"></a>解析hprof</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHeapDumpListener</span> <span class="keyword">implements</span> <span class="title">HeapDump</span>.<span class="title">Listener</span> </span>&#123;</span><br><span class="line"> 	<span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">analyze</span><span class="params">(@NonNull HeapDump heapDump)</span> </span>&#123;</span><br><span class="line">        checkNotNull(heapDump, <span class="string">"heapDump"</span>);</span><br><span class="line">        <span class="comment">// 启动HeapAnalyzerServiceService来分析heapDump</span></span><br><span class="line">        HeapAnalyzerService.runAnalysis(context, heapDump, listenerServiceClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapAnalyzerService</span> <span class="keyword">extends</span> <span class="title">ForegroundService</span> <span class="keyword">implements</span> <span class="title">AnalyzerProgressListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runAnalysis</span><span class="params">(Context context, HeapDump heapDump,  Class&lt;? extends AbstractAnalysisResultService&gt; listenerServiceClass)</span> </span>&#123;</span><br><span class="line">        setEnabledBlocking(context, HeapAnalyzerService.class, <span class="keyword">true</span>);</span><br><span class="line">        setEnabledBlocking(context, listenerServiceClass, <span class="keyword">true</span>);</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(context, HeapAnalyzerService.class);</span><br><span class="line">        intent.putExtra(LISTENER_CLASS_EXTRA, listenerServiceClass.getName());</span><br><span class="line">        intent.putExtra(HEAPDUMP_EXTRA, heapDump);</span><br><span class="line">        ContextCompat.startForegroundService(context, intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntentInForeground</span><span class="params">(@Nullable Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CanaryLog.d(<span class="string">"HeapAnalyzerService received a null intent, ignoring."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String listenerClassName = intent.getStringExtra(LISTENER_CLASS_EXTRA);</span><br><span class="line">        HeapDump heapDump = (HeapDump) intent.getSerializableExtra(HEAPDUMP_EXTRA);</span><br><span class="line"></span><br><span class="line">        HeapAnalyzer heapAnalyzer = <span class="keyword">new</span> HeapAnalyzer(heapDump.excludedRefs, <span class="keyword">this</span>, heapDump.reachabilityInspectorClasses);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 分析内存泄露的地方</span></span><br><span class="line">        AnalysisResult result = heapAnalyzer.checkForLeak(heapDump.heapDumpFile, heapDump.referenceKey, heapDump.computeRetainedHeapSize);</span><br><span class="line">        <span class="comment">// 发送内存泄露检测结果的通知</span></span><br><span class="line">        AbstractAnalysisResultService.sendResultToListener(<span class="keyword">this</span>, listenerClassName, heapDump, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapAnalyzer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@NonNull</span> <span class="function">AnalysisResult <span class="title">checkForLeak</span><span class="params">(@NonNull File heapDumpFile, @NonNull String referenceKey, <span class="keyword">boolean</span> computeRetainedSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> analysisStartNanoTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!heapDumpFile.exists()) &#123;</span><br><span class="line">            Exception exception = <span class="keyword">new</span> IllegalArgumentException(<span class="string">"File does not exist: "</span> + heapDumpFile);</span><br><span class="line">            <span class="keyword">return</span> failure(exception, since(analysisStartNanoTime));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            listener.onProgressUpdate(READING_HEAP_DUMP_FILE);</span><br><span class="line">            <span class="comment">// 使用haha库解析.hprof文件</span></span><br><span class="line">            HprofBuffer buffer = <span class="keyword">new</span> MemoryMappedFileBuffer(heapDumpFile);</span><br><span class="line">            HprofParser parser = <span class="keyword">new</span> HprofParser(buffer);</span><br><span class="line">            listener.onProgressUpdate(PARSING_HEAP_DUMP);</span><br><span class="line">           	<span class="comment">// 解析.hprof文件生成对应的快照对象</span></span><br><span class="line">            Snapshot snapshot = parser.parse();</span><br><span class="line">            listener.onProgressUpdate(DEDUPLICATING_GC_ROOTS);</span><br><span class="line">            <span class="comment">// 删除gcRoots中重复的根对象RootObj</span></span><br><span class="line">            deduplicateGcRoots(snapshot);</span><br><span class="line">            listener.onProgressUpdate(FINDING_LEAKING_REF);</span><br><span class="line">            <span class="comment">// 检查对象是否泄露</span></span><br><span class="line">            Instance leakingRef = findLeakingReference(referenceKey, snapshot);</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// leakingRef为空表示对象没有泄露</span></span><br><span class="line">            <span class="keyword">if</span> (leakingRef == <span class="keyword">null</span>) &#123;</span><br><span class="line">                String className = leakingRef.getClassObj().getClassName();</span><br><span class="line">                <span class="keyword">return</span> noLeak(className, since(analysisStartNanoTime));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 查找引用链</span></span><br><span class="line">            <span class="keyword">return</span> findLeakTrace(analysisStartNanoTime, snapshot, leakingRef, computeRetainedSize);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">return</span> failure(e, since(analysisStartNanoTime));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="定位泄露的引用"><a href="#定位泄露的引用" class="headerlink" title="定位泄露的引用"></a>定位泄露的引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapAnalyzer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Instance <span class="title">findLeakingReference</span><span class="params">(String key, Snapshot snapshot)</span> </span>&#123;</span><br><span class="line">        ClassObj refClass = snapshot.findClass(KeyedWeakReference.class.getName());</span><br><span class="line">        <span class="keyword">if</span> (refClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Could not find the "</span> + KeyedWeakReference.class.getName() + <span class="string">" class in the heap dump."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; keysFound = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Instance instance : refClass.getInstancesList()) &#123;</span><br><span class="line">            List&lt;ClassInstance.FieldValue&gt; values = classInstanceValues(instance);</span><br><span class="line">            Object keyFieldValue = fieldValue(values, <span class="string">"key"</span>);</span><br><span class="line">            <span class="keyword">if</span> (keyFieldValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                keysFound.add(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String keyCandidate = asString(keyFieldValue);</span><br><span class="line">            <span class="keyword">if</span> (keyCandidate.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> fieldValue(values, <span class="string">"referent"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            keysFound.add(keyCandidate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not find weak reference with key "</span> + key + <span class="string">" in "</span> + keysFound);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="建立引用链"><a href="#建立引用链" class="headerlink" title="建立引用链"></a>建立引用链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapAnalyzer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> AnalysisResult <span class="title">findLeakTrace</span><span class="params">(<span class="keyword">long</span> analysisStartNanoTime, Snapshot snapshot, Instance leakingRef, <span class="keyword">boolean</span> computeRetainedSize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        listener.onProgressUpdate(FINDING_SHORTEST_PATH);</span><br><span class="line">        <span class="comment">// 查找到GC Roots的最短引用路径</span></span><br><span class="line">        ShortestPathFinder pathFinder = <span class="keyword">new</span> ShortestPathFinder(excludedRefs);</span><br><span class="line">        ShortestPathFinder.Result result = pathFinder.findPath(snapshot, leakingRef);</span><br><span class="line"></span><br><span class="line">        String className = leakingRef.getClassObj().getClassName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// False alarm, no strong reference path to GC Roots.</span></span><br><span class="line">        <span class="keyword">if</span> (result.leakingNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> noLeak(className, since(analysisStartNanoTime));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        listener.onProgressUpdate(BUILDING_LEAK_TRACE);</span><br><span class="line">        <span class="comment">// 构建泄露的引用链</span></span><br><span class="line">        LeakTrace leakTrace = buildLeakTrace(result.leakingNode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> retainedSize;</span><br><span class="line">        <span class="keyword">if</span> (computeRetainedSize) &#123;</span><br><span class="line"></span><br><span class="line">            listener.onProgressUpdate(COMPUTING_DOMINATORS);</span><br><span class="line">            <span class="comment">// 计算内存泄露的大小</span></span><br><span class="line">            snapshot.computeDominators();</span><br><span class="line"></span><br><span class="line">            Instance leakingInstance = result.leakingNode.instance;</span><br><span class="line"></span><br><span class="line">            retainedSize = leakingInstance.getTotalRetainedSize();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> check O sources and see what happened to android.graphics.Bitmap.mBuffer</span></span><br><span class="line">            <span class="keyword">if</span> (SDK_INT &lt;= N_MR1) &#123;</span><br><span class="line">                listener.onProgressUpdate(COMPUTING_BITMAP_SIZE);</span><br><span class="line">                retainedSize += computeIgnoredBitmapRetainedSize(snapshot, leakingInstance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            retainedSize = AnalysisResult.RETAINED_HEAP_SKIPPED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> leakDetected(result.excludingKnownLeaks, className, leakTrace, retainedSize, since(analysisStartNanoTime));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="展示分析结果"><a href="#展示分析结果" class="headerlink" title="展示分析结果"></a>展示分析结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayLeakService</span> <span class="keyword">extends</span> <span class="title">AbstractAnalysisResultService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onHeapAnalyzed</span><span class="params">(@NonNull AnalyzedHeap analyzedHeap)</span> </span>&#123;</span><br><span class="line">        HeapDump heapDump = analyzedHeap.heapDump;</span><br><span class="line">        AnalysisResult result = analyzedHeap.result;</span><br><span class="line"></span><br><span class="line">        String leakInfo = leakInfo(<span class="keyword">this</span>, heapDump, result, <span class="keyword">true</span>);</span><br><span class="line">        CanaryLog.d(<span class="string">"%s"</span>, leakInfo);</span><br><span class="line"></span><br><span class="line">        heapDump = renameHeapdump(heapDump);</span><br><span class="line">        <span class="keyword">boolean</span> resultSaved = saveResult(heapDump, result);</span><br><span class="line"></span><br><span class="line">        String contentTitle;</span><br><span class="line">        <span class="keyword">if</span> (resultSaved) &#123;</span><br><span class="line">            PendingIntent pendingIntent = DisplayLeakActivity.createPendingIntent(<span class="keyword">this</span>, heapDump.referenceKey);</span><br><span class="line">            <span class="keyword">if</span> (result.failure != <span class="keyword">null</span>) &#123;</span><br><span class="line">                contentTitle = getString(R.string.leak_canary_analysis_failed);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String className = classSimpleName(result.className);</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">            String contentText = getString(R.string.leak_canary_notification_message);</span><br><span class="line">            showNotification(pendingIntent, contentTitle, contentText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onAnalysisResultFailure(getString(R.string.leak_canary_could_not_save_text));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        afterDefaultHandling(heapDump, result, leakInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onAnalysisResultFailure</span><span class="params">(String failureMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAnalysisResultFailure(failureMessage);</span><br><span class="line">        String failureTitle = getString(R.string.leak_canary_result_failure_title);</span><br><span class="line">        showNotification(<span class="keyword">null</span>, failureTitle, failureMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2019/02/22/leakcanary-principle-analysis/LeakCanary-workflow.jpg" alt="LeakCanary-workflow"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/gdutxiaoxu/article/details/80738581" target="_blank" rel="noopener">带你读懂 Reference 和 ReferenceQueue</a></li>
<li><a href="https://blog.csdn.net/gdutxiaoxu/article/details/80752876" target="_blank" rel="noopener">一步步拆解 LeakCanary</a></li>
<li><a href="https://jsonchao.github.io/2019/01/06/Android%E4%B8%BB%E6%B5%81%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E5%85%AD%E3%80%81%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Leakcanary%E6%BA%90%E7%A0%81%EF%BC%89/" target="_blank" rel="noopener">深入理解Leakcanary源码</a></li>
<li><a href="https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/" target="_blank" rel="noopener">LeakCanary中文使用说明</a></li>
<li><a href="https://www.liaohuqiu.net/cn/posts/leak-canary/" target="_blank" rel="noopener">LeakCanary:让内存泄漏无所遁形</a></li>
<li><a href="https://allenwu.itscoder.com/leakcanary-source" target="_blank" rel="noopener">深入理解 Android 之 LeakCanary 源码解析</a></li>
<li><a href="https://github.com/square/leakcanary/wiki/Customizing-LeakCanary" target="_blank" rel="noopener">Customizing LeakCanary</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android内存泄漏分析]]></title>
      <url>https://xch168.github.io/2019/01/31/android-memory-leak-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>内存泄漏，即Memory Leak，指程序中不再使用到的对象因某种原因而无法被GC正常回收。发生内存泄漏，会导致一些不再使用到的对象没有及时释放，这些对象占据着宝贵的内存空间，很容易导致后续分配内存的时候，内存空间不足而出现OOM（内存溢出）。无用对象占据的空间越多，那么可用的空闲空间也就越少，GC就会更容易被触发，GC进行时会停止其他线程的工作，因此有可能造成卡顿等情况。</p>
</blockquote>
<a id="more"></a>
<h3 id="Java内存分配策略"><a href="#Java内存分配策略" class="headerlink" title="Java内存分配策略"></a>Java内存分配策略</h3><blockquote>
<p>Java程序运行时的内存分配策略有三种，分别是<code>静态分配</code>、<code>栈式分配</code>和<code>堆分配</code>，对应的，三种存储策略使用的内存空间主要分别是<code>静态存储区（也称方法区）</code>、<code>栈区</code>和<code>堆区</code>。</p>
</blockquote>
<ul>
<li>静态存储区（方法区）：主要存放<code>静态数据</code>、<code>全局static数据</code>和<code>常量</code>。这块内存在程序编译时就已经分配好，并且在程序整个运行期间都存在。</li>
<li>栈区：当方法被执行时，方法体内的局部变量都在栈上创建，并在方法执行结束时这些局部变量所持有的内存将会自动被释放。</li>
<li>堆区：又称动态内存分配，通常就是指在程序运行时直接new出来的内存。这部分内存在不使用时将会由Java垃圾回收器来负责回收。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> s1 = <span class="number">0</span>;</span><br><span class="line">    Sample mSample1 = <span class="keyword">new</span> Sample();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s2 = <span class="number">1</span>;</span><br><span class="line">        Sample mSample2 = <span class="keyword">new</span> Sample();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sample mSample3 = <span class="keyword">new</span> Sample();</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：</p>
<ul>
<li>局部变量s2和引用变量mSample2都位于栈中，但是mSample2指向的对象是存在于堆上的；</li>
<li>mSample3保存于栈中，而其指向的对象实体存放在堆上，包括这个对象的所有成员变量s1和mSample1。</li>
</ul>
<h3 id="Java是如何管理内存"><a href="#Java是如何管理内存" class="headerlink" title="Java是如何管理内存"></a>Java是如何管理内存</h3><blockquote>
<p>Java的内存管理就是对象的分配和释放问题。在Java中，通过关键字<code>new</code>为每个对象申请内存空间，所有的对象都在堆（Heap）中分配空间，对象的释放是由GC决定和执行的。</p>
</blockquote>
<blockquote>
<p>GC(Garbage Collection) 即垃圾回收机制，在Java虚拟机上运行的一个程序，它会监控对象的使用，将不再使用的对象释放，回收内存。</p>
</blockquote>
<p><strong>Java判断对象是否可以回收使用的是<code>可达性分析</code>算法。</strong></p>
<blockquote>
<p>可达性分析算法：通过一系列被称为“<code>GC Roots</code>”的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时（就是从GC Roots到这个对象是不可达），则证明此对象是不可用的，所以它们会被判断为可回收对象。（如下图黑色的圆圈）</p>
</blockquote>
<p>在Java语言中，可以作为GC Roots的对象有如下几种：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象；</li>
<li>方法区中类静态属性引用的对象；</li>
<li>方法区中常量引用的对象；</li>
<li>本地方法栈中JNI（Native方法）引用的对象。</li>
</ul>
<p><img src="/2019/01/31/android-memory-leak-analysis/gc.png" alt="gc"></p>
<h3 id="Java中的引用"><a href="#Java中的引用" class="headerlink" title="Java中的引用"></a>Java中的引用</h3><blockquote>
<p>在Java中，将引用方式分为：<code>强引用</code>、<code>软引用</code>、<code>弱引用</code>、<code>虚引用</code>，这四种引用强度依次逐渐减弱。</p>
</blockquote>
<p><strong>强引用</strong>：类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</p>
<p><strong>软引用</strong>：用来描述一些还有用但并非必须的对象。在系统将要发生内存溢出之前，将会把这些对象列进回收范围之中进行第二次回收。</p>
<p><strong>弱引用</strong>：用户描述非必须对象的。被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p>
<p><strong>虚引用</strong>：一个对象是否有虚引用存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用的唯一目的就是能在这个对象被收集器回收时刻得到一个系统通知。</p>
<h3 id="内存泄漏的场景"><a href="#内存泄漏的场景" class="headerlink" title="内存泄漏的场景"></a>内存泄漏的场景</h3><h4 id="静态变量内存泄漏"><a href="#静态变量内存泄漏" class="headerlink" title="静态变量内存泄漏"></a>静态变量内存泄漏</h4><blockquote>
<p>静态变量的生命周期跟整个程序的生命周期一致。只要静态变量没有被销毁也没有置为null，其对象就一直被保持引用，也就不会被垃圾回收，从而出现内存泄漏。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test sTest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        sTest = <span class="keyword">new</span> Test(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong>sTest作为静态变量，并且持有Activity的引用，sTest的生命周期肯定比Activity的生命周期长。因此当Activity退出后，由于Activity仍被sTest引用到，所以Activity就不能被回收，造成了内存泄漏。</p>
<p><strong>Activity这种占用内存非常多的对象，内存泄漏的话影响非常大。</strong></p>
<p><strong>解决方案</strong>：</p>
<ul>
<li><p><strong>针对静态变量</strong></p>
<blockquote>
<p>在不使用静态变量时置为空，如：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sTest = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>针对Context</strong></p>
<blockquote>
<p>如果用到Context，尽量去使用Application的Context，避免直接传递Activity，如：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sTest = <span class="keyword">new</span> Test(getApplicationContext());</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>针对Activity</strong></p>
<blockquote>
<p>若一定要使用Activity，建议使用弱引用或软引用来代替强引用。如：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 弱引用</span></span><br><span class="line">WeakReference&lt;Activity&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">Activity activity = weakReference.get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 软引用</span></span><br><span class="line">SoftReference&lt;Activity&gt; softReference = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">Activity activity = softReference.get();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="单例内存泄漏"><a href="#单例内存泄漏" class="headerlink" title="单例内存泄漏"></a>单例内存泄漏</h4><blockquote>
<p>单例模式其生命周期跟应用一样，所以使用单例模式时传入的参数需要注意一下，避免传入Activity等对象造成内存泄漏。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppManager instance;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AppManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> AppManager(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：当创建这个单例对象的使用，由于需要传入一个Context，所以这个Context的生命周期的长短至关重要；</p>
<ul>
<li>如果传入的是Application的Context，因为Application的生命周期就是整个应用的生命周期，所以这将没有任何问题。</li>
<li>如果传入的是Activity的Context，当这个Context所对应的Activity退出时，由于该Context的引用被单例所持有，其生命周期等于整个应用程序的生命周期，所以当前Activity退出时它的内存并不会被回收，这就造成泄漏了。</li>
</ul>
<p><strong>解决方案</strong>：</p>
<blockquote>
<p>使用和单例生命周期一样的对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppManager instance;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AppManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context.getApplicationContext(); <span class="comment">// 使用Application的context</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> AppManager(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="非静态内部类（匿名类）内存泄漏"><a href="#非静态内部类（匿名类）内存泄漏" class="headerlink" title="非静态内部类（匿名类）内存泄漏"></a>非静态内部类（匿名类）内存泄漏</h4><blockquote>
<p>非静态内部类（匿名类）默认就持有外部类的引用，当非静态内部类（匿名类）对象的生命周期比外部类对象的生命周期长时，就会导致内存泄漏。</p>
</blockquote>
<h5 id="Handler内存泄漏"><a href="#Handler内存泄漏" class="headerlink" title="Handler内存泄漏"></a>Handler内存泄漏</h5><blockquote>
<p>如果Handler中有<code>延迟任务</code>或者<code>等待执行的任务队列过长</code>，都有可能因为Handler继续执行而导致Activity发生泄漏。</p>
</blockquote>
<blockquote>
<ol>
<li><p>首先，非静态的Handler类会默认持有外部类的引用，如Activity等。</p>
</li>
<li><p>然后，还未处理完的消息（Message）中会持有Handler的引用。</p>
</li>
<li><p>还未处理完的消息会处于消息队列中，即消息队列MessageQueue会持有Message的引用。</p>
</li>
<li><p>消息队列MessageQueue位于Looper中，Looper的生命周期跟应用一致。</p>
</li>
</ol>
</blockquote>
<blockquote>
<p><strong>引用链</strong>：Looper  -&gt; MessageQueue -&gt; Message -&gt; Handler -&gt; Activity</p>
</blockquote>
<p><strong>解决方法</strong>：</p>
<ul>
<li><p>静态内部类+弱引用</p>
<blockquote>
<p>静态内部类默认不持有外部类的引用，所以改成静态内部类即可。同时，可以采用弱引用来持有Activity的引用。(也可以使用WeakHandler库：<a href="https://github.com/badoo/android-weak-handler" target="_blank" rel="noopener">https://github.com/badoo/android-weak-handler</a>)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Activity&gt; mWeakReference;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        mWeakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Activity退出时，移除所有信息</p>
<blockquote>
<p>移除信息后，Handler将会跟Activity生命周期同步。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">    mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="多线程引起的内存泄漏"><a href="#多线程引起的内存泄漏" class="headerlink" title="多线程引起的内存泄漏"></a>多线程引起的内存泄漏</h5><blockquote>
<p>匿名Thread类里持有外部类的引用。当Activity退出时，Thread有可能还在后头执行，这时就会发生内存泄露。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<p><strong>解决方法</strong>：</p>
<ul>
<li><p>静态内部类</p>
<blockquote>
<p>静态内部类不持有外部类的引用。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Activity退出时，结束线程</p>
<blockquote>
<p>这是让线程的生命周期跟Activity一致。</p>
</blockquote>
</li>
</ul>
<h4 id="集合类内存泄漏"><a href="#集合类内存泄漏" class="headerlink" title="集合类内存泄漏"></a>集合类内存泄漏</h4><blockquote>
<p>集合类添加元素后，将会持有元素对象的引用，导致该元素对象不能被垃圾回收，从而发生内存泄漏。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; objectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    objectList.add(obj);</span><br><span class="line">    obj = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：虽然obj已经被置为空了，但是集合里还是持有Object的引用。</p>
<p><strong>解决方法</strong>：</p>
<ul>
<li><p>清空集合对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objectList.clear();</span><br><span class="line">objectList = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="未关闭资源对象内存泄漏"><a href="#未关闭资源对象内存泄漏" class="headerlink" title="未关闭资源对象内存泄漏"></a>未关闭资源对象内存泄漏</h4><blockquote>
<p>一些资源对象需要在不使用的时候主动去关闭或者注销掉，否则的话，他们不会被垃圾回收，从而造成内存泄漏。</p>
</blockquote>
<h5 id="注销监听器"><a href="#注销监听器" class="headerlink" title="注销监听器"></a>注销监听器</h5><blockquote>
<p>当我们需要使用系统服务时，比如执行某些后台任务、为硬件访问提供接口等等系统服务。我们需要将自己注册到服务的监听器中，然而，这会让服务持有Activity的引用，如果忘记Activity销毁时取消注册，就会导致Activity泄露。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unregisterXxx(xxx);</span><br></pre></td></tr></table></figure>
<h5 id="关闭输入输出流"><a href="#关闭输入输出流" class="headerlink" title="关闭输入输出流"></a>关闭输入输出流</h5><blockquote>
<p>在使用IO、File流等资源时要及时关闭。这些资源在进行读写操作时通常都使用了缓冲，如果不及时关闭，这些缓冲对象就会一直被占用而得不到释放，以致发生内存泄露。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputStream.close();</span><br><span class="line">outputStream.close();</span><br></pre></td></tr></table></figure>
<h5 id="回收Bitmap"><a href="#回收Bitmap" class="headerlink" title="回收Bitmap"></a>回收Bitmap</h5><blockquote>
<p>Bitmap对象比较占内存，当它不再被使用的时候，最好调用<code>Bitmap.recycle()</code>方法主动进行回收。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bitmap.recycle();</span><br><span class="line">bitmap = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<h5 id="停止动画"><a href="#停止动画" class="headerlink" title="停止动画"></a>停止动画</h5><blockquote>
<p>属性动画中有一类无限动画，如果Activity退出时不停止动画的话，动画会一直执行下去。因为动画会持有View的引用，View又持有Activity，最终Activity就不能被回收掉。只要我们在Activity退出把动画停止掉即可。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation.cancel();</span><br></pre></td></tr></table></figure>
<h5 id="销毁WebView"><a href="#销毁WebView" class="headerlink" title="销毁WebView"></a>销毁WebView</h5><blockquote>
<p>WebView在加载网页后会长期占用内存而不能被释放，因此在Activity销毁后要调用它的<code>destory()</code>方法来销毁它以释放内存。此外，WebView在Android 5.1上也会出现其他的内存泄露。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mWebView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ViewParent parent = mWebView.getParent();</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ((ViewGroup) parent).removeView(mWebView);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mWebView.stopLoading();</span><br><span class="line">        <span class="comment">// 退出时调用此方法，移除绑定的服务，否则某些特定系统会报错</span></span><br><span class="line">        mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">false</span>);</span><br><span class="line">        mWebView.clearHistory();</span><br><span class="line">        mWebView.clearView();</span><br><span class="line">        mWebView.removeAllViews();</span><br><span class="line">        mWebView.destroy();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="内存分析工具"><a href="#内存分析工具" class="headerlink" title="内存分析工具"></a>内存分析工具</h3><h4 id="dumpsys"><a href="#dumpsys" class="headerlink" title="dumpsys"></a>dumpsys</h4><blockquote>
<p>dumpsys命令可以查看内存使用情况。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys meminfo &lt;packageName&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/01/31/android-memory-leak-analysis/dumpsys.png" alt="dumpsys"></p>
<blockquote>
<p><strong>说明</strong>：可以通过页面关闭前后<code>Views</code>和<code>Activities</code>的数量来判断是否发生泄漏。</p>
</blockquote>
<h4 id="Memory-Profiler"><a href="#Memory-Profiler" class="headerlink" title="Memory Profiler"></a>Memory Profiler</h4><blockquote>
<p>Memory Profiler是Android Studio提供的一个内存分析工具。（本文使用的是Android Studio 3.3.1）</p>
</blockquote>
<p><strong>Memory Profiler面板介绍</strong>：</p>
<p><img src="/2019/01/31/android-memory-leak-analysis/memory-profiler-calloutspng.png" alt="Memory Profiler"></p>
<ol>
<li>用于强制执行垃圾回收Event的按钮。</li>
<li>用户捕获堆转储的按钮。</li>
<li>用于记录内存分配情况的按钮。</li>
<li>用于放大/缩小时间线的按钮。</li>
<li>用于跳转至实时内存数据的按钮。</li>
<li>Event时间线，其显示Activity状态、用户输入Event和屏幕旋转Event。</li>
<li>内存使用量时间线，其包含以下内容：<ul>
<li>一个显示每个内存类别使用多少内存的堆叠图表，如左侧的y轴以及顶部的彩色健所示。</li>
<li>虚线表示分配的对象数，如右侧的y轴所示。</li>
<li>用于表示每个垃圾回收Event的图标。</li>
</ul>
</li>
</ol>
<p><strong>Dump Java Heap</strong></p>
<blockquote>
<p>这个功能是用来获取当前应用的内存快照。通过分析内存快照，查看指定类的实例在内存中的情况，及其对象的引用关系，来判断内存是否泄漏。</p>
</blockquote>
<p><strong>NOTE: 在dump前，先点击一下GC按钮来强制内存回收一下，这样分析内存比较准确。</strong></p>
<p><img src="/2019/01/31/android-memory-leak-analysis/memory-profiler-analysis.png" alt="memory-profiler-analysis"></p>
<h4 id="MAT"><a href="#MAT" class="headerlink" title="MAT"></a>MAT</h4><blockquote>
<p>MAT (Memory Analyzer Tool)是一个快速且功能丰富的Java堆分析器，可以帮助您查找内存泄漏并减少内存消耗。</p>
</blockquote>
<blockquote>
<p>MAT下载地址：<a href="https://www.eclipse.org/mat/" target="_blank" rel="noopener">https://www.eclipse.org/mat/</a></p>
</blockquote>
<p>Step1. 从AS的Memory Profiler中导出<code>.hprof</code>内存快照文件。</p>
<p><img src="/2019/01/31/android-memory-leak-analysis/memory-hprof.png" alt="memory-hprof"></p>
<p>Step2. 转换<code>.hprof</code>文件。</p>
<blockquote>
<p>AS导出的.hprof文件只能在AS的Memory Profiler中查看，要在MAT中查看，要使用<code>hprof-conv</code>进行转换。</p>
</blockquote>
<blockquote>
<p><code>hprof-conv</code>工具的路径：<code>&lt;android_sdk&gt;/paltform-tools/</code></p>
</blockquote>
<p>转换命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hprof-conv heap-original.hprof heap-converted.hprof</span><br></pre></td></tr></table></figure>
<p>Step3. 在MAT中打开转换好的<code>.hprof</code>文件。</p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-pane.png" alt="mat-pane"></p>
<p><strong>Histogram</strong>：</p>
<blockquote>
<p>Histogram是从类的角度进行分析，注重量的分析。</p>
</blockquote>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-histogram.png" alt="mat-histogram"></p>
<p><strong>内存分析</strong>：</p>
<p>Step1. 查询指定的类。</p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-histogram-search.png" alt="mat-histogram-search"></p>
<p>Step2. 查询指定的对象被引用的地方。</p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-incoming.png" alt="mat-incoming"></p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-incoming-result.png" alt="mat-incoming-result"></p>
<p>Step3. 合并到GC Roots的最短路径。</p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-paths-to-gc-roots.png" alt="mat-paths-to-gc-roots"></p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-paths-to-gc-roots-result.png" alt="mat-paths-to-gc-roots-result"></p>
<p><strong>说明</strong>：从上图可以看到MainActivity被sTest对象的context属性强引用，导致MainActivity泄漏。</p>
<p><strong>Dominator Tree</strong>：</p>
<blockquote>
<p>Dominator Tree是从对象实例的角度进行分析，注重引用关系分析。</p>
</blockquote>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-dominator.png" alt="mat-dominator"></p>
<p><strong>内存分析：</strong></p>
<p>Step1. 查询指定的类。</p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-dominator-search.png" alt="mat-dominator-search"></p>
<p>Step2. 选中指定的类实例进行分析。</p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-dominator-path-to-gc-roots.png" alt="mat-dominator-path-to-gc-roots"></p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-dominator-ref.png" alt="mat-dominator-ref"></p>
<p>Step3. 合并到GC Roots的最短路径。</p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-dominator-gc-roots.png" alt=""></p>
<p><img src="/2019/01/31/android-memory-leak-analysis/mat-dominator-gc-roots-result.png" alt=""></p>
<p><strong>说明</strong>：与通过Histogram分析得到的结论一样。</p>
<h4 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h4><blockquote>
<p>LeakCanary是Square开源的Android和Java的内存泄漏检测库。</p>
</blockquote>
<blockquote>
<p>LeakCanary地址：<a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">https://github.com/square/leakcanary</a></p>
</blockquote>
<p><strong>集成LeakCanary</strong></p>
<p>在<code>build.gradle</code>中配置：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">debugImplementation <span class="string">'com.squareup.leakcanary:leakcanary-android:1.6.3'</span></span><br><span class="line">releaseImplementation <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'</span></span><br><span class="line"><span class="comment">// Optional, if you use support library fragments:</span></span><br><span class="line">debugImplementation <span class="string">'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'</span></span><br></pre></td></tr></table></figure>
<p>在<code>Application</code>类中配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LeakCanary.isInAnalyzerProcess(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            <span class="comment">// This process is dedicated to LeakCanary for heap analysis.</span></span><br><span class="line">            <span class="comment">// You should not init your app in this process.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LeakCanary.install(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// Normal app init code...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用</strong>：</p>
<p>内存泄漏代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test sTest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        sTest = <span class="keyword">new</span> Test(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行应用，并退出首页，LeakCanary就会检测到MainActivity泄漏。</p>
<p><img src="/2019/01/31/android-memory-leak-analysis/leakcanary-detect.png" alt="leakcanary-detect"></p>
<p><strong>说明</strong>：从LeakCanary的检测结果可以看出，是因为MainActivity中的sTest对象的context属性持有MainActivity而导致其泄漏。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/u012735483/article/details/52434858" target="_blank" rel="noopener">循序渐进学用MAT排查Android Activity内存泄露</a></li>
<li><a href="https://mp.weixin.qq.com/s/_s88Xjti0YwO4rayKvF5Dg" target="_blank" rel="noopener">Android 内存泄露分析实战演练</a></li>
<li><a href="https://lrh1993.gitbooks.io/android_interview_guide/content/android/advance/memory-leak.html" target="_blank" rel="noopener"> Android 内存泄漏总结</a></li>
<li><a href="https://mp.weixin.qq.com/s/KtGfi5th-4YHOZsEmTOsjg" target="_blank" rel="noopener">微信 Android 终端内存优化实践</a></li>
<li><a href="https://blog.csdn.net/xyq046463/article/details/51769728" target="_blank" rel="noopener">Android内存泄漏查找和解决</a></li>
<li><a href="https://www.jianshu.com/p/c345f63ec8e5" target="_blank" rel="noopener">Leakcanary检测内存泄漏汇总</a></li>
<li><a href="https://www.jianshu.com/p/85f49e1ff813" target="_blank" rel="noopener">Java内存分配机制及内存泄漏</a></li>
<li><a href="https://www.jianshu.com/p/efec4c77e265" target="_blank" rel="noopener">彻底搞懂Java内存泄露</a></li>
<li><a href="https://developer.android.com/studio/profile/memory-profiler" target="_blank" rel="noopener">使用 Memory Profiler 查看 Java 堆和内存分配</a></li>
<li><a href="https://mp.weixin.qq.com/s/ZkOxuM95GCD0g0NL14xmJw" target="_blank" rel="noopener">Android Studio和MAT结合使用来分析内存问题</a></li>
<li><a href="https://mp.weixin.qq.com/s/b_lFfL1mDrNVKj_VAcA2ZA" target="_blank" rel="noopener">Android内存申请分析</a></li>
<li><a href="https://mp.weixin.qq.com/s/sVbdugv-boumZ-oNk_92qg" target="_blank" rel="noopener">Android中导致内存泄漏的竟然是它—-Dialog</a></li>
<li><a href="https://www.jianshu.com/p/2823e17cf9b5" target="_blank" rel="noopener">记一次Activity的内存泄漏和分析过程</a></li>
<li><a href="https://juejin.im/post/5b1b5e29f265da6e01174b84" target="_blank" rel="noopener">实践App内存优化：如何有序地做内存分析与优化</a></li>
<li><a href="http://gityuan.com/2016/01/02/memory-analysis-command/" target="_blank" rel="noopener">Android内存分析命令</a></li>
<li><a href="https://lrh1993.gitbooks.io/android_interview_guide/content/java/virtual-machine/life-cycle.html" target="_blank" rel="noopener">JVM怎么判断对象是否已死？</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
            <tag> Performance </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android热修复原理解析]]></title>
      <url>https://xch168.github.io/2019/01/28/android-hotfix-principle-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>热修复即”打补丁“，当一个app上线后，如果发现重大的bug，需要紧急修复。常规的做法是修复bug，然后重新打包，再上线到各个渠道。这种方式的成本高，效率低。</p>
<p>于是热修复技术应运而生，热修复技术一般的做法是应用启动的时候，主动去服务端查询是否有补丁包，有就下载下来，并在下一次启动的时候生效，这样就可以快速解决线上的紧急bug。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>Android中的热修复包括：<code>代码修复</code>、<code>资源修复</code>、<code>动态链接库修复</code>。本文主要讲解代码修复。</p>
</blockquote>
<h3 id="热修复原理"><a href="#热修复原理" class="headerlink" title="热修复原理"></a>热修复原理</h3><blockquote>
<p> 代码修复的原理主要是类替换。类的替换就涉及到ClassLoader的使用，Android中可用来动态加载代码的ClassLoader有<code>PathClassLoader</code>、<code>DexClassLoader</code>。</p>
<p>因为PathClassLoader在Dalvik虚拟机中只能用来加载已安装apk的类，而DexClassLoader在Dalvik和ART虚拟机中都能加载未安装apk或者dex中的类，所以热修复使用DexClassLoader来加载补丁包中的类。</p>
</blockquote>
<p><img src="/2019/01/28/android-hotfix-principle-analysis/classloader.png" alt="classloader"></p>
<p><strong>ClassLoader.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用双亲委托的机制进行类的加载</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 首先，从缓存中查找类是否已经加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 缓存找不到类，就委托给父加载器进行加载</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 没有父加载器，则委托给顶级的BootstrapClassLoader进行加载</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果还是没找到类，就主动从自己的加载路径中去查找</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这是ClassLoader主动加载类的方法，由子类具体实现</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>DexClassLoader.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>BaseDexClassLoader.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDexClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dex文件的路径列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</span><br><span class="line">        Class c = pathList.findClass(name, suppressedExceptions);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(<span class="string">"Didn't find class \""</span> + name + <span class="string">"\" on path: "</span> + pathList);</span><br><span class="line">            <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</span><br><span class="line">                cnfe.addSuppressed(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> cnfe;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>DexPathList.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexPathList</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每个元素代表着一个dex</span></span><br><span class="line">    <span class="keyword">private</span> Element[] dexElements;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name, List&lt;Throwable&gt; suppressed) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Element element : dexElements) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = element.findClass(name, definingContext, suppressed);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dexElementsSuppressedExceptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：</p>
<p><strong>通过上面几个类的关系，和类的查找过程，我们可以发现最终是通过遍历<code>DexPathList</code>的<code>dexElements</code>数组进行类的查找加载，当找到类就返回；</strong></p>
<p><strong>dexElements数组的每个元素都代表着一个dex文件，所以为了让补丁包中要替换的类抢先于有bug的类被加载，就需要将补丁包dex插入到<code>dexElements</code>数组的头部。</strong></p>
<h3 id="热修复实战"><a href="#热修复实战" class="headerlink" title="热修复实战"></a>热修复实战</h3><h4 id="生成补丁dex文件"><a href="#生成补丁dex文件" class="headerlink" title="生成补丁dex文件"></a>生成补丁dex文件</h4><p>Step1. 修改待修复的Title类；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.xch168.hotfixdemo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by XuCanHui on 2019/1/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Title</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hotfix title"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step2. 编译Title类</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac com/github/xch168/hotfixdemo/Title.java</span><br></pre></td></tr></table></figure>
<p>Step3. 用<code>d8</code>命令将Title.class打包成<code>patch.dex</code>；</p>
<blockquote>
<p><code>d8</code>命令的位置：&lt;sdk-dir&gt;/build-tools/&lt;versionName&gt;</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d8 Title.class</span><br></pre></td></tr></table></figure>
<p>命令执行完后就会生成一个<code>classes.dex</code>文件，将其重命名为<code>patch.dex</code></p>
<p>Step4. 将<code>patch.dex</code>上传到<a href="portal.qiniu.com">七牛云</a>的对象存储服务器上。</p>
<blockquote>
<p>patch.dex在七牛对象存储服务器上的外链：<a href="http://pm3fh7vxn.bkt.clouddn.com/patch.dex" target="_blank" rel="noopener">http://pm3fh7vxn.bkt.clouddn.com/patch.dex</a></p>
</blockquote>
<p><img src="/2019/01/28/android-hotfix-principle-analysis/qiniuoss.png" alt="qiniuoss"></p>
<h4 id="下载补丁包patch-dex"><a href="#下载补丁包patch-dex" class="headerlink" title="下载补丁包patch.dex"></a>下载补丁包patch.dex</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotfixHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadPatch</span><span class="params">(Context context, OnPatchLoadListener listener)</span> </span>&#123;</span><br><span class="line">        File patchFile = <span class="keyword">new</span> File(context.getCacheDir() + <span class="string">"/patch.dex"</span>);</span><br><span class="line">        <span class="keyword">if</span> (patchFile.exists()) &#123;</span><br><span class="line">            patchFile.delete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        downloadPatch(patchFile, listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downloadPatch</span><span class="params">(<span class="keyword">final</span> File patchFile, <span class="keyword">final</span> OnPatchLoadListener listener)</span> </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(<span class="string">"http://pm3fh7vxn.bkt.clouddn.com/patch.dex"</span>)</span><br><span class="line">                .get()</span><br><span class="line">                .build();</span><br><span class="line">        client.newCall(request)</span><br><span class="line">              .enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                      <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                          listener.onFailure();</span><br><span class="line">                      &#125;</span><br><span class="line">                      e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                      <span class="keyword">if</span> (response.code() == <span class="number">200</span>) &#123;</span><br><span class="line">                          FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(patchFile);</span><br><span class="line">                          fos.write(response.body().bytes());</span><br><span class="line">                          fos.close();</span><br><span class="line">                          <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                              listener.onSuccess();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                              listener.onFailure();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="应用补丁包"><a href="#应用补丁包" class="headerlink" title="应用补丁包"></a>应用补丁包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotfixHelper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applyPatch</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取宿主的ClassLoader</span></span><br><span class="line">        ClassLoader classLoader = context.getClassLoader();</span><br><span class="line">        Class loaderClass = BaseDexClassLoader.class;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取宿主ClassLoader的pathList对象</span></span><br><span class="line">            Object hostPathList = ReflectUtil.getField(loaderClass, classLoader, <span class="string">"pathList"</span>);</span><br><span class="line">            <span class="comment">// 获取宿主pathList对象中的dexElements数组对象</span></span><br><span class="line">            Object hostDexElement = ReflectUtil.getField(hostPathList.getClass(), hostPathList, <span class="string">"dexElements"</span>);</span><br><span class="line"></span><br><span class="line">            File optimizeDir = <span class="keyword">new</span> File(context.getCacheDir() + <span class="string">"/optimize"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!optimizeDir.exists()) &#123;</span><br><span class="line">                optimizeDir.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建补丁包的类加载器</span></span><br><span class="line">            DexClassLoader patchClassLoader = <span class="keyword">new</span> DexClassLoader(context.getCacheDir() + <span class="string">"/patch.dex"</span>, optimizeDir.getPath(), <span class="keyword">null</span>, classLoader);</span><br><span class="line">            <span class="comment">// 获取补丁ClassLoader中的pathList对象</span></span><br><span class="line">            Object patchPathList = ReflectUtil.getField(loaderClass, patchClassLoader, <span class="string">"pathList"</span>);</span><br><span class="line">            <span class="comment">// 获取补丁pathList对象中的dexElements数组对象</span></span><br><span class="line">            Object patchDexElement = ReflectUtil.getField(patchPathList.getClass(), patchPathList, <span class="string">"dexElements"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合并宿主中的dexElements和补丁中的dexElements，并把补丁的dexElements放在数组的头部</span></span><br><span class="line">            Object newDexElements = combineArray(hostDexElement, patchDexElement);</span><br><span class="line">            <span class="comment">// 将合并完成的dexElements设置到宿主ClassLoader中去</span></span><br><span class="line">            ReflectUtil.setField(hostPathList.getClass(), hostPathList, <span class="string">"dexElements"</span>, newDexElements);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hostElements    宿主中的dexElements</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> patchElements   补丁包中的dexElements</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Object         合并成的dexElements</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">combineArray</span><span class="params">(Object hostElements, Object patchElements)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; componentType = hostElements.getClass().getComponentType();</span><br><span class="line">        <span class="keyword">int</span> i = Array.getLength(hostElements);</span><br><span class="line">        <span class="keyword">int</span> j = Array.getLength(patchElements);</span><br><span class="line">        <span class="keyword">int</span> k = i + j;</span><br><span class="line">        Object result = Array.newInstance(componentType, k);</span><br><span class="line">        <span class="comment">// 将补丁包的dexElements合并到头部</span></span><br><span class="line">        System.arraycopy(patchElements, <span class="number">0</span>, result, <span class="number">0</span>, j);</span><br><span class="line">        System.arraycopy(hostElements, <span class="number">0</span>, result, j, i);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Application中应用补丁包，这里是应用启动最新调用的地方。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (HotfixHelper.hasPatch(base)) &#123;</span><br><span class="line">            HotfixHelper.applyPatch(base);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h4><p>Step1.  启动应用，下载补丁包；</p>
<p>Step2. 杀掉应用，然后重启应用。</p>
<p><img src="/2019/01/28/android-hotfix-principle-analysis/run.gif" alt="run"></p>
<hr>
<p>Demo地址：<a href="https://github.com/xch168/HotfixDemo" target="_blank" rel="noopener">https://github.com/xch168/HotfixDemo</a></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/sahadev_/article/details/53318251" target="_blank" rel="noopener">一步步手动实现热修复(一)-dex文件的生成与加载</a></li>
<li><a href="https://blog.csdn.net/sahadev_/article/details/53334911" target="_blank" rel="noopener">一步步手动实现热修复(二)-类的加载机制简要介绍</a></li>
<li><a href="https://blog.csdn.net/sahadev_/article/details/53363052" target="_blank" rel="noopener">一步步手动实现热修复(三)-Class文件的替换</a></li>
<li><a href="https://blog.csdn.net/itachi85/article/details/79522200" target="_blank" rel="noopener">Android热修复原理（一）热修复框架对比和代码修复</a></li>
<li><a href="https://kymjs.com/code/2016/05/08/01/" target="_blank" rel="noopener">Android 热修复，没你想的那么难</a></li>
<li><a href="https://github.com/rengwuxian/HenCoderPlus/tree/master/27_hot_update" target="_blank" rel="noopener">HenCoderPlus</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 热修复 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android插件化原理解析]]></title>
      <url>https://xch168.github.io/2019/01/27/android-plugin-principle-analysis/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Android插件化技术，可以实现功能模块的按需加载和动态更新，其本质是动态加载未安装的apk。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>本文涉及源码为API 28</p>
</blockquote>
<h3 id="插件化原理"><a href="#插件化原理" class="headerlink" title="插件化原理"></a>插件化原理</h3><blockquote>
<p>插件化要解决的三个核心问题：<code>类加载</code>、<code>资源加载</code>、<code>组件生命周期管理</code>。</p>
</blockquote>
<h4 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h4><blockquote>
<p>Android中常用的两种类加载器：<code>PathClassLoader</code>和<code>DexClassLoader</code>，它们都继承于BaseDexClassLoader。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PathClassLoader.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, <span class="keyword">null</span>, parent);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DexClassLoader.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：</p>
<ul>
<li>DexClassLoader的构造函数比PathClassLoader多了一个，<code>optimizedDirectory</code>参数，这个是用来指定dex的优化产物odex的路径，在源码注释中，指出这个参数从API 26后就弃用了。</li>
<li>PathClassLoader主要用来加载系统类和应用程序的类，在ART虚拟机上可以加载未安装的apk的dex，在Dalvik则不行。</li>
<li>DexClassLoader用来加载未安装apk的dex。</li>
</ul>
<h4 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h4><blockquote>
<p>Android系统通过Resource对象加载资源，因此只需要添加资源（即apk文件）所在路径到<code>AssetManager</code>中，即可实现对插件资源的访问。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建AssetManager对象</span></span><br><span class="line">AssetManager assetManager = <span class="keyword">new</span> AssetManager();</span><br><span class="line"><span class="comment">// 将apk路径添加到AssetManager中</span></span><br><span class="line"><span class="keyword">if</span> (assetManager.addAssetPath(apkPath) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建插件Resource对象</span></span><br><span class="line">Resources pluginResources = <span class="keyword">new</span> Resources(assetManager, metrics, getConfiguration());</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：由于AssetManager的构造方法时<code>hide</code>的，需要通过反射区创建。</p>
<h4 id="组件生命周期管理"><a href="#组件生命周期管理" class="headerlink" title="组件生命周期管理"></a>组件生命周期管理</h4><blockquote>
<p>对于Android来说，并不是说类加载进来就可以使用了，很多组件都是有“生命”的；因此对于这些有血有肉的类，必须给他们注入活力，也就是所谓的<code>组件生命周期管理</code>。</p>
</blockquote>
<p>在解决插件中组件的生命周期，通常的做法是通过<code>Hook</code>相应的系统对象，实现欺上瞒下，后面将通过Activity的插件化来进行讲解。</p>
<h3 id="Activity插件化"><a href="#Activity插件化" class="headerlink" title="Activity插件化"></a>Activity插件化</h3><blockquote>
<p>四大组件的插件化是插件化技术的核心知识点，而Activity插件化更是重中之中，Activity插件化的主流实现方式是通过<code>Hook技术</code>实现。</p>
</blockquote>
<h4 id="Activity的启动过程"><a href="#Activity的启动过程" class="headerlink" title="Activity的启动过程"></a>Activity的启动过程</h4><p><img src="/2019/01/27/android-plugin-principle-analysis/activity-launch.png" alt="activity-launch"></p>
<p>上图列出的是启动一个Activity的主要过程，具体步骤如下：</p>
<ol>
<li>Activity1调用startActivity，实际会调用<code>Instrumentation</code>类的<code>execStartActivity</code>方法，Instrumentation是系统用来监控Activity运行的一个类，Activity的整个生命周期都有它的影子。</li>
<li>通过跨进程的binder调用，进入到<code>ActivityManagerService</code>（AMS）中，其内部会处理Activity栈。之后又通过跨进程调用进入到Activity2所在的进程中。</li>
<li><code>ApplicationThread</code>是一个binder对象，其运行在binder线程池中，内部包含一个<code>H</code>类，该类继承于Handler。ApplicationThread将启动Activity2的信息通过H对象发送给主线程。</li>
<li>主线程拿到Activity2的信息后，调用Instrumentation类的<code>newAcitivity</code>方法，其内部通过ClassLoader创建Activity2实例。</li>
</ol>
<h4 id="加载插件中的类"><a href="#加载插件中的类" class="headerlink" title="加载插件中的类"></a>加载插件中的类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"PluginHelper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_DEX_PATH_LIST = <span class="string">"dalvik.system.DexPathList"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIELD_PATH_LIST = <span class="string">"pathList"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIELD_DEX_ELEMENTS = <span class="string">"dexElements"</span>;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadPluginClass</span><span class="params">(Context context, ClassLoader hostClassLoader)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Step1. 获取到插件apk，通常都是从网络上下载，这里为了演示，直接将插件apk push到手机</span></span><br><span class="line">        File pluginFile = context.getExternalFilesDir(<span class="string">"plugin"</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">"pluginPath:"</span> + pluginFile.getAbsolutePath());</span><br><span class="line">        <span class="keyword">if</span> (pluginFile == <span class="keyword">null</span> || !pluginFile.exists() || pluginFile.listFiles().length == <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">"插件文件不存在"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pluginFile = pluginFile.listFiles()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// Step2. 创建插件的DexClassLoader</span></span><br><span class="line">        DexClassLoader pluginClassLoader = <span class="keyword">new</span> DexClassLoader(pluginFile.getAbsolutePath(), <span class="keyword">null</span>, <span class="keyword">null</span>, hostClassLoader);</span><br><span class="line">        <span class="comment">// Step3. 通过反射获取到pluginClassLoader中的pathList字段</span></span><br><span class="line">        Object pluginDexPathList = ReflectUtil.getField(BaseDexClassLoader.class, pluginClassLoader, FIELD_PATH_LIST);</span><br><span class="line">        <span class="comment">// Step4. 通过反射获取到DexPathList的dexElements字段</span></span><br><span class="line">        Object pluginElements = ReflectUtil.getField(Class.forName(CLASS_DEX_PATH_LIST), pluginDexPathList, FIELD_DEX_ELEMENTS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step5. 通过反射获取到宿主工程中ClassLoader的pathList字段</span></span><br><span class="line">        Object hostDexPathList = ReflectUtil.getField(BaseDexClassLoader.class, hostClassLoader, FIELD_PATH_LIST);</span><br><span class="line">        <span class="comment">// Step6. 通过反射获取到宿主工程中DexPathList的dexElements字段</span></span><br><span class="line">        Object hostElements = ReflectUtil.getField(Class.forName(CLASS_DEX_PATH_LIST), hostDexPathList, FIELD_DEX_ELEMENTS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Step7. 将插件ClassLoader中的dexElements合并到宿主ClassLoader的dexElements</span></span><br><span class="line">        Object array = combineArray(hostElements, pluginElements);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Step8. 将合并的dexElements设置到宿主ClassLoader</span></span><br><span class="line">        ReflectUtil.setField(Class.forName(CLASS_DEX_PATH_LIST), hostDexPathList, FIELD_DEX_ELEMENTS, array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="处理插件Activity的启动"><a href="#处理插件Activity的启动" class="headerlink" title="处理插件Activity的启动"></a>处理插件Activity的启动</h4><blockquote>
<p>在Android中，Activity的启动需要在<code>AndroidManifest.xml</code>中配置，如果没有配置的话，就会报<code>ActivityNotFoundException</code>异常，而插件的Activity无法再宿主AndroidManifest中注册。在上面的Activity的启动流程图，Activity的启动是要经过AMS的校验的，所以就需要对AMS下功夫。</p>
</blockquote>
<p>Step1. 在宿主工程的AndroidManifest.xml中预先注册Activity进行占坑。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.github.xch168.plugindemo"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--占坑Activity，不需要创建类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".StubActivity"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Step2. 使用占坑Activity绕过AMS验证。</p>
<blockquote>
<p>Activity的启动，实际会调用<code>Instrumentation</code>类的<code>execStartActvity</code>方法，所以可以对其进行hook，将启动插件Activity的Intent替换成宿主预注册的插桩Activity，从而绕过ASM的验证。</p>
</blockquote>
<p>Instrumentation代理类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstrumentationProxy</span> <span class="keyword">extends</span> <span class="title">Instrumentation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Instrumentation mInstrumentation;</span><br><span class="line">    <span class="keyword">private</span> PackageManager mPackageManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstrumentationProxy</span><span class="params">(Instrumentation instrumentation, PackageManager packageManager)</span> </span>&#123;</span><br><span class="line">        mInstrumentation = instrumentation;</span><br><span class="line">        mPackageManager = packageManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(Context who, IBinder contextThread, IBinder token, Activity target, Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span> </span>&#123;</span><br><span class="line">        List&lt;ResolveInfo&gt; infos = mPackageManager.queryIntentActivities(intent, PackageManager.MATCH_ALL);</span><br><span class="line">        <span class="keyword">if</span> (infos == <span class="keyword">null</span> || infos.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 保存要启动的插件Activity的类名</span></span><br><span class="line">            intent.putExtra(HookHelper.TARGET_INTENT, intent.getComponent().getClassName());</span><br><span class="line">            <span class="comment">// 构建插桩Activity的Intent</span></span><br><span class="line">            intent.setClassName(who, <span class="string">"com.github.xch168.plugindemo.StubActivity"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method execMethod = Instrumentation.class.getDeclaredMethod(<span class="string">"execStartActivity"</span>, Context.class, IBinder.class, IBinder.class, Activity.class, Intent.class, <span class="keyword">int</span>.class, Bundle.class);</span><br><span class="line">            <span class="comment">// 将插桩Activity的Intent传给ASM验证</span></span><br><span class="line">            <span class="keyword">return</span> (ActivityResult) execMethod.invoke(mInstrumentation, who, contextThread, token, target, intent, requestCode, options);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Hook:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HookHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TARGET_INTENT = <span class="string">"target_intent"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookInstrumentation</span><span class="params">(Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; contextImplClass = Class.forName(<span class="string">"android.app.ContextImpl"</span>);</span><br><span class="line">        Object activityThread = ReflectUtil.getField(contextImplClass, context, <span class="string">"mMainThread"</span>);</span><br><span class="line">        Class&lt;?&gt; activityThreadClass = Class.forName(<span class="string">"android.app.ActivityThread"</span>);</span><br><span class="line">        Object mInstrumentation = ReflectUtil.getField(activityThreadClass, activityThread, <span class="string">"mInstrumentation"</span>);</span><br><span class="line">        <span class="comment">// 用代理Instrumentation来替换mMainThread中的mInstrumentation，从而接管Instrumentation的任务</span></span><br><span class="line">        ReflectUtil.setField(activityThreadClass, activityThread, <span class="string">"mInstrumentation"</span>, <span class="keyword">new</span> InstrumentationProxy((Instrumentation) mInstrumentation, context.getPackageManager()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step3. 还原插件Activity</p>
<blockquote>
<p>上面我们使用插桩Activity来绕过ASM的验证，接下来的步骤会创建<code>StubActivity</code>实例，会找不到类，并且我们要启动的是插件Activity而不是插桩Activity，所以就需要对Intent进行还原。</p>
<p>在Activity启动流程第10步，通过插件的ClassLoader反射创建插件Activity，所以可以在这hook进行还原。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstrumentationProxy</span> <span class="keyword">extends</span> <span class="title">Instrumentation</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">newActivity</span><span class="params">(ClassLoader cl, String className, Intent intent)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取插件Activity的类名</span></span><br><span class="line">        String intentName = intent.getStringExtra(HookHelper.TARGET_INTENT);</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(intentName)) &#123;</span><br><span class="line">            <span class="comment">// 创建插件Activity实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.newActivity(cl, intentName, intent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.newActivity(cl, className, intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step4. 在Application中hook Instrumentation。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HookHelper.hookInstrumentation(base);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="处理插件Activity的生命周期"><a href="#处理插件Activity的生命周期" class="headerlink" title="处理插件Activity的生命周期"></a>处理插件Activity的生命周期</h4><blockquote>
<p>经过上面的处理后，插件Activity可以启动了，但是是否具有生命周期呢？接下来通过源码来探索一下。</p>
</blockquote>
<p>Activity的<code>finish</code>方法可以触发Activity生命周期的变化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    finish(DONT_FINISH_TASK_WITH_ACTIVITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(<span class="keyword">int</span> finishTask)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// mToken是该Activity的标识</span></span><br><span class="line">    <span class="keyword">if</span> (ActivityManager.getService().finishActivity(mToken, resultCode, resultData, finishTask)) &#123;</span><br><span class="line">        mFinished = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：</p>
<ul>
<li>调用ASM的finishActivity方法，接着ASM通过ApplicationThread调用ActivityThread。</li>
<li>ActivityThread最终会调用performDestroyActivity方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThread</span> <span class="keyword">extends</span> <span class="title">ClientTransactionHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">ActivityClientRecord <span class="title">performDestroyActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finishing, <span class="keyword">int</span> configChanges, <span class="keyword">boolean</span> getNonConfigInstance, String reason)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">// 获取保存到token的Activity</span></span><br><span class="line">    	mInstrumentation.callActivityOnDestroy(r.activity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>token中的Activity是从何而来呢？解析来我们来看看ActivityThread的performLaunchActivity方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThread</span> <span class="keyword">extends</span> <span class="title">ClientTransactionHandler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        activity = mInstrumentation.newActivity(cl, component.getClassName(), r.intent);</span><br><span class="line">        </span><br><span class="line">        r.activity = activity;</span><br><span class="line">        </span><br><span class="line">        mActivities.put(r.token, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：在performLaunchActivity方法中，会将当前启动的Activity放在token中的activity属性，并将其置于mActivities中，而mInstrumentation的newActivity方法已经被我们hook了，所以该activity即为插件Activity，后续各个生命周期的调用都会通知给插件Activity。</p>
<h4 id="加载插件中的资源"><a href="#加载插件中的资源" class="headerlink" title="加载插件中的资源"></a>加载插件中的资源</h4><blockquote>
<p>当插件Activity创建的时候会调用<code>setContentView</code>通过id去操作布局，因为凡是通过id去获取资源的方式都是通过<code>Resources</code>去获取的。但是宿主apk不知道到插件apk的存在，所以宿主Resources也无法加载插件apk的资源。因此需要为插件apk构建一个<code>Resources</code>，然后插件apk中都通过这个Resource区获取资源。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Resources sPluginResources;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initPluginResource</span><span class="params">(Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;AssetManager&gt; clazz = AssetManager.class;</span><br><span class="line">        AssetManager assetManager = clazz.newInstance();</span><br><span class="line">        Method method = clazz.getMethod(<span class="string">"addAssetPath"</span>, String.class);</span><br><span class="line">        method.invoke(assetManager, context.getExternalFilesDir(<span class="string">"plugin"</span>).listFiles()[<span class="number">0</span>].getAbsolutePath());</span><br><span class="line">        sPluginResources = <span class="keyword">new</span> Resources(assetManager, context.getResources().getDisplayMetrics(), context.getResources().getConfiguration());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Resources <span class="title">getPluginResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sPluginResources;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PluginHelper.getPluginResources() == <span class="keyword">null</span> ? <span class="keyword">super</span>.getResources() : PluginHelper.getPluginResources();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：在Application中重写<code>getResources</code>，并返回插件的Resources，因为插件apk中的四大组件实际都是在宿主apk创建的，那么他们拿到的Application实际上都是宿主的，所以它们只需要通过<code>getApplication().getResources()</code>就可以非常方便的拿到插件的Resource。</p>
<h4 id="插件工程"><a href="#插件工程" class="headerlink" title="插件工程"></a>插件工程</h4><p>插件工程比较简单，就一个Activity。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_plugin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplication() != <span class="keyword">null</span> &amp;&amp; getApplication().getResources() != <span class="keyword">null</span> ? getApplication().getResources() : <span class="keyword">super</span>.getResources();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：重写<code>getResources</code>方法，并返回插件Resources，因为需要通过插件Resources才能用id去操作资源文件。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>Step1. 将插件项目打包成apk；</p>
<p>Step2. 通过adb命令<code>adb push &lt;local&gt; &lt;remote&gt;</code>将apk推送到手机；</p>
<p>Step3. 宿主应用加载插件apk。</p>
<p><img src="/2019/01/27/android-plugin-principle-analysis/run.gif" alt="run"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>插件化要处理的细节非常多，不仅要适配不同版本的Android系统，还要适配国产的各种ROM。要深入学习插件化的各种解决方案，可以去探索开源的插件化框架。</p>
<p>2018年Android 9.0上Android开始对私有API的使用进行限制，所以后面插件化可能退出历史主流，但是了解插件化涉及到的知识和技术，可以更好的理解Android系统。</p>
<hr>
<p>Demo地址：<a href="https://github.com/xch168/PluginDemo" target="_blank" rel="noopener">https://github.com/xch168/PluginDemo</a></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://mp.weixin.qq.com/s/Uwr6Rimc7Gpnq4wMFZSAag" target="_blank" rel="noopener">《Android插件化技术——原理篇》</a></li>
<li><a href="https://blog.csdn.net/zly921112/article/details/85287437" target="_blank" rel="noopener">Android插件化初体验</a></li>
<li><a href="https://blog.csdn.net/singwhatiwanna/article/details/22597587" target="_blank" rel="noopener">Android apk动态加载机制的研究</a></li>
<li><a href="https://www.notion.so/VirtualAPK-1fce1a910c424937acde9528d2acd537" target="_blank" rel="noopener">VirtualAPK资源加载原理解析</a></li>
<li><a href="https://blog.csdn.net/itachi85/article/details/80574390" target="_blank" rel="noopener">Android插件化原理（一）Activity插件化</a></li>
<li><a href="https://www.infoq.cn/article/android-plug-ins-from-entry-to-give-up" target="_blank" rel="noopener">Android 插件化：从入门到放弃</a></li>
<li><a href="https://www.jianshu.com/p/3260baad0979" target="_blank" rel="noopener">自己动手写Android插件化框架</a></li>
<li><a href="https://www.jianshu.com/p/1bf0fd8d057c" target="_blank" rel="noopener">插件化之代码调用与加载资源</a></li>
<li><a href="http://weishu.me/2016/01/28/understand-plugin-framework-overview/" target="_blank" rel="noopener">Android插件化原理解析——概要</a></li>
<li><a href="https://mp.weixin.qq.com/s/1p5Y0f5XdVXN2EZYT0AM_A" target="_blank" rel="noopener">Android 插件技术实战总结</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 插件化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hook技术]]></title>
      <url>https://xch168.github.io/2019/01/08/android-hook/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Hook，英文直译是”钩子“的意思。在程序中将其理解为”劫持“可能会更好理解，我们可以通过hook技术来劫持某个对象，从而控制它与其他对象的交互。</p>
</blockquote>
<a id="more"></a>
<h3 id="Hook技术分类"><a href="#Hook技术分类" class="headerlink" title="Hook技术分类"></a>Hook技术分类</h3><ol>
<li><strong>根据Hook的API语言划分，分为Hook Java和Hook Native。</strong></li>
</ol>
<ul>
<li>Hook Java主要通过反射和代理来实现，用于在SDK开发环境中修改Java代码。</li>
<li>Hook Native则应用于在NDK开发环境和系统开发中修改Native代码。</li>
</ul>
<ol start="2">
<li><strong>根据Hook的进程划分，分为应用程序进程Hook和全局Hook。</strong></li>
</ol>
<ul>
<li>应用程序进程Hook只能Hook当前所在的应用程序进程。</li>
<li>应用程序进程是Zygote进程fork出来的，如果对Zygote进行Hook，就可以实现Hook系统所有的应用程序进程，这就是全局Hook。</li>
</ul>
<ol start="3">
<li><strong>根据Hook的实现方式划分，分为如下两种：</strong></li>
</ol>
<ul>
<li>通过反射和代理实现，只能Hook当前的应用程序进程。</li>
<li>通过Hook框架实现，比如Xposed，可以实现全局Hook，但是需要root。</li>
</ul>
<h3 id="Hook原理"><a href="#Hook原理" class="headerlink" title="Hook原理"></a>Hook原理</h3><blockquote>
<p>创建一个代理对象，然后把原始对象替换为我们的代理对象，这样就可以在这个代理对象为所欲为，修改参数或替换返回值。</p>
</blockquote>
<p>正常的调用和返回：</p>
<p><img src="/2019/01/08/android-hook/normal-invoke.png" alt="normal-invoke"></p>
<p>Hook的调用和返回：</p>
<p><img src="/2019/01/08/android-hook/hook-invoke.png" alt="hook-invoke"></p>
<h3 id="Hook的过程"><a href="#Hook的过程" class="headerlink" title="Hook的过程"></a>Hook的过程</h3><blockquote>
<p>Step1. 寻找Hook点，原则是<code>静态变量</code>或者<code>单例对象</code>，尽量Hook <code>public</code>的对象和方法，非public不保证每个版本都一样，需要适配。</p>
<p>Step2. 选择合适的代理方式，如果是<code>接口</code>可以用<code>动态代理</code>；如果是类可以用<code>静态代理</code>。</p>
<p>Step3. 偷梁换柱——用代理对象替换原始对象。</p>
</blockquote>
<h3 id="Hook-Activity的startActivity"><a href="#Hook-Activity的startActivity" class="headerlink" title="Hook Activity的startActivity"></a>Hook Activity的startActivity</h3><p><strong>寻找Hook点</strong>：</p>
<p>Activity的startActivity方法的调用链：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// android/app/Activity.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Step1</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.startActivity(intent, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step2</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">        startActivityForResult(intent, -<span class="number">1</span>, options);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        startActivityForResult(intent, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step3</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(@RequiresPermission Intent intent, <span class="keyword">int</span> requestCode, @Nullable Bundle options)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        options = transferSpringboardActivityOptions(options);</span><br><span class="line">        <span class="comment">// Hook点</span></span><br><span class="line">        Instrumentation.ActivityResult ar = mInstrumentation.execStartActivity(<span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>, intent, requestCode, options);</span><br><span class="line">        <span class="keyword">if</span> (ar != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mMainThread.sendActivityResult(mToken, mEmbeddedID, requestCode, ar.getResultCode(), ar.getResultData());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mStartedActivity = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cancelInputsAndStartExitTransition(options);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode, options);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Hook点分析</strong>：</p>
<p>当调用Activity的startActivity方法时，最后会调用<code>mInstrumentation</code>的execStartActivity方法来完成Activity的开启，而<code>mInstrumentation</code>是Activity的成员变量，所以是一个很好的Hook点，用代理Instrumentation来替代原始的Instrumentation完成Hook。</p>
<p><strong>Hook代码</strong>：</p>
<p>代理类：InstrumentationProxy.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. InstrumentationProxy继承Instrumentation</span></span><br><span class="line"><span class="comment"> * 2. InstrumentationProxy持有Instrumentation实例的引用</span></span><br><span class="line"><span class="comment"> * 3. 实现execStartActivity方法，并在内部通过反射调用Instrumentation的execStartActivity方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstrumentationProxy</span> <span class="keyword">extends</span> <span class="title">Instrumentation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"InstrumentationProxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Instrumentation的 mInstrumentation;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstrumentationProxy</span><span class="params">(Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">        mInstrumentation = instrumentation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(Context who, IBinder contextThread, IBinder token, Activity target,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">"Hook成功"</span> + <span class="string">"--who:"</span> + who);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method execStartActivityMethod = Instrumentation.class.getDeclaredMethod(<span class="string">"execStartActivity"</span>,</span><br><span class="line">                    Context.class, IBinder.class, IBinder.class, Activity.class,</span><br><span class="line">                    Intent.class, <span class="keyword">int</span>.class, Bundle.class);</span><br><span class="line">            <span class="keyword">return</span> (ActivityResult) execStartActivityMethod.invoke(mInstrumentation, who, contextThread, token, target,</span><br><span class="line">                    intent, requestCode, options);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用InstrumentationProxy来替换Instrumentation：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HookHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookActivityInstrumentation</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到Activity的mInstrumentation字段</span></span><br><span class="line">            Field field = Activity.class.getDeclaredField(<span class="string">"mInstrumentation"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 得到Activity中的Instrumentation对象</span></span><br><span class="line">            Instrumentation instrumentation = (Instrumentation) field.get(activity);</span><br><span class="line">            <span class="comment">// 创建InstrumentationProxy对象来代理Instrumentation对象</span></span><br><span class="line">            InstrumentationProxy instrumentationProxy = <span class="keyword">new</span> InstrumentationProxy(instrumentation);</span><br><span class="line">            <span class="comment">// 用代理去替换Activity中的Instrumentation对象</span></span><br><span class="line">            field.set(activity, instrumentationProxy);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行Hook</strong>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hook</span></span><br><span class="line">        HookHelper.hookActivityInstrumentation(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DetailActivity.class);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I/InstrumentationProxy: Hook成功--who:com.github.xch168.hooktest.MainActivity<span class="meta">@bd</span>3e1b1</span><br></pre></td></tr></table></figure>
<h3 id="Hook-Context的startActivity"><a href="#Hook-Context的startActivity" class="headerlink" title="Hook Context的startActivity"></a>Hook Context的startActivity</h3><blockquote>
<p>Context的实现类为ContextImpl。</p>
</blockquote>
<p><strong>寻找Hook点</strong>：</p>
<p>ContextImpl中startActivity的调用链：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Step1</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    warnIfCallingFromSystemProcess();</span><br><span class="line">    startActivity(intent, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step2</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, Bundle options)</span> </span>&#123;</span><br><span class="line">    warnIfCallingFromSystemProcess();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> targetSdkVersion = getApplicationInfo().targetSdkVersion;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((intent.getFlags() &amp; Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span></span><br><span class="line">            &amp;&amp; (targetSdkVersion &lt; Build.VERSION_CODES.N</span><br><span class="line">            || targetSdkVersion &gt;= Build.VERSION_CODES.P)</span><br><span class="line">            &amp;&amp; (options == <span class="keyword">null</span></span><br><span class="line">            || ActivityOptions.fromBundle(options).getLaunchTaskId() == -<span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(</span><br><span class="line">                <span class="string">"Calling startActivity() from outside of an Activity "</span></span><br><span class="line">                        + <span class="string">" context requires the FLAG_ACTIVITY_NEW_TASK flag."</span></span><br><span class="line">                        + <span class="string">" Is this really what you want?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Hook点</span></span><br><span class="line">    mMainThread.getInstrumentation().execStartActivity(getOuterContext(), mMainThread.getApplicationThread(), <span class="keyword">null</span>, (Activity) <span class="keyword">null</span>, intent, -<span class="number">1</span>, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Hook点分析</strong>:</p>
<ul>
<li>调用ActivityThread的getInstrumentation方法获取Instrumentation。</li>
<li>ActivityThread是主线程的管理类，Instrumentation是ActivityThread的成员变量，一个进程只有一个ActivityThread。</li>
<li>选择Instrumentation作为Hook点，通过代理类进行替换。</li>
</ul>
<p><strong>Hook代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HookHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookContextInstrumentation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取ActivityThread类</span></span><br><span class="line">            Class&lt;?&gt; activityThreadClass = Class.forName(<span class="string">"android.app.ActivityThread"</span>);</span><br><span class="line">            <span class="comment">// 获取ActivityThread类中的静态变量sCurrentActivityThread</span></span><br><span class="line">            Field currentActivityThreadField = activityThreadClass.getDeclaredField(<span class="string">"sCurrentActivityThread"</span>);</span><br><span class="line">            currentActivityThreadField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 获取sCurrentActivityThread字段的值，即ActivityThread的对象</span></span><br><span class="line">            Object currentActivityThread = currentActivityThreadField.get(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 获取ActivityThread的mInstrumentation字段</span></span><br><span class="line">            Field mInstrumentationField = activityThreadClass.getDeclaredField(<span class="string">"mInstrumentation"</span>);</span><br><span class="line">            mInstrumentationField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 获取mInstrumentation对象</span></span><br><span class="line">            Instrumentation instrumentation = (Instrumentation) mInstrumentationField.get(currentActivityThread);</span><br><span class="line">            <span class="comment">// 创建Instrumentation的代理对象</span></span><br><span class="line">            InstrumentationProxy instrumentationProxy = <span class="keyword">new</span> InstrumentationProxy(instrumentation);</span><br><span class="line">            <span class="comment">// 用InstrumentationProxy替换ActivityThread中的Instrumentation</span></span><br><span class="line">            mInstrumentationField.set(currentActivityThread, instrumentationProxy);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行Hook</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hook</span></span><br><span class="line">        HookHelper.hookContextInstrumentation();</span><br><span class="line"></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DetailActivity.class);</span><br><span class="line">        getApplicationContext().startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I/InstrumentationProxy: Hook成功--who:android.app.Application@<span class="number">7e13696</span></span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://weishu.me/2016/01/28/understand-plugin-framework-proxy-hook/" target="_blank" rel="noopener">Android插件化原理解析——Hook机制之动态代理</a></li>
<li><a href="https://blog.csdn.net/gdutxiaoxu/article/details/81459830" target="_blank" rel="noopener">Android Hook 机制之简单实战</a></li>
<li><a href="https://blog.csdn.net/gdutxiaoxu/article/details/81459910" target="_blank" rel="noopener">Android Hook Activity 的几种姿势</a></li>
<li><a href="https://www.jianshu.com/p/4f6d20076922" target="_blank" rel="noopener">理解 Android Hook 技术以及简单实战</a></li>
<li>《Android进阶解密》</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Hook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ClassLoader解析（二）：Android中的ClassLoader]]></title>
      <url>https://xch168.github.io/2019/01/05/android-classloader/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>不管是Java虚拟机，还是Android中的Dalvik/ART虚拟机，都是使用ClassLoader来将Class加载到内存。只不过Android平台上虚拟机运行的是Dex字节码，一种对class文件优化的产物，传统Class文件是一个Java源文件生成的.class文件，而Android是把所有Class文件进行合并，优化，然后生成一个最终的classs.dex，目的是把不同class文件中重复的东西只保留一份，如果不进行分dex处理，最后一个应用的apk只会有一个dex文件。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>本文分析涉及的源码为Android API 28</p>
</blockquote>
<h3 id="Android中ClassLoader的类型"><a href="#Android中ClassLoader的类型" class="headerlink" title="Android中ClassLoader的类型"></a>Android中ClassLoader的类型</h3><blockquote>
<p>Java中的ClassLoader可以加载jar文件和class文件，这一点在Android中不适用，因为Android加载的是dex文件，所以需要重新设计ClassLoader。</p>
<p>Android系统提供的ClassLoader包括三种：BootClassLoader、PathClassLoader和DexClassLoader。</p>
</blockquote>
<h4 id="BootClassLoader"><a href="#BootClassLoader" class="headerlink" title="BootClassLoader"></a>BootClassLoader</h4><blockquote>
<p>Android系统启动时会使用BootClassLoader来预加载常用类，与Java中的BootClassLoader不同，它并不是由C/C++代码实现，而是由Java实现的。</p>
</blockquote>
<blockquote>
<p>BootClassLoader是ClassLoader的内部类，并继承自ClassLoader。BootClassLoader是一个单例类，并且其访问修饰符是默认的，只有在同一个包中才可以访问，因此在应用程序中是无法直接使用的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BootClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> BootClassLoader instance;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@FindBugsSuppressWarnings</span>(<span class="string">"DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> BootClassLoader <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> BootClassLoader();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="PathClassLoader"><a href="#PathClassLoader" class="headerlink" title="PathClassLoader"></a>PathClassLoader</h4><blockquote>
<p>Android系统使用PathClassLoader来加载系统类和应用程序的类，加载应用程序类，会加载<code>/data/app/&lt;packageName&gt;</code>目录下的dex文件以及包含dex的apk文件或jar文件。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, <span class="keyword">null</span>, parent);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexPath            dex文件以及包含dex的apk文件或jar文件的路径集合，多个路径用路径分隔符（File.pathSeparator）分隔，Android中默认分隔符为”:“</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> librarySearchPath  包含C/C++库的路径集合，多个路径用路径分隔符分隔，可以为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent             ClassLoader的parent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DexClassLoader"><a href="#DexClassLoader" class="headerlink" title="DexClassLoader"></a>DexClassLoader</h4><blockquote>
<p>DexClassLoader可以加载dex文件以及包含dex的apk文件或jar文件，也支持从SD卡进行加载，这也意味着DexClassLoader可以在应用未安装的情况下加载dex相关文件。这是<code>热修复</code>和<code>插件化</code>技术的基础。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexPath            dex文件以及包含dex的apk文件或jar文件的路径集合，多个路径用路径分隔符（File.pathSeparator）分隔，Android中默认分隔符为”:“   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> optimizedDirectory 这个参数从API26开始弃用，原本代表dex的优化后的odex文件的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> librarySearchPath  包含C/C++库的路径集合，多个路径用路径分隔符分隔，可以为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent             ClassLoader的parent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">            String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ClassLoader的继承关系"><a href="#ClassLoader的继承关系" class="headerlink" title="ClassLoader的继承关系"></a>ClassLoader的继承关系</h3><p><img src="/2019/01/05/android-classloader/class-graph.png" alt="class-graph"></p>
<p><strong>说明</strong>：</p>
<ul>
<li>ClassLoader是一个抽象类，其中定义了ClassLoader的主要功能。BootClassLoader是它的内部类。</li>
<li>SecureClassLoader类和JDK8中的SecureClassLoader类的代码是一样的，它继承了抽象类ClassLoader。SecureClassLoader并不是ClassLoader的实现类，而是扩展了ClassLoader类加入了权限方面的功能，加强了ClassLoader的安全性。</li>
<li>URLClassLoader类和JDK8中的URLClassLoader类的代码一样，他继承自SecureClassLoader，用来通过URI路径从jar文件和文件夹中加载类和资源。</li>
<li>InMemoryDexClassLoader是Android 8.0新增的类加载器，继承自BaseDexClassLoader，用于加载内存中的dex文件。</li>
<li>BaseDexClassLoader继承自ClassLoader，是抽象类ClassLoader的具体实现类，PathClassLoader和DexClassLoader都继承它。</li>
</ul>
<p><strong>检验Android程序用到的类加载器：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        ClassLoader loader = MainActivity.class.getClassLoader();</span><br><span class="line">        <span class="keyword">while</span> (loader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.i(<span class="string">"TAG"</span>, loader.toString());</span><br><span class="line">            loader = loader.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">12</span> <span class="number">21</span>:<span class="number">47</span>:<span class="number">21.534</span> <span class="number">7359</span>-<span class="number">7359</span>/com.github.xch168.classloadertest I/TAG: dalvik.system.PathClassLoader[DexPathList[[zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/base.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_dependencies_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_resources_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_slice_0_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_slice_1_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_slice_2_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_slice_3_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_slice_4_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_slice_5_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_slice_6_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_slice_7_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_slice_8_apk.apk"</span>, zip file <span class="string">"/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/split_lib_slice_9_apk.apk"</span>],nativeLibraryDirectories=[/data/app/com.github.xch168.classloadertest-EmfX2txe3VMN2iMz4Iko-g==/lib/x86, /system/lib, /vendor/lib]]]</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">12</span> <span class="number">21</span>:<span class="number">47</span>:<span class="number">21.534</span> <span class="number">7359</span>-<span class="number">7359</span>/com.github.xch168.classloadertest I/TAG: java.lang.BootClassLoader@<span class="number">5</span>cf27a5</span><br></pre></td></tr></table></figure>
<p>运行结果说明：</p>
<ul>
<li>MainActivity类的加载涉及到两种类加载器：一种是PathClassLoader，另一种是BootClassLoader。</li>
<li>DexPathList中包含了很多apk的路径。</li>
</ul>
<h3 id="ClassLoader的创建"><a href="#ClassLoader的创建" class="headerlink" title="ClassLoader的创建"></a>ClassLoader的创建</h3><h4 id="BootClassLoader-1"><a href="#BootClassLoader-1" class="headerlink" title="BootClassLoader"></a>BootClassLoader</h4><blockquote>
<p>BootClassLoader的创建是在ZygoteInit中被创建的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZygoteInit</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            preload(bootTimingsTraceLog);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p>main方法时ZygoteInit入口方法，其中调用了ZygoteInit的preload方法，preload方法中又调用了ZygoteInit的preloadClasses方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preloadClasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> VMRuntime runtime = VMRuntime.getRuntime();</span><br><span class="line"></span><br><span class="line">    InputStream is;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 读取/system/etc/preloaded-class文件，里面列举了Zygote进程初始化预加载的常用类</span></span><br><span class="line">        is = <span class="keyword">new</span> FileInputStream(PRELOADED_CLASSES);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"Couldn't find "</span> + PRELOADED_CLASSES + <span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"Preloading classes..."</span>);</span><br><span class="line">   	<span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is), <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Skip comments and blank lines.</span></span><br><span class="line">            line = line.trim();</span><br><span class="line">            <span class="keyword">if</span> (line.startsWith(<span class="string">"#"</span>) || line.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Trace.traceBegin(Trace.TRACE_TAG_DALVIK, line);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">                    Log.v(TAG, <span class="string">"Preloading "</span> + line + <span class="string">"..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 加载预加载类</span></span><br><span class="line">                Class.forName(line, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_DALVIK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">"...preloaded "</span> + count + <span class="string">" classes in "</span></span><br><span class="line">                + (SystemClock.uptimeMillis()-startTime) + <span class="string">"ms."</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"Error reading "</span> + PRELOADED_CLASSES + <span class="string">"."</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p><code>/system/etc/preloaded-class</code>中配置的部分预加载类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">java.lang.BootClassLoader</span><br><span class="line">dalvik.system.BaseDexClassLoader</span><br><span class="line">dalvik.system.PathClassLoader</span><br><span class="line">dalvik.system.DexClassLoader</span><br><span class="line">android.app.Application</span><br><span class="line">android.app.Application$ActivityLifecycleCallbacks</span><br><span class="line">android.app.ApplicationErrorReport$CrashInfo</span><br><span class="line">android.app.ApplicationLoaders</span><br><span class="line">android.app.ApplicationPackageManager</span><br><span class="line">android.app.ApplicationPackageManager$ResourceName</span><br><span class="line">android.app.BackStackRecord</span><br><span class="line">android.app.BackStackRecord$Op</span><br><span class="line">android.app.ContentProviderHolder</span><br><span class="line">android.app.ContentProviderHolder$<span class="number">1</span></span><br><span class="line">android.app.ContextImpl</span><br><span class="line">android.app.ContextImpl$<span class="number">1</span></span><br><span class="line">android.app.ContextImpl$ApplicationContentResolver</span><br><span class="line">android.app.DexLoadReporter</span><br><span class="line">android.app.Dialog</span><br><span class="line">android.app.Dialog$ListenersHandler</span><br><span class="line">android.app.DialogFragment</span><br><span class="line">android.app.DownloadManager</span><br><span class="line">android.app.Fragment</span><br></pre></td></tr></table></figure>
<p>从上面可以看出预加载类包括BootClassLoader和其他常用的Android类，接下来就是在<code>Class.forName进行加载</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String name, <span class="keyword">boolean</span> initialize, ClassLoader loader) <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果没有ClassLoader，就创建一个BootClassLoader</span></span><br><span class="line">        <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            loader = BootClassLoader.getInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = classForName(name, initialize, loader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            Throwable cause = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> LinkageError) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (LinkageError) cause;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="PathClassLoader-1"><a href="#PathClassLoader-1" class="headerlink" title="PathClassLoader"></a>PathClassLoader</h4><blockquote>
<p>PathClassLoader的创建也是在ZygoteInit中被创建。在Zygote进程启动SystemServer进程时会调用ZygoteInit的<code>forkSystemServer</code>方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZygoteInit</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">                Runnable r = forkSystemServer(abiList, socketName, zygoteServer);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// &#123;@code r == null&#125; in the parent (zygote) process, and &#123;@code r != null&#125; in the</span></span><br><span class="line">                <span class="comment">// child (system_server) process.</span></span><br><span class="line">                <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    r.run();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在forkSystemServer方法中会调用handleSystemServerProcess方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Runnable <span class="title">forkSystemServer</span><span class="params">(String abiList, String socketName, ZygoteServer zygoteServer)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    	<span class="comment">/* For child process */</span></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</span><br><span class="line">            waitForSecondaryZygote(socketName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        zygoteServer.closeServerSocket();</span><br><span class="line">        <span class="keyword">return</span> handleSystemServerProcess(parsedArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在handleSystemServerProcess方法中会进一步调用createPathClassLoader来完成PathClassLoader的创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ClassLoader <span class="title">createPathClassLoader</span><span class="params">(String classPath, <span class="keyword">int</span> targetSdkVersion)</span> </span>&#123;</span><br><span class="line">    String libraryPath = System.getProperty(<span class="string">"java.library.path"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ClassLoaderFactory.createClassLoader(classPath, libraryPath, libraryPath,</span><br><span class="line">            ClassLoader.getSystemClassLoader(), targetSdkVersion, <span class="keyword">true</span> <span class="comment">/* isNamespaceShared */</span>,</span><br><span class="line">            <span class="keyword">null</span> <span class="comment">/* classLoaderName */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PathClassLoader是通过ClassLoaderFactory的createClassLoader创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderFactory</span> </span>&#123;</span><br><span class="line"> 	<span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">createClassLoader</span><span class="params">(String dexPath,</span></span></span><br><span class="line"><span class="function"><span class="params">            String librarySearchPath, ClassLoader parent, String classloaderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isPathClassLoaderName(classloaderName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PathClassLoader(dexPath, librarySearchPath, parent);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDelegateLastClassLoaderName(classloaderName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DelegateLastClassLoader(dexPath, librarySearchPath, parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Invalid classLoaderName: "</span> + classloaderName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="BaseDexClassLoader源码解析"><a href="#BaseDexClassLoader源码解析" class="headerlink" title="BaseDexClassLoader源码解析"></a>BaseDexClassLoader源码解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDexClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDexClassLoader</span><span class="params">(String dexPath, File optimizedDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">            String librarySearchPath, ClassLoader parent, <span class="keyword">boolean</span> isTrusted)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        <span class="keyword">this</span>.pathList = <span class="keyword">new</span> DexPathList(<span class="keyword">this</span>, dexPath, librarySearchPath, <span class="keyword">null</span>, isTrusted);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</span><br><span class="line">        Class c = pathList.findClass(name, suppressedExceptions);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(</span><br><span class="line">                    <span class="string">"Didn't find class \""</span> + name + <span class="string">"\" on path: "</span> + pathList);</span><br><span class="line">            <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</span><br><span class="line">                cnfe.addSuppressed(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> cnfe;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> URL <span class="title">findResource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pathList.findResource(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Enumeration&lt;URL&gt; <span class="title">findResources</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pathList.findResources(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findLibrary</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pathList.findLibrary(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>解析</strong>：</p>
<ul>
<li>在BaseDexClassLoader的构造函数中创建了DexPathList实例。</li>
<li>在BaseClassLoader中，对于类的查找和资源的查找，都是通过其中的DexPathList实例来进行的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexPathList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_SUFFIX = <span class="string">".dex"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String zipSeparator = <span class="string">"!/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** class definition context */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader definingContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * List of dex/resource (class path) elements.</span></span><br><span class="line"><span class="comment">     * Should be called pathElements, but the Facebook app uses reflection</span></span><br><span class="line"><span class="comment">     * to modify 'dexElements' (http://b/7726934).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Element[] dexElements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** List of native library path elements. */</span></span><br><span class="line">    <span class="comment">// Some applications rely on this field being an array or we'd use a final list here</span></span><br><span class="line">    <span class="comment">/* package visible for testing */</span> NativeLibraryElement[] nativeLibraryPathElements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** List of application native library directories. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;File&gt; nativeLibraryDirectories;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** List of system native library directories. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;File&gt; systemNativeLibraryDirectories;</span><br><span class="line">    </span><br><span class="line">    DexPathList(ClassLoader definingContext, String dexPath,</span><br><span class="line">            String librarySearchPath, File optimizedDirectory, <span class="keyword">boolean</span> isTrusted) &#123;</span><br><span class="line">        <span class="keyword">if</span> (definingContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"definingContext == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dexPath == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"dexPath == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (optimizedDirectory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!optimizedDirectory.exists())  &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"optimizedDirectory doesn't exist: "</span></span><br><span class="line">                        + optimizedDirectory);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!(optimizedDirectory.canRead()</span><br><span class="line">                            &amp;&amp; optimizedDirectory.canWrite())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"optimizedDirectory not readable/writable: "</span></span><br><span class="line">                        + optimizedDirectory);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.definingContext = definingContext;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;IOException&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;IOException&gt;();</span><br><span class="line">        <span class="comment">// save dexPath for BaseDexClassLoader</span></span><br><span class="line">        <span class="keyword">this</span>.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory,</span><br><span class="line">                                           suppressedExceptions, definingContext, isTrusted);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Native libraries may exist in both the system and</span></span><br><span class="line">        <span class="comment">// application library paths, and we use this search order:</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//   1. This class loader's library path for application libraries (librarySearchPath):</span></span><br><span class="line">        <span class="comment">//   1.1. Native library directories</span></span><br><span class="line">        <span class="comment">//   1.2. Path to libraries in apk-files</span></span><br><span class="line">        <span class="comment">//   2. The VM's library path from the system property for system libraries</span></span><br><span class="line">        <span class="comment">//      also known as java.library.path</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// This order was reversed prior to Gingerbread; see http://b/2933456.</span></span><br><span class="line">        <span class="keyword">this</span>.nativeLibraryDirectories = splitPaths(librarySearchPath, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.systemNativeLibraryDirectories =</span><br><span class="line">                splitPaths(System.getProperty(<span class="string">"java.library.path"</span>), <span class="keyword">true</span>);</span><br><span class="line">        List&lt;File&gt; allNativeLibraryDirectories = <span class="keyword">new</span> ArrayList&lt;&gt;(nativeLibraryDirectories);</span><br><span class="line">        allNativeLibraryDirectories.addAll(systemNativeLibraryDirectories);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.nativeLibraryPathElements = makePathElements(allNativeLibraryDirectories);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (suppressedExceptions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dexElementsSuppressedExceptions =</span><br><span class="line">                suppressedExceptions.toArray(<span class="keyword">new</span> IOException[suppressedExceptions.size()]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dexElementsSuppressedExceptions = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>解析</strong>：在构造函数中，根据dexPath，调用<code>makeDexElements</code>构建一个DexElement数组，在后面对于类的查找就会在该数组中进行查找。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Element[] makeDexElements(List&lt;File&gt; files, File optimizedDirectory, List&lt;IOException&gt; suppressedExceptions, ClassLoader loader, <span class="keyword">boolean</span> isTrusted) &#123;</span><br><span class="line">    Element[] elements = <span class="keyword">new</span> Element[files.size()];</span><br><span class="line">    <span class="keyword">int</span> elementsPos = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Open all files and load the (direct or contained) dex files up front.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            <span class="comment">// We support directories for looking up resources. Looking up resources in</span></span><br><span class="line">            <span class="comment">// directories is useful for running libcore tests.</span></span><br><span class="line">            elements[elementsPos++] = <span class="keyword">new</span> Element(file);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            String name = file.getName();</span><br><span class="line"></span><br><span class="line">            DexFile dex = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (name.endsWith(DEX_SUFFIX)) &#123;</span><br><span class="line">                <span class="comment">// Raw dex file (not inside a zip/jar).</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dex = loadDexFile(file, optimizedDirectory, loader, elements);</span><br><span class="line">                    <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        elements[elementsPos++] = <span class="keyword">new</span> Element(dex, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException suppressed) &#123;</span><br><span class="line">                    System.logE(<span class="string">"Unable to load dex file: "</span> + file, suppressed);</span><br><span class="line">                    suppressedExceptions.add(suppressed);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dex = loadDexFile(file, optimizedDirectory, loader, elements);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException suppressed) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * IOException might get thrown "legitimately" by the DexFile constructor if</span></span><br><span class="line"><span class="comment">                     * the zip file turns out to be resource-only (that is, no classes.dex file</span></span><br><span class="line"><span class="comment">                     * in it).</span></span><br><span class="line"><span class="comment">                     * Let dex == null and hang on to the exception to add to the tea-leaves for</span></span><br><span class="line"><span class="comment">                     * when findClass returns null.</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    suppressedExceptions.add(suppressed);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (dex == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    elements[elementsPos++] = <span class="keyword">new</span> Element(file);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    elements[elementsPos++] = <span class="keyword">new</span> Element(dex, file);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dex != <span class="keyword">null</span> &amp;&amp; isTrusted) &#123;</span><br><span class="line">                dex.setTrusted();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.logW(<span class="string">"ClassLoader referenced unknown path: "</span> + file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (elementsPos != elements.length) &#123;</span><br><span class="line">        elements = Arrays.copyOf(elements, elementsPos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>解析</strong>：在makeDexElements方法中，会调用<code>loadDexFile</code>来完成dex文件的加载。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DexFile <span class="title">loadDexFile</span><span class="params">(File file, File optimizedDirectory, ClassLoader loader, Element[] elements)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (optimizedDirectory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DexFile(file, loader, elements);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String optimizedPath = optimizedPathFor(file, optimizedDirectory);</span><br><span class="line">        <span class="keyword">return</span> DexFile.loadDex(file.getPath(), optimizedPath, <span class="number">0</span>, loader, elements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Android中类加载的过程"><a href="#Android中类加载的过程" class="headerlink" title="Android中类加载的过程"></a>Android中类加载的过程</h3><p>在Android中，ClassLoader用loadClass方法来加载我们需要的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在loadClass方法中调用了findClass方法，而BaseDexClassLoader重载了这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDexClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</span><br><span class="line">        Class c = pathList.findClass(name, suppressedExceptions);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(<span class="string">"Didn't find class \""</span> + name + <span class="string">"\" on path: "</span> + pathList);</span><br><span class="line">            <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</span><br><span class="line">                cnfe.addSuppressed(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> cnfe;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在findClass方法中，会调用DexPathList的findClass来最终获取到Class：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexPathList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name, List&lt;Throwable&gt; suppressed) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Element element : dexElements) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = element.findClass(name, definingContext, suppressed);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dexElementsSuppressedExceptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>解析</strong>：该findClass方法会遍历所有加载过得dex文件，并调用Element的findClass。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexPathList</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; findClass(String name, ClassLoader definingContext, List&lt;Throwable&gt; suppressed) &#123;</span><br><span class="line">            <span class="keyword">return</span> dexFile != <span class="keyword">null</span> ? dexFile.loadClassBinaryName(name, definingContext, suppressed) : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">loadClassBinaryName</span><span class="params">(String name, ClassLoader loader, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, loader, mCookie, <span class="keyword">this</span>, suppressed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Class <span class="title">defineClass</span><span class="params">(String name, ClassLoader loader, Object cookie, DexFile dexFile, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</span><br><span class="line">        Class result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = defineClassNative(name, loader, cookie, dexFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoClassDefFoundError e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (suppressed != <span class="keyword">null</span>) &#123;</span><br><span class="line">                suppressed.add(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (suppressed != <span class="keyword">null</span>) &#123;</span><br><span class="line">                suppressed.add(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/itachi85/article/details/78276837" target="_blank" rel="noopener">Android解析ClassLoader（二）Android中的ClassLoader</a></li>
<li><a href="https://www.jianshu.com/p/a620e368389a" target="_blank" rel="noopener">Android动态加载之ClassLoader详解</a></li>
<li><a href="https://www.jianshu.com/p/96a72d1a7974" target="_blank" rel="noopener">热修复入门：Android 中的 ClassLoader</a></li>
<li><a href="http://www.cnblogs.com/lanrenxinxin/p/4712224.html" target="_blank" rel="noopener">浅析dex文件加载机制</a></li>
<li><a href="https://segmentfault.com/a/1190000004062880" target="_blank" rel="noopener">Android动态加载基础 ClassLoader工作机制</a></li>
<li><a href="https://segmentfault.com/a/1190000014135318" target="_blank" rel="noopener">Android类装载机制</a></li>
<li><a href="https://blog.csdn.net/xiangzhihong8/article/details/52880327" target="_blank" rel="noopener">Android ClassLoader详解</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> ClassLoader </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ClassLoader解析（一）：Java中的ClassLoader]]></title>
      <url>https://xch168.github.io/2019/01/05/java-classloader/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>ClassLoader（类加载器）的功能是将<code>class</code>文件加载到JVM虚拟机中，让程序可以正确运行；但是，JVM启动的时候，并不会一次性加载所有的class文件，而是根据需要去动态加载，不然，一次性加载那么多class，会占用大量内存。</p>
</blockquote>
<a id="more"></a>
<h3 id="ClassLoader的类型"><a href="#ClassLoader的类型" class="headerlink" title="ClassLoader的类型"></a>ClassLoader的类型</h3><blockquote>
<p>Java中的类加载器主要有两种类型：系统类加载器和自定义类加载器。其中系统类加载器包括3中，分别是<code>Bootstrap ClassLoader</code>、<code>Extensions ClassLoader</code>、<code>App ClassLoader</code>。</p>
</blockquote>
<h4 id="Bootstrap-ClassLoader"><a href="#Bootstrap-ClassLoader" class="headerlink" title="Bootstrap ClassLoader"></a>Bootstrap ClassLoader</h4><blockquote>
<p>启动类加载器，是Java类加载层次中最顶层的类加载器，是用C/C++实现的，负责加载JDK中的核心类库，如<code>rt.jar</code>、<code>resources.jar</code>、<code>charsets.jar</code>等。可以通过启动JVM时指定<code>-Xbootclasspath</code>来改变Bootstrap ClassLoader的加载目录。</p>
</blockquote>
<p>获取该类加载器从哪些地方加载了相关的jar或class文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">System.out.println(System.getProperty(<span class="string">"sun.boot.class.path"</span>));</span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line">URL[] urls = Launcher.getBootstrapClassPath().getURLs();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; urls.length; i++) &#123;</span><br><span class="line">    System.out.println(urls[i].toExternalForm());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/resources.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/rt.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/sunrsasign.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/jsse.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/jce.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/charsets.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/jfr.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/classes</span><br></pre></td></tr></table></figure>
<h4 id="Extensions-ClassLoader"><a href="#Extensions-ClassLoader" class="headerlink" title="Extensions ClassLoader"></a>Extensions ClassLoader</h4><blockquote>
<p>扩展类加载器，负责加载Java的扩展类库，默认加载<code>Java_home/jre/lib/ext</code>目录下的所有jar。也可以通过<code>-Djava.ext.dirs</code>选项指定目录。</p>
</blockquote>
<p>获取该类加载器的加载目录：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(System.getProperty(<span class="string">"java.ext.dirs"</span>));</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/xch/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext:</span><br><span class="line">/Library/Java/Extensions:</span><br><span class="line">/Network/Library/Java/Extensions:</span><br><span class="line">/System/Library/Java/Extensions:/usr/lib/java</span><br></pre></td></tr></table></figure>
<h4 id="App-ClassLoader"><a href="#App-ClassLoader" class="headerlink" title="App ClassLoader"></a>App ClassLoader</h4><blockquote>
<p>负责加载当前应用程序classpath目录下的所有jar和class文件。也可以通过<code>-Djava.class.path</code>加载的路径。</p>
</blockquote>
<h4 id="Custom-ClassLoader"><a href="#Custom-ClassLoader" class="headerlink" title="Custom ClassLoader"></a>Custom ClassLoader</h4><blockquote>
<p>除了系统提供的类加载器，还可以自定义类加载器，自定义类加载器是通过继承<code>java.lang.ClassLoader</code>类的方式来实现自己的类加载器。</p>
</blockquote>
<h3 id="ClassLoader的继承关系"><a href="#ClassLoader的继承关系" class="headerlink" title="ClassLoader的继承关系"></a>ClassLoader的继承关系</h3><p>获取一个类加载涉及到的类加载器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassLoader loader = ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        <span class="keyword">while</span> (loader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(loader);</span><br><span class="line">            loader = loader.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">135f</span>baa4</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@<span class="number">2503</span>dbd3</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>第1行说明加载ClassLoaderTest的类加载器是AppClassLoader；</li>
<li>第2行说明APPClassLoader的父加载器为ExtClassLoader；</li>
<li>因为Bootstrap ClassLoader是由C/C++编写的，并不是一个Java类，所有无法在Java代码中获取它的引用。</li>
</ul>
<p><img src="/2019/01/05/java-classloader/class-graph.png" alt="class-graph"></p>
<ul>
<li>ClassLoader是一个抽象类，其中定义了ClassLoader的主要功能。</li>
<li>SecureClassLoader继承了抽象类ClassLoader，但SecureClassLoader并不是ClassLoader的实现类，而是扩展了ClassLoader类加入了权限方面的功能，加强了ClassLoader的安全性。</li>
<li>URLClassLoader继承自SecureClassLoader，用来通过URI路径从jar文件和文件夹中加载类和资源。</li>
<li>&nbsp;ExtClassLoader和AppClassLoader都继承自URLClassLoader，它们都是Launcher的内部类，Launcher是Java虚拟机的入口应用，ExtClassLoader和AppClassLoader都是在Launcher中进行初始化的。</li>
</ul>
<h3 id="ClassLoader加载类的原理"><a href="#ClassLoader加载类的原理" class="headerlink" title="ClassLoader加载类的原理"></a>ClassLoader加载类的原理</h3><h4 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h4><blockquote>
<p>类加载器查找Class所采用的是<code>双亲委托模式</code>，所谓的双亲委托就是首先判断该Class是否已经加载，如果没有则不是自身去查找，而是委托给父加载器进行查找，一样依次的进行递归，直到委托到最顶层的Bootstrap ClassLoader，如果Bootstrap ClassLoader找到了该Class，就直接返回；如果没有找到，则继续依次向下查找；如果还没找到则最后会交给自身去查找。</p>
</blockquote>
<h4 id="加载过程"><a href="#加载过程" class="headerlink" title="加载过程"></a>加载过程</h4><p><img src="/2019/01/05/java-classloader/classloader-load-class.png" alt="classloader-load-class"></p>
<blockquote>
<ol>
<li>自底向上检查类是否已经加载；</li>
<li>自顶向下尝试加载类。</li>
</ol>
</blockquote>
<p>Step1:：自定义类加载器首先从缓存中查找Class是否已经加载，如果已将加载就返回该Class；如果没加载，则委托给父加载器也就是App ClassLoader。</p>
<p>Step2：按照上图中红色虚线的方向递归步骤1.</p>
<p>Step3：一直委托到Bootstrap ClassLoader，如果Bootstrap ClassLoader在缓存中还没找到Class，则在自己规定路径<code>JAVA_HOME/jre/lib</code>中或者<code>Xbootclasspath</code>选项指定路径的jar包中进行查找，如果找到，则返回该Class；如果没有，则交给子加载器Extensions ClassLoader。</p>
<p>Step4：Extensions ClassLoader查找<code>JAVA_HOME/jre/lib/ext</code>目录下或者<code>-Djava.ext.dirs</code>选项指定目录下的jar包；如果找到就返回，找不到则交给App ClassLoader。</p>
<p>Step5：App ClassLoader查找<code>classpath</code>目录下或者<code>-Djava.class.path</code>选项所指定目录下的jar包或class文件，如果找到就返回，找不到就交给自定义的类加载器，如果还找不到则抛出异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ClassLoader中的loadClass方法</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 检查class是否已经被加载</span></span><br><span class="line">    Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 调用父类加载器的loadClass方法</span></span><br><span class="line">                c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 调用Bootstrap ClassLoader查找</span></span><br><span class="line">                c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">            <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 向上委托没有找到该类，则调用findClass方法继续向下查找。</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="双亲委托模式的好处"><a href="#双亲委托模式的好处" class="headerlink" title="双亲委托模式的好处"></a>双亲委托模式的好处</h4><ol>
<li>避免重复加载，如果已经加载过一次Class，就不需要再次加载，而是从缓存中直接读取。</li>
<li>更加安全，如果不使用双亲委托模式，就可以自定义一个String类来替代系统的String类，这会造成安全隐患，采用双亲委托模式会使String类在虚拟机启动时就被Bootstrap ClassLoader加载，所以用户自定义的ClassLoader永远无法加载一个自己写的String，除非改变JDK中ClassLoader搜索类的默认算法。并且只有两个类名一致并且被同一个类加载器加载的类，Java虚拟机才会认为它们是同一个类。</li>
</ol>
<h3 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h3><blockquote>
<p>系统提供的类加载器只能加载指定目录下的jar包和class文件，如果想要加载网络上或者其他地方的jar包或者class文件则需要自定义ClassLoader。</p>
</blockquote>
<h4 id="自定义步骤"><a href="#自定义步骤" class="headerlink" title="自定义步骤"></a>自定义步骤</h4><p>Step1：编写一个类继承自ClassLoader抽象类。</p>
<p>Step2：重写<code>findClass()</code>方法。</p>
<p>Step3：在<code>findClass()</code>方法中调用<code>defineClass()</code>。</p>
<p><strong>说明</strong>：</p>
<blockquote>
<p>在<code>findClass()</code>方法中定义查找class的方法，然后将class数据通过<code>defineClass()</code>生成Class对象。</p>
</blockquote>
<h4 id="自定义示例"><a href="#自定义示例" class="headerlink" title="自定义示例"></a>自定义示例</h4><p>示例：自定义一个NetworkClassLoader，用于加载网络上的class文件</p>
<p>Step1. 创建NetworkClassLoader.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String rootUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NetworkClassLoader</span><span class="params">(String rootUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootUrl = rootUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class clazz;</span><br><span class="line">        <span class="keyword">byte</span>[] classData = getClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">        &#125;</span><br><span class="line">        clazz = defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassData(String name) &#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String path = classNameToPath(name);</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">4</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            is = url.openStream();</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buff, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">classNameToPath</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rootUrl + <span class="string">"/"</span> + name.replace(<span class="string">"."</span>, <span class="string">"/"</span>) + <span class="string">".class"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step2. 创建用于网络加载的类NetworkClassLoaderTest.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.xch168.network;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkClassLoaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from network class."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step3. 将NetworkClassLoaderTest.java编译成NetworkClassLoaderTest.class并上传到七牛的对象存储服务器。</p>
<p><img src="/2019/01/05/java-classloader/network-class.png" alt="network-class"></p>
<p>Step4. 创建测试类ClassLoaderTest.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String rootUrl = <span class="string">"http://pkx097e6d.bkt.clouddn.com"</span>;</span><br><span class="line">            NetworkClassLoader networkClassLoader = <span class="keyword">new</span> NetworkClassLoader(rootUrl);</span><br><span class="line">            String classname = <span class="string">"com.github.xch168.network.NetworkClassLoaderTest"</span>;</span><br><span class="line">            Class clazz = networkClassLoader.loadClass(classname);</span><br><span class="line">            System.out.println(clazz.getClassLoader());</span><br><span class="line">            Object obj = clazz.newInstance();</span><br><span class="line">            Method method = clazz.getDeclaredMethod(<span class="string">"sayHello"</span>);</span><br><span class="line">            method.invoke(obj, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step5. 执行ClassLoaderTest的main方法</p>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.github.xch168.classloadertest.NetworkClassLoader@<span class="number">214</span>c265e</span><br><span class="line">Hello from network <span class="class"><span class="keyword">class</span>.</span></span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/itachi85/article/details/78088701" target="_blank" rel="noopener">Android解析ClassLoader（一）Java中的ClassLoader</a></li>
<li><a href="https://blog.csdn.net/briblue/article/details/54973413" target="_blank" rel="noopener">一看你就懂，超详细java中的ClassLoader详解</a></li>
<li><a href="https://blog.csdn.net/xyang81/article/details/7292380" target="_blank" rel="noopener">深入分析Java ClassLoader原理</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> ClassLoader </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用FindBugs插件检查Android代码]]></title>
      <url>https://xch168.github.io/2018/12/29/android-findbugs-plugin-usage/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>FindBugs 是一个静态分析工具，它检查类或者 JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题。有了静态分析工具，就可以在不实际运行程序的情况对软件进行分析。不是通过分析类文件的形式或结构来确定程序的意图，而是通过使用 Visitor 模式。</p>
</blockquote>
<a id="more"></a>
<h3 id="FindBugs—代码缺陷分类"><a href="#FindBugs—代码缺陷分类" class="headerlink" title="FindBugs—代码缺陷分类"></a>FindBugs—代码缺陷分类</h3><ul>
<li><code>Bad practice</code>：不好的做法，代码违反了公认的最佳实践标准；</li>
<li><code>Malicious code vulnerability</code>：恶意的代码漏洞；</li>
<li><code>Correctness</code>：正确性；</li>
<li><code>Performance</code>：潜在的性能问题；</li>
<li><code>Security</code>：安全性；</li>
<li><code>Dodgy code</code>：糟糕的代码，FindBugs团队认为该类型下的问题代码导致bug的可能性很高；</li>
<li>&nbsp;<code>Experimental</code>：实验；</li>
<li><code>Multithreaded correctness</code>：关注于同步和多线程问题；</li>
<li><code>Internationalization</code>：国际化。</li>
</ul>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><img src="/2018/12/29/android-findbugs-plugin-usage/install-plugin.png" alt="install-plugin"></p>
<p><img src="/2018/12/29/android-findbugs-plugin-usage/find-bugs-pane.png" alt="find-bugs-pane"></p>
<h3 id="配置过滤文件"><a href="#配置过滤文件" class="headerlink" title="配置过滤文件"></a>配置过滤文件</h3><p>Step1：在项目根目录下创建<code>findbugs-exclude.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">FindBugsFilter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- http://stackoverflow.com/questions/7568579/eclipsefindbugs-exclude-filter-files-doesnt-work --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Match</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Or</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Class</span> <span class="attr">name</span>=<span class="string">"~.*\.R\$.*"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Class</span> <span class="attr">name</span>=<span class="string">"~.*\.Manifest\$.*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Or</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Match</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FindBugsFilter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Step2：配置</p>
<p><img src="/2018/12/29/android-findbugs-plugin-usage/find-bugs-exclude.png" alt="find-bugs-exclude"></p>
<h3 id="检测代码"><a href="#检测代码" class="headerlink" title="检测代码"></a>检测代码</h3><p><strong>检测入口</strong>：</p>
<ul>
<li>FindBugs面板</li>
</ul>
<p><img src="/2018/12/29/android-findbugs-plugin-usage/find-bugs-entry1.png" alt="find-bugs-entry1"></p>
<ul>
<li>菜单列表</li>
</ul>
<p><img src="/2018/12/29/android-findbugs-plugin-usage/find-bugs-entry2.png" alt="find-bugs-entry2"></p>
<p><strong>检测结果</strong>：</p>
<p><img src="/2018/12/29/android-findbugs-plugin-usage/find-bugs-result.png" alt="find-bugs-result"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://findbugs.sourceforge.net/" target="_blank" rel="noopener">FindBugs Official</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-findbug1/index.html?mhq=findbugs&amp;mhsrc=ibmsearch_a" target="_blank" rel="noopener">FindBugs，第 1 部分: 提高代码质量</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-findbug2/index.html?mhq=findbugs&amp;mhsrc=ibmsearch_a" target="_blank" rel="noopener">FindBugs，第 2 部分: 编写自定义检测器</a></li>
<li><a href="https://www.jianshu.com/p/bc27857c89e4" target="_blank" rel="noopener">代码缺陷扫描神器——FindBugs</a></li>
<li><a href="https://blog.csdn.net/u013132758/article/details/70187846" target="_blank" rel="noopener">AndroidStudio 插件 之 Findbugs 安装与简单使用教程</a></li>
<li><a href="https://zdran.com/20180717.html" target="_blank" rel="noopener">FindBugs 常见错误类型整理</a></li>
<li><a href="https://blog.csdn.net/jdsjlzx/article/details/21472253" target="_blank" rel="noopener">FindBugs规则整理</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Travis CI的Android项目自动构建流程]]></title>
      <url>https://xch168.github.io/2018/12/15/android-travis-ci/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>编写代码只是软件开发的一小部分，更多的时间往往花在构建（build）和测试（test）。</p>
<p>为了提高软件开发的效率，构建和测试的自动化工具层出不穷，Travis就是这类工具，用好这个工具不仅可以提高效率，还能使开发流程更可靠和专业。</p>
</blockquote>
<a id="more"></a>
<h3 id="CI简介"><a href="#CI简介" class="headerlink" title="CI简介"></a>CI简介</h3><blockquote>
<p>CI（Continuous Integration，持续集成）：指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码集成到主干。</p>
<p>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p>
</blockquote>
<h3 id="Travis-CI简介"><a href="#Travis-CI简介" class="headerlink" title="Travis-CI简介"></a>Travis-CI简介</h3><blockquote>
<p>Travis CI提供的是持续集成服务。它绑定GitHub上面的项目，只要有新的代码，就会自动抓取，然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</p>
</blockquote>
<blockquote>
<p>Travis CI与Github结合比较紧密，对GitHub上的开源Repo是免费的，私有Repo收费。</p>
</blockquote>
<p>免费Travis-CI：<a href="https://travis-ci.org" target="_blank" rel="noopener">https://travis-ci.org</a></p>
<p>收费Travis-CI：<a href="https://travis-ci.com" target="_blank" rel="noopener">https://travis-ci.com</a></p>
<h3 id="启用Travis-CI"><a href="#启用Travis-CI" class="headerlink" title="启用Travis CI"></a>启用Travis CI</h3><p>Step1：使用GitHub账户授权登录Travis CI。</p>
<p>Step2：同步GitHub上的库，对指定的库启用Travis CI</p>
<p><img src="/2018/12/15/android-travis-ci/enable_travis_ci.png" alt="enable-travis-ci"></p>
<h3 id="配置-travis-yml"><a href="#配置-travis-yml" class="headerlink" title="配置.travis.yml"></a>配置.travis.yml</h3><blockquote>
<p>Travis要求项目的根目录下面，必须有一个<code>.travis.yml</code>文件。这是配置文件，指定了Travis的行为。该文件必须保存在GitHub仓库里面，一旦代码仓库有新的Commit，Travis就会去找这个文件，执行里面的命令。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">android</span></span><br><span class="line"><span class="attr">jdk:</span> <span class="string">oraclejdk8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启基于容器的Travis CI任务，让编译效率更高</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">android:</span></span><br><span class="line"><span class="attr">  components:</span></span><br><span class="line">    <span class="comment"># 构建项目所用的BuildTools版本</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">build-tools-28.0.3</span></span><br><span class="line">    <span class="comment"># 用来编译项目的SDK版本</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">android-28</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加Android Support Repository组件</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">extra-android-m2repository</span></span><br><span class="line">    <span class="comment"># 添加Support Library组件</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">extra-android-support</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">gradlew</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="comment"># 生成release apk包</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">./gradlew</span> <span class="string">assembleRelease</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Travis生命周期</strong>：</p>
<ol>
<li>before_install</li>
<li>install：安装依赖</li>
<li>before_script</li>
<li>script：运行脚本</li>
<li>aftersuccess or afterfailure：script阶段执行成功或失败时执行</li>
<li>[OPTIONAL] before_deploy</li>
<li>[OPTIONAL] deploy：部署</li>
<li>after_script</li>
</ol>
</blockquote>
<h3 id="保证自动化构建的密码和证书安全"><a href="#保证自动化构建的密码和证书安全" class="headerlink" title="保证自动化构建的密码和证书安全"></a>保证自动化构建的密码和证书安全</h3><blockquote>
<p>Android项目发布需要证书文件和密码，将原始正常和密码放入到代码库是很不安全的。</p>
<p>Travis CI为此提供了两种解决方案：</p>
<ol>
<li>对敏感信息、密码、证书等进行对称加密，在CI构建环境时进行解密；</li>
<li>将密码等通过Travis CI的控制台设置为构建时的环境变量。</li>
</ol>
</blockquote>
<h4 id="加密签名证书"><a href="#加密签名证书" class="headerlink" title="加密签名证书"></a>加密签名证书</h4><blockquote>
<p>因为Travis CI控制台无法上传文件，因此涉及到文件加密的部分，选择第一种方案。</p>
</blockquote>
<p>Step1：本地安装Travis CLI命令行工具</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure>
<p>Step2：命令行登录Travis（第一次登录才要），并输入GitHub的用户名和密码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis login --org</span><br></pre></td></tr></table></figure>
<p>Step3：进入项目根目录，加密证书</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt-file xch_android.jks --add</span><br></pre></td></tr></table></figure>
<p><strong>命令执行结果</strong>：</p>
<ol>
<li><p>在Travis CI控制台自动生成一对秘钥，形如：<code>encrypted_d71df9144721_iv</code>、<code>encrypted_d71df9144721_key</code></p>
<p><img src="/2018/12/15/android-travis-ci/secret_key.png" alt="secret_key"></p>
</li>
<li><p>基于秘钥通过<code>openssl</code>对文件进行加密，并在根目录生成<code>xch_android.jks.enc</code>文件</p>
</li>
<li><p>在<code>.travis.yml</code>中自动生成Travis CI环境下解密文件的配置。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="bullet">-K</span> <span class="string">$encrypted_d71df9144721_key</span> <span class="bullet">-iv</span> <span class="string">$encrypted_d71df9144721_iv</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">in</span> <span class="string">xch_android.jks.enc</span> <span class="bullet">-out</span> <span class="string">xch_android.jks</span> <span class="bullet">-d</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="加密证书密码"><a href="#加密证书密码" class="headerlink" title="加密证书密码"></a>加密证书密码</h4><p>Step1. 在Travis CI控制台配置<code>KEYSTORE_PASS</code>、<code>ALIAS_NAME</code>、<code>ALIAS_PASS</code>三个环境变量。</p>
<p><img src="/2018/12/15/android-travis-ci/sign_key.png" alt="sign_key"></p>
<p>Step2. 在项目的根目录下创建一个名为<code>keystore.properties</code>文件（用于本地命令打包），并包含以下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KEYSTORE_PASS=myStorePassword</span><br><span class="line">ALIAS_NAME=myKeyAlias</span><br><span class="line">ALIAS_PASS=myKeyPassword</span><br></pre></td></tr></table></figure>
<p>Step3. 在<code>app</code> module 的<code>build.gradle</code>配置签名信息，<code>System.getenv()</code>用来获取Travis CI控制台配置的变量。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载本地keystore.properties中的签名配置</span></span><br><span class="line"><span class="keyword">def</span> keyPropertiesFile = rootProject.file(<span class="string">"keystore.properties"</span>)</span><br><span class="line"><span class="keyword">def</span> keyProperties = <span class="keyword">new</span> Properties()</span><br><span class="line"><span class="keyword">if</span> (keyPropertiesFile.exists()) &#123;</span><br><span class="line">    keyProperties.load(<span class="keyword">new</span> FileInputStream(keyPropertiesFile))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.github.xch168.androidtravisci"</span></span><br><span class="line">        minSdkVersion <span class="number">16</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile     file(<span class="string">"../xch_android.jks"</span>)</span><br><span class="line">            storePassword keyProperties.containsKey(<span class="string">"KEYSTORE_PASS"</span>) ? keyProperties['KEYSTORE_PASS'] : System.getenv(<span class="string">"KEYSTORE_PASS"</span>)</span><br><span class="line">            keyAlias      keyProperties.containsKey(<span class="string">"ALIAS_NAME"</span>)    ? keyProperties['ALIAS_NAME']    : System.getenv(<span class="string">"ALIAS_NAME"</span>)</span><br><span class="line">            keyPassword   keyProperties.containsKey(<span class="string">"ALIAS_PASS"</span>)    ? keyProperties['ALIAS_PASS']    : System.getenv(<span class="string">"ALIAS_PASS"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置缓存机制"><a href="#配置缓存机制" class="headerlink" title="配置缓存机制"></a>配置缓存机制</h3><blockquote>
<p>Travis CI在每次构建完成后，就会删除所有文件，设置缓存机制，可以保证规定的缓存文件不需要每次下载，提高每次构建的速度；但是如果在更好的基础配置的情况（比如更新Gradle版本等，建议先清除缓存在跑CI）。</p>
</blockquote>
<p>在<code>.travis.yml</code>文件添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_cache:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">rm</span> <span class="bullet">-f</span> <span class="string">$HOME/.gradle/caches/modules-2/modules-2.lock</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">rm</span> <span class="bullet">-fr</span> <span class="string">$HOME/.gradle/caches/*/plugin-resolution/</span></span><br><span class="line"><span class="attr">cache:</span>                   <span class="comment">#指定缓存目录</span></span><br><span class="line"><span class="attr">directories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">$HOME/.gradle/caches/</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">$HOME/.gradle/wrapper/</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">$HOME/.android/build-cache</span></span><br></pre></td></tr></table></figure>
<p>可以在后台手动删除Travis CI Cache：</p>
<p><img src="/2018/12/15/android-travis-ci/travis_cache.png" alt="travis_cache"></p>
<h3 id="Travis-CI自动发布apk到GitHub-Release"><a href="#Travis-CI自动发布apk到GitHub-Release" class="headerlink" title="Travis CI自动发布apk到GitHub Release"></a>Travis CI自动发布apk到GitHub Release</h3><p>Step1. 执行travis命令自动生成deploy配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis setup releases</span><br></pre></td></tr></table></figure>
<p><img src="/2018/12/15/android-travis-ci/travis_setup.png" alt="travis_setup"></p>
<p>命令执行完后会自动在<code>.travis.yml</code>添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">releases</span></span><br><span class="line"><span class="attr">  api_key:</span></span><br><span class="line"><span class="attr">    secure:</span> <span class="string">b7dhz7j5tY73qbQo2GNccev7NgI6BNWNeEpEfmLTxRZ7DJptxtQuJIHF026zhHtXfRom/pSXw7qlRJXamPWl7Bc1i1lUNKX7Mdt3Fo7Z70ZAyT/6vak3EGlKqDU7Ta96MOB2+5+2nQ7nlTX4kkkeObSTbD6py4eUzktoxsPSwtjiWrq7KM4KgcJTAEGnZx4LJdFm6pgE3drkbN83J0ZP3fT7sf+5Ggv4WLa8y3l/gM3rQ0tARebDo4OuigJOmknOfcxkiAlTtVt1qw1STMaW4H/M47K1mSvQK9DxSHUCD7ngvxEJlUMtqvYSIqQItyT7D8SvDxUqpZZM6y6qAcp+q5qrnA/uC7Qa3kju3skH1XBXyA20TN/pLYKk1yuH7TLg9W+512Pmgtpr4AiZayChnNn4morhhhncsdnQf1T6ziWUNGHmMK8QcUzjBdZHOVsNHGUuaGk4hOPeTRi7ozHYMnNF1E8HJEhtLf7/BHH4o17x5wI2QuSmgwqlCbhAYEwL8m9ZtyJ7saqimGo6m37XfBlomBgaTMrCDIybqOABjPxASlMVRh84XZeeAHHLgjSRMoP2cb+lksiyhO2TsCOvQEOmofFcjj4+iN+qIynPMb3bonuce/iD9nNC2cusibYaIrr1+r2VWE61EdIiLlamw99fFT1VZtliJuJe9tugMgA=</span></span><br><span class="line"><span class="attr">  file:</span> <span class="string">app/build/outputs/apk/app-release.apk</span></span><br><span class="line">  <span class="comment"># 这句手动添加</span></span><br><span class="line"><span class="attr">  skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">xch168/AndroidTravisCI</span></span><br><span class="line">    <span class="comment"># 这句手动添加</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：</p>
<ul>
<li><code>provider</code>：发布目标为GitHub Release，除了GitHub外，Travis CI还支持发布到AWS、Google App Engine等数十种provider。</li>
<li><code>secure</code>：是加密后的GitHub Access Token。</li>
<li><code>file</code>：发布的文件。</li>
<li><code>skip_cleanup</code>：默认情况下Travis CI在完成编译后会清除所有生成的文件，因此要将<code>skip_cleanup</code>设置为<code>true</code>来忽略此操作。</li>
<li><code>on</code>：发布的时机，这里配置为<code>tags: true</code>，即只在有<code>tag</code>的情况才发布。</li>
</ul>
<p>Step2: 打<code>tag</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v0.0.1-alpha.1 -m <span class="string">"这里是Tag注释，说清楚这个版本的主要改动，也可以省略-m参数直接写长文本"</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>
<p>Step3: 自动化构建、部署</p>
<ul>
<li>当打完tag并推送到GitHub仓库时，就会触发Travis CI任务。</li>
</ul>
<p><img src="/2018/12/15/android-travis-ci/travis_ci_build.png" alt="travis_ci_build"></p>
<ul>
<li><p>当Travis CI任务执行成功后，在GitHub就能看到发布的apk。</p>
<p><img src="/2018/12/15/android-travis-ci/travis_github.png" alt="travis_github"></p>
</li>
</ul>
<h3 id="上传apk到蒲公英"><a href="#上传apk到蒲公英" class="headerlink" title="上传apk到蒲公英"></a>上传apk到蒲公英</h3><blockquote>
<p>蒲公英是APP内测分发平台，提供免费的APP内测分发托管，不但允许游客下载，还提供了二维码，下载速度快。</p>
</blockquote>
<p>Step1. 使用GitHub授权登录<a href="https://www.pgyer.com/user/login" target="_blank" rel="noopener">https://www.pgyer.com/user/login</a></p>
<p>Step2. 获取API Key</p>
<p><img src="/2018/12/15/android-travis-ci/pgyer_api_key.png" alt="pgyer_api_key"></p>
<p>Step3. 将获取的API Key配置到Travis CI的环境变量<code>PGYER_API_KEY</code>：</p>
<p><img src="/2018/12/15/android-travis-ci/pgyer_api_key_env.png" alt="pgyer_api_key_env"></p>
<p>Step4. 在<code>.travis.yml</code>文件中，添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加蒲公英上传脚本</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cd</span> <span class="string">$TRAVIS_BUILD_DIR</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">wget</span> <span class="bullet">-c</span> <span class="attr">https://raw.githubusercontent.com/Pgyer/TravisFile/master/pgyer_upload.sh</span></span><br><span class="line"><span class="bullet"> -</span><span class="string">O</span> <span class="string">pgyer_upload.sh</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">pgyer_upload.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在apk上传到GitHub后，使用蒲公英的上传脚本将apk上传到蒲公英</span></span><br><span class="line"><span class="attr">after_deploy:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">set</span> <span class="bullet">-e</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">$TRAVIS_BUILD_DIR/pgyer_upload.sh</span> <span class="string">"$&#123;TRAVIS_BUILD_DIR&#125;/app/build/outputs/apk/release/app-release.apk"</span> <span class="string">$PGYER_API_KEY</span></span><br></pre></td></tr></table></figure>
<p>Step5. 打完tag，Travis CI自动构建后，将在蒲公英的控制台看到上传的apk</p>
<p><img src="/2018/12/15/android-travis-ci/pgyer_apk.png" alt="pgyer_apk"></p>
<h3 id="上传apk到fir-im"><a href="#上传apk到fir-im" class="headerlink" title="上传apk到fir.im"></a>上传apk到fir.im</h3><blockquote>
<p>fir.im和蒲公英的一样，都是免费的应用内测分发平台。</p>
</blockquote>
<p>Step1. 登录<a href="https://fir.im/" target="_blank" rel="noopener">https://fir.im/</a></p>
<p>Step2. 获取API Token。</p>
<p><img src="/2018/12/15/android-travis-ci/firim_api_token.png" alt="firim_api_token"></p>
<p>Step3. 将获取的API Token配置到Travis CI的环境变量<code>FIR_API_TOKEN</code>。</p>
<p>Step4. 在<code>.travis.yml</code>文件中，添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">gem</span> <span class="string">install</span> <span class="string">fir-cli</span></span><br><span class="line"><span class="attr">after_deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">fir</span> <span class="string">p</span> <span class="string">app/build/outputs/apk/release/app-release.apk</span> <span class="bullet">-T</span> <span class="string">$FIR_API_TOKEN</span> <span class="bullet">-c</span> <span class="string">"`git cat-file tag $TRAVIS_TAG`"</span></span><br></pre></td></tr></table></figure>
<p>Step5. 打完tag，Travis CI自动构建后，将在fir.im的控制台看到上传的apk</p>
<p><img src="/2018/12/15/android-travis-ci/fir_apk.png" alt="fir_apk"></p>
<h3 id="发送完毕后自动发送邮件通知"><a href="#发送完毕后自动发送邮件通知" class="headerlink" title="发送完毕后自动发送邮件通知"></a>发送完毕后自动发送邮件通知</h3><blockquote>
<p>虽然Travis CI也有邮件通知功能，但是不能定制模板，通知内容仅仅为提示CI运行的结果，显然更适合开发人员。我们希望最终能以更友好的方式通知团队成员，同时考虑到邮件送达率，可优先选择 <a href="https://www.mysubmail.com" target="_blank" rel="noopener">Submail</a>、<a href="https://sendcloud.sohu.com/" target="_blank" rel="noopener">SendCloud</a>等国内邮件发送服务。</p>
</blockquote>
<p>这里以<a href="https://www.mysubmail.com" target="_blank" rel="noopener">Submail</a>为例：</p>
<p>Step1. 注册登录<a href="https://www.mysubmail.com" target="_blank" rel="noopener">Submail</a></p>
<p>Step2. 添加发信域名（这需要有自己的域名）</p>
<p><img src="/2018/12/15/android-travis-ci/send_domain.png" alt="send_domain"></p>
<p>Step3. 创建APPID，并将APPKEY配置到Travis CI控制台的环境变量<code>SUBMAIL_SIGN</code>。</p>
<p><img src="/2018/12/15/android-travis-ci/create_appid.png" alt="create_appid"></p>
<p>Step4. 创建一封触发式邮件模板</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@var(TRAVIS_REPO_SLUG)新版本@var(TRAVIS_TAG)已经发布了，功能更新：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@var(TAG_DESCRIPTION)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">去下载：</span><br><span class="line"></span><br><span class="line">https://fir.im/gkq1</span><br></pre></td></tr></table></figure>
<p>Step5. 配置<code>.travis.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">after_deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">curl</span> <span class="bullet">-d</span> <span class="string">"appid=14017&amp;to=xucanhui168@gmail.com&amp;subject=[自动通知] 安卓新版本$TRAVIS_TAG发布&amp;project=Cpyvk2&amp;signature=$SUBMAIL_SIGN&amp;vars=&#123;\"TRAVIS_REPO_SLUG\":\"$TRAVIS_REPO_SLUG\",\"TRAVIS_TAG\":\"$TRAVIS_TAG\",\"TAG_DESCRIPTION\":\"$(git cat-file tag $TRAVIS_TAG | awk 1 ORS='&lt;br&gt;')\"&#125;"</span> <span class="attr">https://api.submail.cn/mail/xsend.json</span></span><br></pre></td></tr></table></figure>
<p><img src="/2018/12/15/android-travis-ci/project.png" alt="project"></p>
<p>Step5. 运行结果</p>
<p><img src="/2018/12/15/android-travis-ci/mail.png" alt="mail"></p>
<p><a href="https://github.com/xch168/AndroidTravisCI" target="_blank" rel="noopener">本文Demo</a></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://avnpc.com/pages/android-auto-deploy-workflow-on-travis-ci" target="_blank" rel="noopener"><a href="https://avnpc.com/p/197" target="_blank" rel="noopener">基于Travis CI搭建Android自动打包发布工作流</a></a></li>
<li><a href="http://kescoode.com/travis-ci-android-github-release/" target="_blank" rel="noopener">用TRAVIS CI给ANDROID项目部署GITHUB RELEASE</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html" target="_blank" rel="noopener">持续集成服务 Travis CI 教程</a></li>
<li><a href="https://www.jianshu.com/p/2935b96d3059" target="_blank" rel="noopener">如何给你github上的Android项目添加travis-ci</a></li>
<li><a href="https://juejin.im/entry/57070b048ac247004c0e3d8f" target="_blank" rel="noopener">如何简单入门使用 Travis-CI 持续集成</a></li>
<li><a href="https://fandean.github.io/blog/2017/07/31/%E4%BD%BF%E7%94%A8Travis-CI%E6%9E%84%E5%BB%BAAndroid%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0GitHub-Release/" target="_blank" rel="noopener">使用Travis-CI构建Android项目并自动打包部署到GitHub-Release</a></li>
<li><a href="https://www.jianshu.com/p/6dba7d6f79ff" target="_blank" rel="noopener">基于Travis CI搭建Android持续集成以及自动打包发布流程</a></li>
<li><a href="https://www.jianshu.com/p/745bea00dba7" target="_blank" rel="noopener">Android Travis CI与fir.im、GitHub集成</a></li>
<li><a href="https://www.pgyer.com/doc/view/travis_android" target="_blank" rel="noopener">使用 Travis CI 实现持续集成 (Android)</a></li>
<li><a href="http://blog.fir.im/fir_cli/" target="_blank" rel="noopener">fir-cli 使用说明</a></li>
<li><a href="https://developer.android.com/studio/build/gradle-tips" target="_blank" rel="noopener">Gradle 提示与诀窍</a></li>
<li><a href="https://docs.travis-ci.com/user/languages/android/" target="_blank" rel="noopener">Travis CI Doc</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> CI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Checkstyle规范代码]]></title>
      <url>https://xch168.github.io/2018/12/10/use-checkstyle-for-better-code-style/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>每个团队都会有一套优良统一的代码规范，而规范的检测如果依赖于人工检测就不太现实。</p>
<p><code>checkstyle</code>是一个可以帮我们检查Java代码规范的工具。checkstyle具有很强的配置性。</p>
</blockquote>
<a id="more"></a>
<h3 id="创建checkstyle-xml配置文件"><a href="#创建checkstyle-xml配置文件" class="headerlink" title="创建checkstyle.xml配置文件"></a>创建checkstyle.xml配置文件</h3><blockquote>
<ul>
<li>每个checkstyle配置文件必须包含<code>Checker</code>作为根module；</li>
<li><code>TreeWalker</code> module用来遍历java文件，并定义一些属性；</li>
<li><code>TreeWalker</code> module包含多个子module，用来进行检查规范。</li>
</ul>
</blockquote>
<p><strong>NOTE</strong>：将<code>checkstyle.xml</code>放在项目的根目录。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE module PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"</span></span><br><span class="line"><span class="meta">    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"Checker"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"charset"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文件要以空行结尾--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NewlineAtEndOfFile"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--限定文件的最大行数：默认为2000行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"FileLength"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不允许使用文件制表符（'\t'）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"FileTabCharacter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--正则表达式单行匹配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RegexpSingleline"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"\s+$"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"Line has trailing spaces."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--'for' 和 'if'后需要有空格--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RegexpSingleline"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"^\s*(for|if)\b[^ ]"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"Space needed before opening parenthesis."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--for中的`;`后应有空格--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RegexpSingleline"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"^\s*for \(.*?([^ ]:|:[^ ])"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"Space needed around ':' character."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TreeWalker"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Java doc风格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"JavadocStyle"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 命名规范检查                  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- See http://checkstyle.sf.net/config_naming.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--常量的命名规范："^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ConstantName"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--局部final变量命名规范："^[a-z][a-zA-Z0-9]*$"--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LocalFinalVariableName"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--局部变量命名规范："^[a-z][a-zA-Z0-9]*$"--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LocalVariableName"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--成员变量命名规范：以m开头--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MemberName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"^m[A-Z][a-zA-Z0-9]*$"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--方法名规范--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MethodName"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--参数命名规范--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ParameterName"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--static变量命名规范--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"StaticVariableName"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--类型名称规范--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TypeName"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 导包检查                              --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- See http://checkstyle.sf.net/config_import.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--避免通配符导入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AvoidStarImport"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非法导入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"IllegalImport"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--多余导入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RedundantImport"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--未使用导入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"UnusedImports"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processJavadoc"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 度量检查                    --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- See http://checkstyle.sf.net/config_sizes.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--代码行的长度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LineLength"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--方法的长度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MethodLength"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 空格检查                               --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- See http://checkstyle.sf.net/config_whitespace.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--范型标记空格：如：List &lt; Integer &gt; x = new ArrayList &lt; Integer &gt; (); 这句代码符合规范--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"GenericWhitespace"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空格不能作为for循环迭代器空位置的填充符--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EmptyForIteratorPad"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--方法左右括号和参数之间不能有空格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MethodParamPad"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--检查指定标记之后没有空格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NoWhitespaceAfter"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定标记之前没有空格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NoWhitespaceBefore"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--运算符换行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"OperatorWrap"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--左右()之间不能有空格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ParenPad"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--类型转换后应有空格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TypecastParenPad"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定标记之后有空格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"WhitespaceAfter"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定标记周围有空格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"WhitespaceAround"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN,</span></span></span><br><span class="line"><span class="tag"><span class="string">          COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH,</span></span></span><br><span class="line"><span class="tag"><span class="string">          LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,</span></span></span><br><span class="line"><span class="tag"><span class="string">          LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,</span></span></span><br><span class="line"><span class="tag"><span class="string">          MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST,</span></span></span><br><span class="line"><span class="tag"><span class="string">          SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 修饰符检查                                   --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- See http://checkstyle.sf.net/config_modifiers.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--修饰符的顺序：1. public 2. protected 3. private 4. abstract 5. static 6. final 7. transient 8. volatile 9. synchronized 10. native 11. strictfp--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ModifierOrder"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--多余的修饰符--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RedundantModifier"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 代码块检查                 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- See http://checkstyle.sf.net/config_blocks.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--避免嵌套代码块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AvoidNestedBlocks"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空代码块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EmptyBlock"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--需要花括号：可以检查do、else、if、for、while等关键字所控制的代码块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NeedBraces"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--左花括号位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LeftCurly"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--右花括号位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RightCurly"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 代码检查              --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- See http://checkstyle.sf.net/config_coding.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--module name="AvoidInlineConditionals"/--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--重载equals方法，而没有重写equals(java.lang.Object)方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"CovariantEquals"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--检查空语句--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EmptyStatement"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--避免调用空引用的equals方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EqualsAvoidNull"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--检查覆盖了equals()方法的类是否也覆盖了hashCode()方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EqualsHashCode"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--module name="HiddenField"/--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非法实例化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"IllegalInstantiation"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--module name="InnerAssignment"/--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--module name="MagicNumber"/--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--缺少switch默认分支--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MissingSwitchDefault"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;module name="RedundantThrows"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简化布尔表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SimplifyBooleanExpression"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简化布尔返回值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SimplifyBooleanReturn"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 类设计检查                         --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- See http://checkstyle.sf.net/config_design.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--module name="DesignForExtension"/--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--检查一个只有私有构造器的类是否被声明为final--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"FinalClass"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--隐藏工具类构造器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"HideUtilityClassConstructor"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--接口应当描述为一个类型：定义一个只包含常量，但是没有包含任何方法的接口是不合适的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"InterfaceIsType"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--module name="VisibilityModifier"/--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 其他杂项检查.                   --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- See http://checkstyle.sf.net/config_misc.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--检查数组类型风格：数组括号的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ArrayTypeStyle"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--module name="FinalParameters"/--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--module name="TodoComment"/--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--大写“L”--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"UpperEll"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  让@SuppressWarnings注解可以用在Checkstyle：@SuppressWarnings(&#123;"membername"&#125;) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SuppressWarningsHolder"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置checkstyle"><a href="#配置checkstyle" class="headerlink" title="配置checkstyle"></a>配置checkstyle</h3><p>Step1: 在<code>gradle</code>文件夹下创建一个<code>checkstyle.gradle</code>文件：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'checkstyle'</span></span><br><span class="line"></span><br><span class="line">checkstyle &#123;</span><br><span class="line">    toolVersion = <span class="number">8.13</span></span><br><span class="line">    configFile = rootProject.file(<span class="string">'checkstyle.xml'</span>)</span><br><span class="line">    ignoreFailures = <span class="literal">false</span></span><br><span class="line">    showViolations = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task checkStyle(<span class="string">type:</span> Checkstyle) &#123;</span><br><span class="line">    source = <span class="string">'src/main/java'</span></span><br><span class="line">    include <span class="string">'**/*.java'</span></span><br><span class="line"></span><br><span class="line">    classpath = files()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">afterEvaluate &#123;</span><br><span class="line">    <span class="keyword">if</span> (project.tasks.getByName(<span class="string">"check"</span>)) &#123;</span><br><span class="line">        check.dependsOn(<span class="string">'checkStyle'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step2: 在需要进行代码检查的module中的<code>build.gradle</code>文件中添加：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">from:</span> rootProject.file(<span class="string">'gradle/checkstyle.gradle'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="使用checkstyle"><a href="#使用checkstyle" class="headerlink" title="使用checkstyle"></a>使用checkstyle</h3><p><strong>在终端运行命令</strong>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows</span></span><br><span class="line">gradlew checkStyle</span><br><span class="line"><span class="comment"># Linux or MacOS</span></span><br><span class="line">./gradlew checkStyle</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong>：</p>
<p><img src="/2018/12/10/use-checkstyle-for-better-code-style/check.png" alt="check"></p>
<p><strong>查看检查报告</strong>：</p>
<p><img src="/2018/12/10/use-checkstyle-for-better-code-style/check_report.png" alt="check-report"></p>
<h3 id="git-commit执行checkStyle"><a href="#git-commit执行checkStyle" class="headerlink" title="git commit执行checkStyle"></a>git commit执行checkStyle</h3><blockquote>
<p>为了保证代码库提交的代码都是符合规范的，就必须在<code>git commit</code>前执行<code>checkStyle</code>检查代码，但是如果依赖于人工这是不可靠的，好在有<code>Git Hook</code>可以来帮我们自动完成这项工作。</p>
</blockquote>
<blockquote>
<p>Git Hook简介：Git 能在特定的重要动作发生时触发自定义脚本。这些自定义脚本的放置位置<code>.git/hooks</code>，当用<code>git init</code>初始化一个新库时，git会在<code>.git/hooks</code>目录下放置一些示例脚本。所以为了在执行<code>git commit</code>时触发脚本，可以在<code>.git/hooks</code>创建一个<code>pre-commit</code>脚本。</p>
</blockquote>
<p><code>.git/hooks/pre-commit</code>脚本:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># An example hook script to verify what is about to be committed.</span></span><br><span class="line"><span class="comment"># Called by "git commit" with no arguments.  The hook should</span></span><br><span class="line"><span class="comment"># exit with non-zero status after issuing an appropriate message if</span></span><br><span class="line"><span class="comment"># it wants to stop the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To enable this hook, rename this file to "pre-commit".</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> git rev-parse --verify HEAD &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  against=HEAD</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="comment"># Initial commit: diff against an empty tree object</span></span><br><span class="line">  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">SCRIPT_DIR=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line">SCRIPT_ABS_PATH=`<span class="built_in">cd</span> <span class="string">"<span class="variable">$SCRIPT_DIR</span>"</span>; <span class="built_in">pwd</span>`</span><br><span class="line"><span class="variable">$SCRIPT_ABS_PATH</span>/../../gradlew checkStyle</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0   ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"checkstyle OK"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you want to allow non-ASCII filenames set this variable to true.</span></span><br><span class="line">allownonascii=$(git config --bool hooks.allownonascii)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redirect output to stderr.</span></span><br><span class="line"><span class="built_in">exec</span> 1&gt;&amp;2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cross platform projects tend to avoid non-ASCII filenames; prevent</span></span><br><span class="line"><span class="comment"># them from being added to the repository. We exploit the fact that the</span></span><br><span class="line"><span class="comment"># printable range starts at the space character and ends with tilde.</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$allownonascii</span>"</span> != <span class="string">"true"</span> ] &amp;&amp;</span><br><span class="line">  <span class="comment"># Note that the use of brackets around a tr range is ok here, (it's</span></span><br><span class="line">  <span class="comment"># even required, for portability to Solaris 10's /usr/bin/tr), since</span></span><br><span class="line">  <span class="comment"># the square bracket bytes happen to fall in the designated range.</span></span><br><span class="line">  <span class="built_in">test</span> $(git diff --cached --name-only --diff-filter=A -z <span class="variable">$against</span> |</span><br><span class="line">    LC_ALL=C tr -d <span class="string">'[ -~]\0'</span> | wc -c) != 0</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  cat &lt;&lt;\EOF</span><br><span class="line">Error: Attempt to add a non-ASCII file name.</span><br><span class="line"></span><br><span class="line">This can cause problems <span class="keyword">if</span> you want to work with people on other platforms.</span><br><span class="line"></span><br><span class="line">To be portable it is advisable to rename the file.</span><br><span class="line"></span><br><span class="line">If you know what you are doing you can <span class="built_in">disable</span> this check using:</span><br><span class="line"></span><br><span class="line">  git config hooks.allownonascii <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If there are whitespace errors, print the offending file names and fail.</span></span><br><span class="line"><span class="built_in">exec</span> git diff-index --check --cached <span class="variable">$against</span> --</span><br></pre></td></tr></table></figure>
<p><strong>执行git commit</strong>：</p>
<p><img src="/2018/12/10/use-checkstyle-for-better-code-style/git_commit.png" alt="git-commit"></p>
<p><strong>NOTE</strong>: <code>.git/hooks/pre-commit</code>是不会被提交到远程仓库，所以要把<code>pre-commit</code>脚本放置项目根目录，然后创建复制脚本，这样拿到这份代码的同事只要执行一下命令就可以将<code>pre-commit</code>脚本复制到<code>.git/hooks/</code>目录。</p>
<p><code>init-checkstyle</code>脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows: init-checkstyle.bat</span></span><br><span class="line">copy .\pre-commit .\.git\hooks\</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux or MacOS: init-checkstyle</span></span><br><span class="line">cp ./pre-commit ./.git/hooks/</span><br></pre></td></tr></table></figure>
<h3 id="CheckStyle插件的使用"><a href="#CheckStyle插件的使用" class="headerlink" title="CheckStyle插件的使用"></a>CheckStyle插件的使用</h3><h4 id="安装CheckStyle-IDEA插件"><a href="#安装CheckStyle-IDEA插件" class="headerlink" title="安装CheckStyle-IDEA插件"></a>安装CheckStyle-IDEA插件</h4><p><img src="/2018/12/10/use-checkstyle-for-better-code-style/install_checkstyle-plugin.png" alt="install_checkstyle-plugin"></p>
<h4 id="添加CheckStyle配置文件"><a href="#添加CheckStyle配置文件" class="headerlink" title="添加CheckStyle配置文件"></a>添加CheckStyle配置文件</h4><p><img src="/2018/12/10/use-checkstyle-for-better-code-style/config_checkstyle.png" alt="config_checkstyle"></p>
<h4 id="进行代码检查"><a href="#进行代码检查" class="headerlink" title="进行代码检查"></a>进行代码检查</h4><ul>
<li>在CheckStyle控制面板</li>
</ul>
<p><img src="/2018/12/10/use-checkstyle-for-better-code-style/checkstyle_pane.png" alt="checkstyle_pane"></p>
<ul>
<li>右键检查当前文件</li>
</ul>
<p><img src="/2018/12/10/use-checkstyle-for-better-code-style/check_file.png" alt="check_file"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://droidyue.com/blog/2016/05/22/use-checkstyle-for-better-code-style/" target="_blank" rel="noopener">Android代码规范利器： Checkstyle</a></li>
<li><a href="https://blog.csdn.net/naivor/article/details/64939719" target="_blank" rel="noopener">使用Checkstyle规范代码</a></li>
<li><a href="http://checkstyle.sourceforge.net/" target="_blank" rel="noopener">checkstyle doc</a></li>
<li><a href="https://blog.csdn.net/yang1982_0907/article/details/18086693" target="_blank" rel="noopener">详解CheckStyle的检查规则（共138条规则）</a></li>
<li><a href="http://www.czhzero.com/2016/06/29/checkstyle-githook/" target="_blank" rel="noopener">Java代码规范之CheckStyle + Git Hook</a></li>
<li><a href="https://www.jianshu.com/p/3337e9174c51" target="_blank" rel="noopener">Android项目git+gradle实现commit时checkstyle检查</a></li>
<li><a href="https://blog.csdn.net/u014651216/article/details/52813124" target="_blank" rel="noopener">如何利用工具提高你的Android代码质量(Checkstyle、Findbugs、PMD)</a></li>
<li><a href="http://checkstyle.sourceforge.net/google_style.html" target="_blank" rel="noopener">Google Style</a></li>
<li><a href="https://github.com/square/okhttp/blob/master/checkstyle.xml" target="_blank" rel="noopener">Square Style</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中的transient关键字]]></title>
      <url>https://xch168.github.io/2018/12/01/java-transient/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>在Java中，一个类只要实现Serializable接口，这个类的对象就可以被序列化，这种序列化模式为开发者提供了很多便利，我们可以不必关心具体序列化的过程，只要这个类实现了Serializable接口，这个类的所有属性都会自动序列化。但是有时我们需要让类的某些属性不被序列化，如密码这类信息，为了安全起见，不希望在网络操作中被传输或者持久化到本地。只要在相应的属性前加上<code>transient</code>关键字，就可以实现部分属性不被序列化，该属性的生命周期仅存于调用者的内存中而不会写入到磁盘持久化。</p>
</blockquote>
<a id="more"></a>
<h3 id="transient的使用"><a href="#transient的使用" class="headerlink" title="transient的使用"></a>transient的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransientTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"Github"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"read before Serializable: "</span>);</span><br><span class="line">        System.out.println(<span class="string">"username: "</span> + user.getUsername());</span><br><span class="line">        System.err.println(<span class="string">"password: "</span> + user.getPassword());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"user.txt"</span>));</span><br><span class="line">            os.writeObject(user); <span class="comment">// 将User对象写进文件</span></span><br><span class="line">            os.flush();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"user.txt"</span>));</span><br><span class="line">            user = (User) is.readObject(); <span class="comment">// 从流中读取User的数据</span></span><br><span class="line">            is.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"\nread after Serializable: "</span>);</span><br><span class="line">            System.out.println(<span class="string">"username: "</span> + user.getUsername());</span><br><span class="line">            System.err.println(<span class="string">"password: "</span> + user.getPassword());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1234567890L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong>：</p>
<p><img src="/2018/12/01/java-transient/runResult.png" alt="runResult"></p>
<h3 id="transient修饰静态变量"><a href="#transient修饰静态变量" class="headerlink" title="transient修饰静态变量"></a>transient修饰静态变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransientTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"Github"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"read before Serializable: "</span>);</span><br><span class="line">        System.out.println(<span class="string">"username: "</span> + user.getUsername());</span><br><span class="line">        System.err.println(<span class="string">"password: "</span> + user.getPassword());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"user.txt"</span>));</span><br><span class="line">            os.writeObject(user); <span class="comment">// 将User对象写进文件</span></span><br><span class="line">            os.flush();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 在反序列化前盖板username的值</span></span><br><span class="line">            user.setUsername(<span class="string">"Tom"</span>);</span><br><span class="line"></span><br><span class="line">            ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"user.txt"</span>));</span><br><span class="line">            user = (User) is.readObject(); <span class="comment">// 从流中读取User的数据</span></span><br><span class="line">            is.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"\nread after Serializable: "</span>);</span><br><span class="line">            System.out.println(<span class="string">"username: "</span> + user.getUsername());</span><br><span class="line">            System.err.println(<span class="string">"password: "</span> + user.getPassword());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1234567890L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong>：</p>
<p><img src="/2018/12/01/java-transient/static.png" alt="static"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</li>
<li>transient关键字只能修饰变量，而不能修饰方法和类。<strong>本地变量是不能被transient关键字修饰的。</strong>变量如果是用户自定义类变量，则该类需要实现Serializable接口。</li>
<li>一个<strong>静态变量</strong>不管是否被transient修饰，均不能被序列化。</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://www.cnblogs.com/lanxuezaipiao/p/3369962.html" target="_blank" rel="noopener">Java transient关键字使用小记</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中的序列化：Parcelable和Serializable]]></title>
      <url>https://xch168.github.io/2018/11/30/android-parcelable-serializable/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>序列化：将一个对象转换成<code>可存储</code>或<code>可传输</code>的状态。</p>
</blockquote>
<a id="more"></a>
<h3 id="Parcelable和Serializable的区别"><a href="#Parcelable和Serializable的区别" class="headerlink" title="Parcelable和Serializable的区别"></a>Parcelable和Serializable的区别</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><blockquote>
<p>Serializable的作用是为了保存对象的属性到本地文件、数据库、网络流、rmi以方便数据传输，当然这种传输可以是程序内的也可以是两个程序间的。</p>
<p>Parcelable的设计初衷是因为Serializable效率过慢，为了在程序内不同组件间以及不同Android程序间(AIDL)高效的传输数据而设计，这些数据仅在内存中存在，Parcelable是通过IBinder通信的消息的载体。</p>
</blockquote>
<h4 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h4><ul>
<li>在内存的使用中，Parcelable的性能方面要强于Serializable；</li>
<li>Serializable序列化操作的时候会产生大量的临时变量(原因是使用了反射机制)，从而导致GC的频繁调用，因而性能比Parcelable差；</li>
<li>Parcelable是以IBinder作为信息载体的。在内存上的开销比较小，因此内存直接进行数据传递的时候，Android推荐使用Parcelable；</li>
<li>在读写数据的时候，Parcelable是在内存中直接进行读写，而Serializable是通过IO流的形式将数据写入到硬盘上。</li>
</ul>
<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><blockquote>
<p>Parcelable的性能比Serializable好，在内存开销方面较小，所以在内存间数据传输时推荐使用Parcelable，如Activity间传输数据，而Serializable可将数据持久化方便保存，所以在需要保存或网络传输数据时选择Serializable，因为Android不同版本Parcelable可能不同，所以不推荐使用Parcelable进行数据持久化。</p>
</blockquote>
<h3 id="Serializable的使用"><a href="#Serializable的使用" class="headerlink" title="Serializable的使用"></a>Serializable的使用</h3><blockquote>
<p>对于Serializable的使用，类只需要实现Serializable接口。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java的序列化机制是通过判断类的serialVersionUID来验证版本一致性的。</span></span><br><span class="line"><span class="comment">     * 在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，</span></span><br><span class="line"><span class="comment">     * 如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常，即是InvalidCastException。</span></span><br><span class="line"><span class="comment">     * (如果没有显示定义，Java序列化机制会根据编译的Class自动生成一个serialVersionUID做为序列化版本比较用，如果Class文件没有发生变化，则serialVersionUID不变)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">123456789L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Parcelable的使用"><a href="#Parcelable的使用" class="headerlink" title="Parcelable的使用"></a>Parcelable的使用</h3><blockquote>
<p>Parcelable的使用，需要实现<code>writeToParcel</code>、<code>describeContents</code>函数以及静态的<code>CREATOR</code>变量。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(<span class="keyword">this</span>.uid);</span><br><span class="line">        dest.writeString(<span class="keyword">this</span>.userName);</span><br><span class="line">        dest.writeInt(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">User</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = in.readString();</span><br><span class="line">        <span class="keyword">this</span>.userName = in.readString();</span><br><span class="line">        <span class="keyword">this</span>.age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;User&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;User&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(source);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> User[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/ljx19900116/article/details/41699593" target="_blank" rel="noopener">Parcelable和Serializable的作用、效率、区别及选择</a></li>
<li><a href="https://greenrobot.me/devpost/android-parcelable-serializable/" target="_blank" rel="noopener">Android系统中Parcelable和Serializable的区别</a></li>
<li><a href="https://www.jianshu.com/p/a60b609ec7e7" target="_blank" rel="noopener">序列化Serializable和Parcelable的理解和区别</a></li>
<li><a href="https://www.cnblogs.com/yezhennan/p/5527506.html" target="_blank" rel="noopener">Android中Serializable和Parcelable序列化对象详解</a></li>
<li><a href="https://developer.android.com/reference/java/io/Serializable" target="_blank" rel="noopener">Serializable</a></li>
<li><a href="https://developer.android.com/reference/android/os/Parcelable" target="_blank" rel="noopener">Parcelable</a></li>
<li><a href="https://www.cnblogs.com/duanxz/p/3511695.html" target="_blank" rel="noopener">java类中serialversionuid 作用 是什么?</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android6.0运行时权限处理]]></title>
      <url>https://xch168.github.io/2018/11/23/android-6-0-permission/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>从Android6.0（API23）开始，用户可以在应用运行时向其授予权限，而不是在应用安装时授予。</p>
<p>在Android6.0以前，应用安装会给出应用声明的权限列表，用户如果要继续安装，就得接受全部的权限，让用户很无奈；</p>
<p>从Android6.0开始的运行时权限，让用户可以对应用的功能进行更多的控制，例如，用户可以选择为相机应用提供相机的访问权限，而不提供设备位置的访问权限。用户可以随时进入应用的“Settings”开关权限。</p>
</blockquote>
<a id="more"></a>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><blockquote>
<ul>
<li>如果设备的系统版本是Android5.1或者更低的版本，或者应用的<code>targetSdkVersion</code>为22或更低：如果您在清单中列出了危险权限，则用户必须在安装应用时授予此权限；如果用户不授予此权限，系统根本不会安装应用。</li>
<li>如果设备的系统版本是Android6.0或者更高的版本，或者应用的<code>targetSdkVersion</code>为23或更高：应用必须在清单中列出权限，并且它必须在运行时请求其需要的每项危险权限。用户可以授权或拒绝每项权限，且即使用户拒绝权限请求，应用仍可以继续运行有限的功能。</li>
</ul>
</blockquote>
<h3 id="权限分类"><a href="#权限分类" class="headerlink" title="权限分类"></a>权限分类</h3><blockquote>
<p>系统权限分为两类：正常权限和危险权限</p>
</blockquote>
<h4 id="Normal-Permissions"><a href="#Normal-Permissions" class="headerlink" title="Normal Permissions"></a>Normal Permissions</h4><blockquote>
<p>正常权限，不会直接给用户隐私权带来风险。如果您的应用在其清单列出了正常权限，系统将自动授予该权限。</p>
</blockquote>
<ul>
<li>ACCESS_LOCATION_EXTRA_COMMANDS</li>
<li>ACCESS_NETWORK_STATE</li>
<li>ACCESS_NOTIFICATION_POLICY</li>
<li>ACCESS_WIFI_STATE</li>
<li>BLUETOOTH</li>
<li>BLUETOOTH_ADMIN</li>
<li>BROADCAST_STICKY</li>
<li>CHANGE_NETWORK_STATE</li>
<li>CHANGE_WIFI_MULTICAST_STATE</li>
<li>CHANGE_WIFI_STATE</li>
<li>DISABLE_KEYGUARD</li>
<li>EXPAND_STATUS_BAR</li>
<li>FOREGROUND_SERVICE</li>
<li>GET_PACKAGE_SIZE</li>
<li>INSTALL_SHORTCUT</li>
<li>INTERNET</li>
<li>KILL_BACKGROUND_PROCESSES</li>
<li>MANAGE_OWN_CALLS</li>
<li>MODIFY_AUDIO_SETTINGS</li>
<li>NFC</li>
<li>READ_SYNC_SETTINGS</li>
<li>READ_SYNC_STATS</li>
<li>RECEIVE_BOOT_COMPLETED</li>
<li>REORDER_TASKS</li>
<li>REQUEST_COMPANION_RUN_IN_BACKGROUND</li>
<li>REQUEST_COMPANION_USE_DATA_IN_BACKGROUND</li>
<li>REQUEST_DELETE_PACKAGES</li>
<li>REQUEST_IGNORE_BATTERY_OPTIMIZATIONS</li>
<li>SET_ALARM</li>
<li>SET_WALLPAPER</li>
<li>SET_WALLPAPER_HINTS</li>
<li>TRANSMIT_IR</li>
<li>USE_FINGERPRINT</li>
<li>VIBRATE</li>
<li>WAKE_LOCK</li>
<li>WRITE_SYNC_SETTINGS</li>
</ul>
<h4 id="Dangerous-Permissions"><a href="#Dangerous-Permissions" class="headerlink" title="Dangerous Permissions"></a>Dangerous Permissions</h4><blockquote>
<p>危险权限，会授予应用访问用户机密数据的权限。如果您的应用在清单中列出了危险权限，则用户必须明确批准您的应用使用这些权限。</p>
</blockquote>
<blockquote>
<p>危险权限是按权限组来划分，如果你申请某个危险的权限，假设你的app早已被用户授权了<code>同一组</code>的某个危险权限，那么系统会立即授权，而不需要用户去点击授权。</p>
<p>例如，你的app对<code>READ_CONTACTS</code>已经授权了，当你的app申请<code>WRITE_CONTACTS</code>时，系统会直接授权通过。</p>
<p><strong>NOTE</strong>：对应申请时弹出的Dialog上面的文本说明也是对整个权限组的说明，而不是单个权限。</p>
</blockquote>
<table>
<thead>
<tr>
<th>权限组</th>
<th style="text-align:left">权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>CALENDAR</td>
<td style="text-align:left">READ_CALENDAR<br>WRITE_CALENDAR</td>
</tr>
<tr>
<td>CALL_LOG</td>
<td style="text-align:left">READ_CALL_LOG<br>WRITE_CALL_LOG<br>PROCESS_OUTGOING_CALLS</td>
</tr>
<tr>
<td>CAMERA</td>
<td style="text-align:left">CAMERA</td>
</tr>
<tr>
<td>CONTACTS</td>
<td style="text-align:left">READ_CONTACTS<br>WRITE_CONTACTS<br>GET_ACCOUNTS</td>
</tr>
<tr>
<td>LOCATION</td>
<td style="text-align:left">ACCESS_FINE_LOCATION<br>ACESS_COARSE_LOCATION</td>
</tr>
<tr>
<td>MICROPHONE</td>
<td style="text-align:left">RECORD_AUDIO</td>
</tr>
<tr>
<td>PHONE</td>
<td style="text-align:left">READ_PHONE_STATE<br>READ_PHONE_NUMBERS<br>CALL_PHONE<br>ADD_VOICEMAIL<br>USE_SIP</td>
</tr>
<tr>
<td>SENSORS</td>
<td style="text-align:left">BODY_SENSORS</td>
</tr>
<tr>
<td>SMS</td>
<td style="text-align:left">SEND_SMS<br>RECEIVE_SMS<br>READ_SMS<br>RECEIVE_WAP_PUSH<br>RECEIVE_MMS</td>
</tr>
<tr>
<td>STORAGE</td>
<td style="text-align:left">READ_EXTERNAL_STORAGE<br>WRITE_EXTERNAL_STORAGE</td>
</tr>
</tbody>
</table>
<h3 id="运行时权限处理"><a href="#运行时权限处理" class="headerlink" title="运行时权限处理"></a>运行时权限处理</h3><h4 id="检查权限"><a href="#检查权限" class="headerlink" title="检查权限"></a>检查权限</h4><blockquote>
<p>如果你的应用需要危险权限，则每次执行需要这一权限的操作时都必须检查自己是否具有该权限。因为用户可以自由的开关此权限，所以，即使应用昨天使用了相机，它不能假设自己今天仍具有该权限。</p>
</blockquote>
<p><strong>ContextCompat.checkSelfPermission</strong>：用于检测某个权限是否已经被授予</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> permissionCheck = ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.WRITE_CALENDAR);</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：如果应用具有此权限，方法将返回<code>PackageManager.PERMISSION_GRANTED</code>，并且允许应用可以继续操作。如果应用不具有此权限，方法将返回<code>PackageManager.PERMISSION_DENIED</code>，且应用必须明确向用户要求权限。</p>
<h4 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h4><blockquote>
<p>如果应用尚无所需的权限，则应用必须调用<code>requestPermissions()</code>方法，来请求适当的权限。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActivityCompat.requestPermissions(thisActivity, <span class="keyword">new</span> String[]&#123;Manifest.permission.READ_CONTACTS&#125;, MY_PERMISSIONS_REQUEST_READ_CONTACTS);</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：从第二个参数可以看出，支持一次性请求多个权限，系统会通过对话框逐一询问用户是否授权。</p>
<h4 id="处理权限请求响应"><a href="#处理权限请求响应" class="headerlink" title="处理权限请求响应"></a>处理权限请求响应</h4><blockquote>
<p>当应用请求权限时，系统将向用户显示一个对话框。当用户响应时，系统将调用应用的<code>onRequestPermissionsResult()</code>方法。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String permissions[], <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> MY_PERMISSIONS_REQUEST_READ_CONTACTS: &#123;</span><br><span class="line">            <span class="comment">// If request is cancelled, the result arrays are empty.</span></span><br><span class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// permission was granted, yay! Do the</span></span><br><span class="line">                <span class="comment">// contacts-related task you need to do.</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// permission denied, boo! Disable the</span></span><br><span class="line">                <span class="comment">// functionality that depends on this permission.</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// other 'case' lines to check for other</span></span><br><span class="line">        <span class="comment">// permissions this app might request</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解释权限的用途"><a href="#解释权限的用途" class="headerlink" title="解释权限的用途"></a>解释权限的用途</h4><blockquote>
<p>如果用户继续尝试使用需要某项权限的功能，但拒绝权限请求，则可能表明用户不理解应用为什么需要此权限才能提供相关的功能，这时就可以显示解释给用户。</p>
<p><code>shouldShowRequestPermissionRationale()</code>：</p>
<p>如果应用之前请求过此权限但用户拒绝了请求，此方法返回<code>true</code>；</p>
<p>如果用户过去拒绝了权限请求，并在权限请求系统对话框选择了<code>Don&#39;t ask again</code>选项，此方法返回<code>false</code>。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Should we show an explanation?</span></span><br><span class="line">    <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity, Manifest.permission.READ_CONTACTS)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Show an expanation to the user *asynchronously* -- don't block</span></span><br><span class="line">        <span class="comment">// this thread waiting for the user's response! After the user</span></span><br><span class="line">        <span class="comment">// sees the explanation, try again to request the permission.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// No explanation needed, we can request the permission.</span></span><br><span class="line"></span><br><span class="line">        ActivityCompat.requestPermissions(thisActivity, <span class="keyword">new</span> String[]&#123;Manifest.permission.READ_CONTACTS&#125;, MY_PERMISSIONS_REQUEST_READ_CONTACTS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an</span></span><br><span class="line">        <span class="comment">// app-defined int constant. The callback method gets the</span></span><br><span class="line">        <span class="comment">// result of the request.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AndPermission的使用"><a href="#AndPermission的使用" class="headerlink" title="AndPermission的使用"></a>AndPermission的使用</h3><blockquote>
<p><strong>AndPermission</strong>是严格按照<code>Android</code>系统的<code>运行时权限</code>设计的，并最大限度上兼容了国产手机。</p>
<p>库地址：<a href="https://github.com/yanzhenjie/AndPermission" target="_blank" rel="noopener">https://github.com/yanzhenjie/AndPermission</a></p>
</blockquote>
<h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.yanzhenjie:permission:2.0.0-rc12'</span></span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="申请权限"><a href="#申请权限" class="headerlink" title="申请权限"></a>申请权限</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AndPermission.with(<span class="keyword">this</span>)</span><br><span class="line">  .runtime()</span><br><span class="line">  .permission(Permission.Group.STORAGE)</span><br><span class="line">  .onGranted(permissions -&gt; &#123;</span><br><span class="line">    <span class="comment">// Storage permission are allowed.</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .onDenied(permissions -&gt; &#123;</span><br><span class="line">    <span class="comment">// Storage permission are not allowed.</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .start();</span><br></pre></td></tr></table></figure>
<h5 id="权限被拒绝，说明权限用途"><a href="#权限被拒绝，说明权限用途" class="headerlink" title="权限被拒绝，说明权限用途"></a>权限被拒绝，说明权限用途</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Rationale mRationale = <span class="keyword">new</span> Rationale() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showRationale</span><span class="params">(Context context, List&lt;String&gt; permissions, </span></span></span><br><span class="line"><span class="function"><span class="params">            RequestExecutor executor)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里使用一个Dialog询问用户是否继续授权。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果用户继续：</span></span><br><span class="line">        executor.execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果用户中断：</span></span><br><span class="line">        executor.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AndPermission.with(<span class="keyword">this</span>)</span><br><span class="line">    .runtime()</span><br><span class="line">    .permission(Permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line">    .rationale(mRationale)</span><br><span class="line">    .onGranted(...)</span><br><span class="line">    .onDenied(...)</span><br><span class="line">    .start();</span><br></pre></td></tr></table></figure>
<h5 id="权限总是被拒绝，前往设置页授权"><a href="#权限总是被拒绝，前往设置页授权" class="headerlink" title="权限总是被拒绝，前往设置页授权"></a>权限总是被拒绝，前往设置页授权</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">AndPermission.with(<span class="keyword">this</span>)</span><br><span class="line">    .runtime()</span><br><span class="line">    .permission(...)</span><br><span class="line">    .rationale(...)</span><br><span class="line">    .onGranted(...)</span><br><span class="line">    .onDenied(<span class="keyword">new</span> Action() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAction</span><span class="params">(List&lt;String&gt; permissions)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (AndPermission.hasAlwaysDeniedPermission(context, permissions)) &#123;</span><br><span class="line">                <span class="comment">// 这些权限被用户总是拒绝。</span></span><br><span class="line">                <span class="comment">// 这里使用一个Dialog展示没有这些权限应用程序无法继续运行，询问用户是否去设置中授权。</span></span><br><span class="line">                AndPermission.with(<span class="keyword">this</span>)</span><br><span class="line">                    .runtime()</span><br><span class="line">                    .setting()</span><br><span class="line">                    .onComeback(<span class="keyword">new</span> Setting.Action() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="comment">// 用户从设置回来了。</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .start();</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/lmj623565791/article/details/50709663" target="_blank" rel="noopener">Android 6.0 运行时权限处理完全解析</a></li>
<li><a href="https://blog.csdn.net/yanzhenjie1003/article/details/52503533" target="_blank" rel="noopener">Android 6.0 运行时权限管理最佳实践</a></li>
<li><a href="https://edu.csdn.net/course/play/3539" target="_blank" rel="noopener">Android 6.0运行时权限讲解</a></li>
<li><a href="https://developer.android.com/training/permissions/requesting?hl=zh-cn" target="_blank" rel="noopener">在运行时请求权限</a></li>
<li><a href="https://developer.android.com/about/versions/marshmallow/android-6.0-changes?hl=zh-cn" target="_blank" rel="noopener">Android 6.0 变更</a></li>
<li><a href="https://developer.android.com/training/permissions/best-practices?hl=zh-cn#testing" target="_blank" rel="noopener">权限最佳做法</a></li>
<li><a href="http://www.yanzhenjie.com/AndPermission/cn/runtime/" target="_blank" rel="noopener">AndPermission</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Android Studio中自定义代码模板]]></title>
      <url>https://xch168.github.io/2018/11/10/Android-Studio-custom-code-template/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>我们在使用Android Studio创建Activity、Fragment等等的时候，都会使用Android Studio提供的模板来简化我们创建的，使用模板时，我们只要做简单的配置，Android就能为我们生成相应的代码，所以使用模板可以提高开发的效率，接下来我们将学习如何去自定义一个符合自己项目框架的模板。</p>
</blockquote>
<a id="more"></a>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>Android Studio模板的安装路径：<code>&lt;Android Studio安装目录&gt;/plugins/android/lib/templates</code></p>
</blockquote>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/as_template_dir.png" alt="as_template_dir"></p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/as_template.png" alt="as_template"></p>
<h3 id="模板文件结构"><a href="#模板文件结构" class="headerlink" title="模板文件结构"></a>模板文件结构</h3><p>Android Studio中已有的<code>Empty Activity</code>模板：</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/empty_activity_template.png" alt="empty_activity_template"></p>
<p>模板组成结构：</p>
<ul>
<li>template.xml：定义模板参数</li>
<li>globals.xml.ftl：定义全局变量</li>
<li>recipe.xml.ftl：配置要引用的模板路径和生成的文件的路径</li>
<li>root文件：存放模板文件和资源文件</li>
<li>效果缩略图</li>
</ul>
<p>模板变量处理流程：</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/template_variable_dataflow.png" alt="template_variable_dataflow"></p>
<h4 id="template-xml"><a href="#template-xml" class="headerlink" title="template.xml"></a>template.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span></span></span><br><span class="line"><span class="tag">    <span class="attr">format</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">revision</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Empty Activity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minApi</span>=<span class="string">"9"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minBuildApi</span>=<span class="string">"14"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">description</span>=<span class="string">"Creates a new empty activity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">value</span>=<span class="string">"Activity"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formfactor</span> <span class="attr">value</span>=<span class="string">"Mobile"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"activityClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Activity Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;layoutToActivity(layoutName)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the activity class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"generateLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Generate Layout File"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"If true, a layout file will be generated"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"layoutName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Layout Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"layout|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;activityToLayout(activityClass)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"activity_main"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">visibility</span>=<span class="string">"generateLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the layout to create for the activity"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"isLauncher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Launcher Activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"If true, this activity will have a CATEGORY_LAUNCHER intent filter, making it visible in the launcher"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"backwardsCompatibility"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Backwards Compatibility (AppCompat)"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"If false, this activity base class will be Activity instead of AppCompatActivity"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"packageName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Package name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"package"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"com.mycompany.myapp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 128x128 thumbnails relative to template.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thumbs</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default thumbnail is required --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thumb</span>&gt;</span>template_blank_activity.png<span class="tag">&lt;/<span class="name">thumb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thumbs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">globals</span> <span class="attr">file</span>=<span class="string">"globals.xml.ftl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execute</span> <span class="attr">file</span>=<span class="string">"recipe.xml.ftl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/template.png" alt="template"></p>
<p><strong>说明</strong>：</p>
<ul>
<li><code>&lt;template&gt;</code>中的<code>name</code>对应新建<code>Activity</code>时显示的名字</li>
<li><code>&lt;category&gt;</code>对应New的类别为<code>Activity</code></li>
<li><code>&lt;parameter&gt;</code>对应界面上蓝色框的一个项，<ul>
<li>id：唯一表示，最终通过该属性值，获取用户界面上的输入值</li>
<li>name：界面上Label提示语</li>
<li>type：输入值类型</li>
<li>constraints：值约束</li>
<li>suggest：建议值，比如填写ActivityName的时候，会给出LayoutName的建议值</li>
<li>help：底部显示的提示语</li>
</ul>
</li>
</ul>
<h4 id="globals-xml-ftl"><a href="#globals-xml-ftl" class="headerlink" title="globals.xml.ftl"></a>globals.xml.ftl</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">globals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"hasNoActionBar"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"parentActivityClass"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"simpleLayoutName"</span> <span class="attr">value</span>=<span class="string">"$&#123;layoutName&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"excludeMenu"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"generateActivityTitle"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">..</span>/<span class="attr">common</span>/<span class="attr">common_globals.xml.ftl</span>" /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">globals</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个文件用于定义一些全局变量。</p>
<p><strong>说明</strong>：</p>
<p><code>&lt;global&gt;</code>：表示一个全局变量</p>
<ul>
<li>id：变量名</li>
<li>type：变量类型</li>
<li>value：默认值</li>
</ul>
<p>访问变量：<code>${变量id}</code></p>
<h4 id="recipe-xml-ftl"><a href="#recipe-xml-ftl" class="headerlink" title="recipe.xml.ftl"></a>recipe.xml.ftl</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#import</span> "<span class="attr">root:</span>//<span class="attr">activities</span>/<span class="attr">common</span>/<span class="attr">kotlin_macros.ftl</span>" <span class="attr">as</span> <span class="attr">kt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">recipe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">..</span>/<span class="attr">common</span>/<span class="attr">recipe_manifest.xml.ftl</span>" /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">@kt.addAllKotlinDependencies</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">generateLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">..</span>/<span class="attr">common</span>/<span class="attr">recipe_simple.xml.ftl</span>" /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;layoutName&#125;.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/SimpleActivity.$&#123;ktOrJavaExt&#125;.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;activityClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">                                  </span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;activityClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">recipe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>该文件用于定义如何生成代码和文件。</p>
</blockquote>
<p><strong>说明</strong>：</p>
<ul>
<li><code>&lt;#include&gt;</code>：导入另一个ftl文件</li>
<li><code>&lt;open&gt;</code>：在代码生成后打开指定文件，例如，当我们创建一个Activity后，AS会自动打开Activity及布局文件。</li>
<li><code>&lt;instantiate&gt;</code>：将<code>.ftl</code>文件转成<code>.java</code>或<code>.kt</code>文件。</li>
<li><code>&lt;copy&gt;</code>：用于从<code>root</code>文件夹中复制文件到目标目录。</li>
<li><code>&lt;merge&gt;</code>：用于合并文件，如将模板的strings.xml合并到我们项目中的strings.xml</li>
</ul>
<h3 id="Freemarker语法"><a href="#Freemarker语法" class="headerlink" title="Freemarker语法"></a>Freemarker语法</h3><blockquote>
<p>AS 中模板的定义使用的是Freemarker的语法。</p>
</blockquote>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul>
<li><p><code>${变量名}</code>：访问变量值</p>
</li>
<li><p><code>&lt;#if  变量名&gt;</code>：条件判断</p>
</li>
<li><code>&lt;#include &quot;xx.ftl&quot;&gt;</code>：引入其他模板文件</li>
</ul>
<p>实例：EmptyActivity\root\src\app_package\SimpleActivity.java.ftl</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $&#123;superClassFqcn&#125;;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line">&lt;#if (includeCppSupport!false) &amp;&amp; generateLayout&gt;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;activityClass&#125; extends $&#123;superClass&#125; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">&lt;#if generateLayout&gt;</span><br><span class="line">        setContentView(R.layout.$&#123;layoutName&#125;);</span><br><span class="line">       &lt;#include "../../../../common/jni_code_usage.java.ftl"&gt;</span><br><span class="line">&lt;#elseif includeCppSupport!false&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a call to a native method</span></span><br><span class="line">        android.util.Log.d(<span class="string">"$&#123;activityClass&#125;"</span>, stringFromJNI());</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;#include "../../../../common/jni_code_snippet.java.ftl"&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从模板到代码的流程：</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/code_generation_process.png" alt="code_generation_process"></p>
<h3 id="自定义MVP模板"><a href="#自定义MVP模板" class="headerlink" title="自定义MVP模板"></a>自定义MVP模板</h3><blockquote>
<p>在Google给出的MVP Sample中，每创建一个页面，需要创建：</p>
<p><code>XxActivity</code>、<code>XxFragment</code>、<code>XxContract</code>、<code>XxPresenter</code>四个文件，步骤繁琐，且AS目前没有提供相应的模板，所以接下来将自定义一个MVP的模板，来简化这些繁琐的操作。</p>
</blockquote>
<h4 id="template-xml-1"><a href="#template-xml-1" class="headerlink" title="template.xml"></a>template.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span></span></span><br><span class="line"><span class="tag">    <span class="attr">format</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">revision</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Page"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minApi</span>=<span class="string">"9"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minBuildApi</span>=<span class="string">"14"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">description</span>=<span class="string">"Creates a new MVP page"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">value</span>=<span class="string">"MVP"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formfactor</span> <span class="attr">value</span>=<span class="string">"Mobile"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"activityClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Activity Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;layoutToActivity(activityLayout)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the activity class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"activityLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Activity Layout Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"layout|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;activityToLayout(activityClass)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"activity_main"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the layout to create for the activity"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"fragmentClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Fragment Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;Fragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the fragment class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"fragmentLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Fragment Layout Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"layout|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"fragment_$&#123;classToResource(fragmentClass)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"fragment_main"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the layout to create for the fragment"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"contractClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Contract Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;underscoreToCamelCase(classToResource(fragmentClass))&#125;Contract"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainViewModel"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the contract class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"presenterClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Presenter Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;underscoreToCamelCase(classToResource(fragmentClass))&#125;Presenter"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainViewModel"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the presenter class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"isLauncher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Launcher Activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"If true, this activity will have a CATEGORY_LAUNCHER intent filter, making it visible in the launcher"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"packageName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Package name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"package"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"com.mycompany.myapp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"pagePackage"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Page package path"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"package"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"ui.$&#123;classToResource(fragmentClass)?replace('_', '')&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"ui.main"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The package path for the page."</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 128x128 thumbnails relative to template.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thumbs</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default thumbnail is required --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thumb</span>&gt;</span>template_blank_activity.png<span class="tag">&lt;/<span class="name">thumb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thumbs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">globals</span> <span class="attr">file</span>=<span class="string">"globals.xml.ftl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execute</span> <span class="attr">file</span>=<span class="string">"recipe.xml.ftl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="globals-xml-ftl-1"><a href="#globals-xml-ftl-1" class="headerlink" title="globals.xml.ftl"></a>globals.xml.ftl</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">globals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"hasNoActionBar"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"parentActivityClass"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"simpleLayoutName"</span> <span class="attr">value</span>=<span class="string">"$&#123;activityLayout&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"excludeMenu"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"generateActivityTitle"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">..</span>/<span class="attr">..</span>/<span class="attr">activities</span>/<span class="attr">common</span>/<span class="attr">common_globals.xml.ftl</span>" /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">globals</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="recipe-xml-ftl-1"><a href="#recipe-xml-ftl-1" class="headerlink" title="recipe.xml.ftl"></a>recipe.xml.ftl</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">recipe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#--</span>  生成<span class="attr">mainfest</span>配置  <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">merge</span> <span class="attr">from</span>=<span class="string">"root/AndroidManifest.xml.ftl"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(manifestOut)&#125;/AndroidManifest.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#--</span>  生成布局文件  <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/res/layout/activity.xml.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;escapeXmlAttribute(activityLayout)&#125;.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/res/layout/fragment.xml.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;escapeXmlAttribute(fragmentLayout)&#125;.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#--</span>  生成<span class="attr">.java</span>文件  <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/Activity.$&#123;ktOrJavaExt&#125;.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;activityClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/Fragment.$&#123;ktOrJavaExt&#125;.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;fragmentClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/Contract.$&#123;ktOrJavaExt&#125;.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;contractClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/Presenter.$&#123;ktOrJavaExt&#125;.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;presenterClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span>   </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#--</span>  打开文件<span class="attr">.java</span>文件  <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;activityClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;fragmentClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;contractClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;pagePackage?replace('.', '/')&#125;/$&#123;presenterClass&#125;.$&#123;ktOrJavaExt&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#--</span>  打开布局文件  <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;escapeXmlAttribute(activityLayout)&#125;.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;escapeXmlAttribute(fragmentLayout)&#125;.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">recipe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Activity-java-ftl"><a href="#Activity-java-ftl" class="headerlink" title="Activity.java.ftl"></a>Activity.java.ftl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;.$&#123;pagePackage&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $&#123;superClassFqcn&#125;;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> com.github.xch168.mvp.util.ActivityUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $&#123;packageName&#125;.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;activityClass&#125; extends $&#123;superClass&#125; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.$&#123;activityLayout&#125;);</span><br><span class="line"></span><br><span class="line">        $&#123;fragmentClass&#125; fragment = ($&#123;fragmentClass&#125;) getSupportFragmentManager().findFragmentById(R.id.contentFrame);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            fragment = $&#123;fragmentClass&#125;.newInstance();</span><br><span class="line"></span><br><span class="line">            ActivityUtil.addFragmentToActivity(getSupportFragmentManager(), fragment, R.id.contentFrame);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> $&#123;presenterClass&#125;(fragment);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Fragment-java-ftl"><a href="#Fragment-java-ftl" class="headerlink" title="Fragment.java.ftl"></a>Fragment.java.ftl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;.$&#123;pagePackage&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $&#123;packageName&#125;.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;fragmentClass&#125; extends Fragment implements $&#123;contractClass&#125;.View &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $&#123;contractClass&#125;.Presenter mPresenter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $&#123;fragmentClass&#125; newInstance() &#123;</span><br><span class="line">        Bundle arguments = <span class="keyword">new</span> Bundle();</span><br><span class="line">        arguments.putString(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">        $&#123;fragmentClass&#125; fragment = <span class="keyword">new</span> $&#123;fragmentClass&#125;();</span><br><span class="line">        fragment.setArguments(arguments);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View root = inflater.inflate(R.layout.$&#123;fragmentLayout&#125;, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        mPresenter.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(@NonNull $&#123;contractClass&#125;.Presenter presenter)</span> </span>&#123;</span><br><span class="line">        mPresenter = presenter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Contract-java-ftl"><a href="#Contract-java-ftl" class="headerlink" title="Contract.java.ftl"></a>Contract.java.ftl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;.$&#123;pagePackage&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xch168.mvp.ui.BasePresenter;</span><br><span class="line"><span class="keyword">import</span> com.github.xch168.mvp.ui.BaseView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> $</span>&#123;contractClass&#125; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Presenter-java-ftl"><a href="#Presenter-java-ftl" class="headerlink" title="Presenter.java.ftl"></a>Presenter.java.ftl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;.$&#123;pagePackage&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;presenterClass&#125; implements $&#123;contractClass&#125;.Presenter &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> $&#123;contractClass&#125;.View mView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $&#123;presenterClass&#125;($&#123;contractClass&#125;.View view) &#123;</span><br><span class="line"></span><br><span class="line">        mView = view;</span><br><span class="line"></span><br><span class="line">        mView.setPresenter(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AndroidManifest-xml-ftl"><a href="#AndroidManifest-xml-ftl" class="headerlink" title="AndroidManifest.xml.ftl"></a>AndroidManifest.xml.ftl</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"$&#123;packageName&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"$&#123;packageName&#125;.$&#123;pagePackage&#125;.$&#123;activityClass&#125;"</span></span></span><br><span class="line">            &lt;#if generateActivityTitle!true&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNewProject</span>&gt;</span></span><br><span class="line">                    android:label="@string/app_name"</span><br><span class="line">                <span class="tag">&lt;<span class="name">#else</span>&gt;</span></span><br><span class="line">                    android:label="@string/title_$&#123;activityToLayout(activityClass)&#125;"</span><br><span class="line">                <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">hasNoActionBar</span>&gt;</span></span><br><span class="line">                android:theme="@style/$&#123;themeNameNoActionBar&#125;"</span><br><span class="line">            <span class="tag">&lt;<span class="name">#elseif</span> (<span class="attr">requireTheme</span>!<span class="attr">false</span>) &amp;&amp; !<span class="attr">hasApplicationTheme</span> &amp;&amp; <span class="attr">appCompat</span>&gt;</span></span><br><span class="line">                android:theme="@style/$&#123;themeName&#125;"</span><br><span class="line">            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">buildApi</span> <span class="attr">gte</span> <span class="attr">16</span> &amp;&amp; <span class="attr">parentActivityClass</span> != <span class="string">""</span>&gt;</span></span><br><span class="line">                android:parentActivityName="$&#123;parentActivityClass&#125;"</span><br><span class="line">            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span>&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">#if</span> <span class="attr">parentActivityClass</span> != <span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.support.PARENT_ACTIVITY"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:value</span>=<span class="string">"$&#123;parentActivityClass&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用MVP模板"><a href="#使用MVP模板" class="headerlink" title="使用MVP模板"></a>使用MVP模板</h3><blockquote>
<p>将模板文件复制到<code>&lt;Android Studio安装目录&gt;/plugins/android/lib/templates/{userName}/MVP</code>目录下，然后重启Android Studio。</p>
</blockquote>
<p><strong>Step1</strong>：新建一个MVP页面</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/use_mvp_templage.jpg" alt="Android-Studio-custom-code-template\use_mvp_templage.jpg"></p>
<p><strong>Step2</strong>：配置参数</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/fill_mvp_template.png" alt="fill_mvp_template"></p>
<p><strong>Step3</strong>：点击Finish，将自动生成相关代码及资源文件</p>
<p><img src="/2018/11/10/Android-Studio-custom-code-template/gen_mvp_code.png" alt="gen_mvp_code"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/lmj623565791/article/details/51635533" target="_blank" rel="noopener">Android Studio自定义模板 写页面竟然可以如此轻松</a></li>
<li><a href="http://www.slideshare.net/murphonic/custom-android-code-templates-15537501" target="_blank" rel="noopener">Custom Android Code Templates</a></li>
<li><a href="https://puke3615.github.io/2017/03/06/TemplateBuilder[Chinese]/" target="_blank" rel="noopener">TemplateBuilder(中文版)</a></li>
<li><a href="https://www.jianshu.com/p/fa974a5dc2ff" target="_blank" rel="noopener">Android Studio 轻松构建自定义模板</a></li>
<li><a href="https://www.jianshu.com/p/e3548f441440" target="_blank" rel="noopener">Android Studio Template(模板)开发</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RecyclerView性能优化]]></title>
      <url>https://xch168.github.io/2018/11/08/RecyclerView-best-practices/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>RecyclerView有着极高的灵活性，能实现ListView、GridView的所有功能。在日常开发中，使用非常广泛，如果使用不当将会影响到应用的整体性能，所以有必要了解一下如何更高效的使用。</p>
</blockquote>
<a id="more"></a>
<h3 id="数据处理与视图绑定分离"><a href="#数据处理与视图绑定分离" class="headerlink" title="数据处理与视图绑定分离"></a>数据处理与视图绑定分离</h3><blockquote>
<p>RecyclerView的<code>bindViewHolder</code>方法是在UI线程进行的，如果在该方法进行耗时操作，将会影响滑动的流畅性。</p>
</blockquote>
<p>优化前：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">    Date dateDue;</span><br><span class="line">    String title;</span><br><span class="line">    String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRecyclerView</span>.<span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> TODAYS_DATE = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> DATE_FORMAT = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"MM dd, yyyy"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">onBindViewHolder</span><span class="params">(Task.ViewHolder tvh, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Task task = getItem(position);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (TODAYS_DATE.compareTo(task.dateDue) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            tvh.backgroundView.setColor(Color.GREEN);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tvh.backgroundView.setColor(Color.RED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String dueDateFormatted = DATE_FORMAT.format(task.getDateDue());</span><br><span class="line">        tvh.dateTextView.setDate(dueDateFormatted);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的<code>onBindViewHolder</code>方法中进行了日期的比较和日期的格式化，这个是很耗时的，在<code>onBindViewHolder</code>方法中，应该只是将数据<code>set</code>到视图中，而不应进行业务的处理。</p>
<p>优化后：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> overdueColor;</span><br><span class="line">    String dateDue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">onBindViewHolder</span><span class="params">(Task.ViewHolder tvh, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    TaskViewModel taskViewModel = getItem(position);</span><br><span class="line">    tvh.backgroundView.setColor(taskViewModel.getOverdueColor());</span><br><span class="line">    tvh.dateTextView.setDate(taskViewModel.getDateDue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据优化"><a href="#数据优化" class="headerlink" title="数据优化"></a>数据优化</h3><blockquote>
<ol>
<li>分页加载远端数据，对拉取的远端数据进行缓存，提高二次加载速度；</li>
<li>对于新增或删除数据通过<code>DiffUtil</code>，来进行局部数据刷新，而不是一味的全局刷新数据。</li>
</ol>
</blockquote>
<p><code>DiffUtil</code>是support包下新增的一个工具类，用来判断新数据和旧数据的差别，从而进行局部刷新。</p>
<p>DiffUtil的使用，在原来调用<code>mAdapter.notifyDataSetChanged()</code>的地方：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mAdapter.notifyDataSetChanged()</span></span><br><span class="line">DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(<span class="keyword">new</span> DiffCallBack(oldDatas, newDatas), <span class="keyword">true</span>);</span><br><span class="line">diffResult.dispatchUpdatesTo(mAdapter);</span><br></pre></td></tr></table></figure>
<p>DiffUtil最终是调用Adapter的下面几个方法来进行局部刷新：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mAdapter.notifyItemRangeInserted(position, count);</span><br><span class="line">mAdapter.notifyItemRangeRemoved(position, count);</span><br><span class="line">mAdapter.notifyItemMoved(fromPosition, toPosition);</span><br><span class="line">mAdapter.notifyItemRangeChanged(position, count, payload);</span><br></pre></td></tr></table></figure>
<h3 id="布局优化"><a href="#布局优化" class="headerlink" title="布局优化"></a>布局优化</h3><h4 id="减少过度绘制"><a href="#减少过度绘制" class="headerlink" title="减少过度绘制"></a>减少过度绘制</h4><blockquote>
<p>减少布局层级，可以考虑使用自定义View来减少层级，或者更合理的设置布局来减少层级。</p>
</blockquote>
<p><strong>Note</strong>: 目前不推荐在RecyclerView中使用<code>ConstraintLayout</code>，在ConstraintLayout1.1.2版中，性能还是表现不佳，后续的版本可能这个问题就解决了，需要持续关注。</p>
<h4 id="减少xml文件inflate时间"><a href="#减少xml文件inflate时间" class="headerlink" title="减少xml文件inflate时间"></a>减少xml文件inflate时间</h4><blockquote>
<p>xml文件包括：layout、drawable的xml，xml文件inflate出ItemView是通过耗时的IO操作。可以使用代码去生成布局，即<code>new View()</code>的方式。这种方式是比较麻烦，但是在布局太过复杂，或对性能要求比较高的时候可以使用。</p>
</blockquote>
<h4 id="减少View对象的创建"><a href="#减少View对象的创建" class="headerlink" title="减少View对象的创建"></a>减少View对象的创建</h4><blockquote>
<p>一个稍微复杂的 Item 会包含大量的 View，而大量的 View 的创建也会消耗大量时间，所以要尽可能简化 ItemView；设计 ItemType 时，对多 ViewType 能够共用的部分尽量设计成自定义 View，减少 View 的构造和嵌套。</p>
</blockquote>
<h4 id="设置高度固定"><a href="#设置高度固定" class="headerlink" title="设置高度固定"></a>设置高度固定</h4><blockquote>
<p>如果item高度是固定的话，可以使用<code>RecyclerView.setHasFixedSize(true);</code>来避免requestLayout浪费资源。</p>
</blockquote>
<h3 id="共用RecycledViewPool"><a href="#共用RecycledViewPool" class="headerlink" title="共用RecycledViewPool"></a>共用RecycledViewPool</h3><blockquote>
<p>在嵌套RecyclerView中，如果子RecyclerView具有相同的adapter，那么可以设置<code>RecyclerView.setRecycledViewPool(pool)</code>来共用一个RecycledViewPool。</p>
</blockquote>
<p><strong>Note</strong>: 如果LayoutManager是LinearLayoutManager或其子类，需要手动开启这个特性：<code>layout.setRecycleChildrenOnDetach(true)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">OuterAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    RecyclerView.RecycledViewPool mSharedPool = <span class="keyword">new</span> RecyclerView.RecycledViewPool();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OuterAdapter.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RecyclerView innerLLM = <span class="keyword">new</span> RecyclerView(inflater.getContext());</span><br><span class="line"></span><br><span class="line">        LinearLayoutManager innerLLM = <span class="keyword">new</span> LinearLayoutManager(parent.getContext(), LinearLayoutManager.HORIZONTAL);</span><br><span class="line">        innerLLM.setRecycleChildrenOnDetach(<span class="keyword">true</span>);</span><br><span class="line">        innerRv.setLayoutManager(innerLLM);</span><br><span class="line">        innerRv.setRecycledViewPool(mSharedPool);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OuterAdapter.ViewHolder(innerRv);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/08/RecyclerView-best-practices/RecycledViewPool.jpeg" alt="RecycledViewPool"></p>
<h3 id="RecyclerView数据预取"><a href="#RecyclerView数据预取" class="headerlink" title="RecyclerView数据预取"></a>RecyclerView数据预取</h3><blockquote>
<p>RecyclerView25.1.0及以上版本增加了<code>Prefetch</code>功能。</p>
<p>用于嵌套RecyclerView获取最佳性能。</p>
<p>详细分析：<a href="https://juejin.im/entry/58a3f4f62f301e0069908d8f" target="_blank" rel="noopener">RecyclerView 数据预取</a></p>
</blockquote>
<p><strong>Note</strong>: 只适合横向嵌套</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在嵌套内部的LayoutManager中调用LinearLayoutManger的设置方法</span></span><br><span class="line"><span class="comment">// num的取值：如果列表刚刚展示4个半item，则设置为5</span></span><br><span class="line">innerLLM.setInitialItemsPrefetchCount(num);</span><br></pre></td></tr></table></figure>
<h3 id="加大RecyclerView的缓存"><a href="#加大RecyclerView的缓存" class="headerlink" title="加大RecyclerView的缓存"></a>加大RecyclerView的缓存</h3><blockquote>
<p>用空间换时间，来提高滚动的流畅性。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.setItemViewCacheSize(<span class="number">20</span>);</span><br><span class="line">recyclerView.setDrawingCacheEnabled(<span class="keyword">true</span>);</span><br><span class="line">recyclerView.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);</span><br></pre></td></tr></table></figure>
<h3 id="增加RecyclerView预留的额外空间"><a href="#增加RecyclerView预留的额外空间" class="headerlink" title="增加RecyclerView预留的额外空间"></a>增加RecyclerView预留的额外空间</h3><blockquote>
<p>额外空间：显示范围之外，应该额外缓存的空间</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getExtraLayoutSpace</span><span class="params">(RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="减少ItemView监听器的创建"><a href="#减少ItemView监听器的创建" class="headerlink" title="减少ItemView监听器的创建"></a>减少ItemView监听器的创建</h3><blockquote>
<p>对ItemView设置监听器，不要对每个item都创建一个监听器，而应该共用一个XxListener，然后根据<code>ID</code>来进行不同的操作，优化了对象的频繁创建带来的资源消耗。</p>
</blockquote>
<h3 id="优化滑动操作"><a href="#优化滑动操作" class="headerlink" title="优化滑动操作"></a>优化滑动操作</h3><blockquote>
<p>设置<code>RecyclerView.addOnScrollListener();</code>来在滑动过程中停止加载的操作。</p>
</blockquote>
<h3 id="处理刷新闪烁"><a href="#处理刷新闪烁" class="headerlink" title="处理刷新闪烁"></a>处理刷新闪烁</h3><blockquote>
<p>调用notifyDataSetChange时，适配器不知道整个数据集中的那些内容以及存在，再重新匹配ViewHolder时会花生闪烁。</p>
<p>设置adapter.setHasStableIds(true)，并重写getItemId()来给每个Item一个唯一的ID</p>
</blockquote>
<h3 id="回收资源"><a href="#回收资源" class="headerlink" title="回收资源"></a>回收资源</h3><blockquote>
<p>通过重写<code>RecyclerView.onViewRecycled(holder)</code>来回收资源。</p>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blankj.com/2018/09/29/optimize-recycler-view/" target="_blank" rel="noopener">RecyclerView 性能优化</a></li>
<li><a href="https://blog.csdn.net/a8688555/article/details/79634295" target="_blank" rel="noopener">Android recycleView 的一些优化与相关问题</a></li>
<li><a href="https://stackoverflow.com/questions/27188536/recyclerview-scrolling-performance" target="_blank" rel="noopener">RecyclerView Scrolling Performance</a></li>
<li><a href="https://stackoverflow.com/questions/27993627/optimizing-recyclerview-listview" target="_blank" rel="noopener">Optimizing RecyclerView/ListView</a></li>
<li><a href="http://www.cnblogs.com/ldq2016/p/9039979.html" target="_blank" rel="noopener">RecyclerView 列表类控件卡顿优化</a></li>
<li><a href="https://juejin.im/entry/58a3f4f62f301e0069908d8f" target="_blank" rel="noopener">RecyclerView 数据预取</a></li>
<li><a href="https://blog.csdn.net/qq_25867141/article/details/52769332" target="_blank" rel="noopener">DiffUtil新工具类，让你的RecyclerView飞一会</a></li>
<li><a href="https://www.cnblogs.com/dasusu/p/9159904.html" target="_blank" rel="noopener">关于RecyclerView你知道的不知道的都在这了（上）</a></li>
<li><a href="https://www.cnblogs.com/dasusu/p/9255335.html" target="_blank" rel="noopener">关于RecyclerView你知道的不知道的都在这了（下）</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Android logcat中打印FFmpeg调试信息]]></title>
      <url>https://xch168.github.io/2018/11/02/android-ffmpeg-logcat/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>在日常Android开发中，我们都是通过Logcat来查看日志，但是将FFmpeg移植到Android上，无法在Logcat中查看调试信息而无法分析错误。本文将介绍如何配置来将FFmpeg的信息输出到Logcat。</p>
</blockquote>
<a id="more"></a>
<h3 id="av-log-set-callback"><a href="#av-log-set-callback" class="headerlink" title="av_log_set_callback"></a>av_log_set_callback</h3><blockquote>
<p>FFmpeg中的av_log_set_callback函数用来注册FFmpeg日志输出的回调接口。</p>
</blockquote>
<p>在FFmpeg源码中的ffmpeg.c文件的main函数中有av_log_set_callback的调用，而log_callback_null是个空的回调函数，一个思路是可以直接在该回调函数写打印代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">    av_log_set_callback(log_callback_null);</span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log_callback_null</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">int</span> level, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list vl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写android-log-h头文件"><a href="#编写android-log-h头文件" class="headerlink" title="编写android_log.h头文件"></a>编写android_log.h头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> use_log_report = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_TAG     <span class="meta-string">"FFmpeg_VideoEditor"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_UNKNOWN        ANDROID_LOG_UNKNOWN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_DEFAULT        ANDROID_LOG_DEFAULT</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_VERBOSE        ANDROID_LOG_VERBOSE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_DEBUG          ANDROID_LOG_DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_INFO           ANDROID_LOG_INFO</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_WARN           ANDROID_LOG_WARN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_ERROR          ANDROID_LOG_ERROR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_FATAL          ANDROID_LOG_FATAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LOG_SILENT         ANDROID_LOG_SILENT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印可变参数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOG(level, TAG, ...)    ((void)__android_log_vprint(level, TAG, __VA_ARGS__))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOGV(...)  VLOG(FF_LOG_VERBOSE,   FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOGD(...)  VLOG(FF_LOG_DEBUG,     FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOGI(...)  VLOG(FF_LOG_INFO,      FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOGW(...)  VLOG(FF_LOG_WARN,      FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLOGE(...)  VLOG(FF_LOG_ERROR,     FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOG(level, TAG, ...)    ((void)__android_log_print(level, TAG, __VA_ARGS__))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOGV(...)  ALOG(FF_LOG_VERBOSE,   FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOGD(...)  ALOG(FF_LOG_DEBUG,     FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOGI(...)  ALOG(FF_LOG_INFO,      FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOGW(...)  ALOG(FF_LOG_WARN,      FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALOGE(...)  ALOG(FF_LOG_ERROR,     FF_LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(format, ...)  __android_log_print(ANDROID_LOG_ERROR, FF_LOG_TAG, format, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(format, ...)  __android_log_print(ANDROID_LOG_INFO,  FF_LOG_TAG, format, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原样输出FFmpeg日志</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ffp_log_callback_brief</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">int</span> level, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list vl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ffplv = FF_LOG_VERBOSE;</span><br><span class="line">    <span class="keyword">if</span> (level &lt;= AV_LOG_ERROR)</span><br><span class="line">        ffplv = FF_LOG_ERROR;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_WARNING)</span><br><span class="line">        ffplv = FF_LOG_WARN;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_INFO)</span><br><span class="line">        ffplv = FF_LOG_INFO;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_VERBOSE)</span><br><span class="line">        ffplv = FF_LOG_VERBOSE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ffplv = FF_LOG_DEBUG;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (level &lt;= AV_LOG_INFO)</span><br><span class="line">        VLOG(ffplv, FF_LOG_TAG, fmt, vl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对FFmpeg日志进行格式化</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ffp_log_callback_report</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">int</span> level, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list vl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ffplv = FF_LOG_VERBOSE;</span><br><span class="line">    <span class="keyword">if</span> (level &lt;= AV_LOG_ERROR)</span><br><span class="line">        ffplv = FF_LOG_ERROR;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_WARNING)</span><br><span class="line">        ffplv = FF_LOG_WARN;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_INFO)</span><br><span class="line">        ffplv = FF_LOG_INFO;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (level &lt;= AV_LOG_VERBOSE)</span><br><span class="line">        ffplv = FF_LOG_VERBOSE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ffplv = FF_LOG_DEBUG;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    va_list vl2;</span><br><span class="line">    <span class="keyword">char</span> line[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> print_prefix = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    va_copy(vl2, vl);</span><br><span class="line">    <span class="comment">// av_log_default_callback(ptr, level, fmt, vl);</span></span><br><span class="line">    av_log_format_line(ptr, level, fmt, vl2, line, <span class="keyword">sizeof</span>(line), &amp;print_prefix);</span><br><span class="line">    va_end(vl2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    ALOG(ffplv, FF_LOG_TAG, <span class="string">"%s"</span>, line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在实践中发现输出的日志都一样，只是<code>ffp_log_callback_report</code>函数可以在输出的日志添加额外信息，如ALOG(ffplv, FF_LOG_TAG, “额外信息：%s”, line);</p>
<h3 id="在ffmpeg-c的main方法中注册"><a href="#在ffmpeg-c的main方法中注册" class="headerlink" title="在ffmpeg.c的main方法中注册"></a>在ffmpeg.c的main方法中注册</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"android_log.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">    <span class="keyword">if</span>(use_log_report)</span><br><span class="line">    &#123;</span><br><span class="line">    	av_log_set_callback(ffp_log_callback_report);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    	av_log_set_callback(ffp_log_callback_brief);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p><img src="/2018/11/02/android-ffmpeg-logcat/ffmpeg_log.png" alt="ffmpeg_log"></p>
<p><img src="/2018/11/02/android-ffmpeg-logcat/ffmpeg_log2.png" alt="ffmpeg_log2"></p>
<p>通过日志，我们可以看到FFmpeg的版本信息，还有配置信息。</p>
<p>在<code>configuration</code>日志行中可以看到我在编译时的配置项，当我们在拿到一个别人编译好的库，如果我们不知道他的编译脚本，通过这日志信息也可以知道。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/matrix_laboratory/article/details/57080891" target="_blank" rel="noopener">FFmpeg日志输出到adb logcat</a></li>
<li><a href="https://blog.csdn.net/u012027644/article/details/56666608" target="_blank" rel="noopener">Android ffmpeg调试信息打印在logcat里</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Android项目中调用FFmpeg命令]]></title>
      <url>https://xch168.github.io/2018/10/26/android-invoke-ffmpeg-cmd/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>FFmpeg，命令行非常强大。在PC机上，调用一行FFmpeg命令，就可以对视频文件进行剪切、合并、转码等功能。本文将介绍如何在Android中调用FFmpeg命令行。</p>
</blockquote>
<a id="more"></a>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><blockquote>
<p>前面已经有两篇文章介绍FFmpeg的编译：</p>
<ol>
<li><a href="https://xch168.github.io/2018/07/22/android-ndk-ffmpeg-compile/">Android NDK交叉编译FFmpeg</a></li>
<li><a href="https://xch168.github.io/2018/08/04/android-ndk-compile-ffmpeg-to-a-so/">将FFmpeg编译成一个libffmpeg.so库</a></li>
</ol>
</blockquote>
<h3 id="创建ffmpeg-cmd模块"><a href="#创建ffmpeg-cmd模块" class="headerlink" title="创建ffmpeg-cmd模块"></a>创建ffmpeg-cmd模块</h3><h4 id="Step1：目录结构"><a href="#Step1：目录结构" class="headerlink" title="Step1：目录结构"></a>Step1：目录结构</h4><p><img src="/2018/10/26/android-invoke-ffmpeg-cmd/ffmpeg-cmd-dir.png" alt="ffmpeg-cmd-dir"></p>
<h4 id="Step2：导入libffmpeg-so库"><a href="#Step2：导入libffmpeg-so库" class="headerlink" title="Step2：导入libffmpeg.so库"></a>Step2：导入libffmpeg.so库</h4><p><img src="/2018/10/26/android-invoke-ffmpeg-cmd/libffmpeg.so.png" alt="libffmpeg.so"></p>
<p>在<code>ffmpeg-cmd</code>模块的<code>build.gradle</code>中添加配置：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他配置...</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="comment">// 省略其他配置...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 配置cmake构建参数</span></span><br><span class="line">        externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags <span class="string">""</span></span><br><span class="line">                abiFilters <span class="string">'armeabi-v7a'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置cmake构建脚本的路径</span></span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义jniLib的目录到libs</span></span><br><span class="line">    sourceSets.main &#123;</span><br><span class="line">        jniLibs.srcDirs = [<span class="string">'libs'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Step3：导入FFmpeg的相关头文件"><a href="#Step3：导入FFmpeg的相关头文件" class="headerlink" title="Step3：导入FFmpeg的相关头文件"></a>Step3：导入FFmpeg的相关头文件</h4><p><img src="/2018/10/26/android-invoke-ffmpeg-cmd/header.png" alt="header"></p>
<h4 id="Step4-导入FFmpeg的相关源码文件"><a href="#Step4-导入FFmpeg的相关源码文件" class="headerlink" title="Step4: 导入FFmpeg的相关源码文件"></a>Step4: 导入FFmpeg的相关源码文件</h4><blockquote>
<p>在源码目录的<code>fftools</code>文件夹内</p>
</blockquote>
<p><img src="/2018/10/26/android-invoke-ffmpeg-cmd/ffmpeg-source.png" alt="ffmpeg-source"></p>
<h4 id="Step5-编写CMakeLists-txt文件"><a href="#Step5-编写CMakeLists-txt文件" class="headerlink" title="Step5:  编写CMakeLists.txt文件"></a>Step5:  编写CMakeLists.txt文件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">"$&#123;CMAKE_CXX_FLAGS&#125; -std=gnu++11"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">        ./src/main/cpp</span><br><span class="line">        ./src/main/cpp/ffmpeg</span><br><span class="line">        ./src/main/cpp/<span class="keyword">include</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义源码所在目录</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src/main/cpp SRC)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src/main/cpp/ffmpeg SRC_FFMPEG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 SRC_FFMPEG 添加到 SRC 中</span></span><br><span class="line">list(APPEND SRC <span class="variable">$&#123;SRC_FFMPEG&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置ffmpeg库所在路径的目录</span></span><br><span class="line"><span class="keyword">set</span>(distribution_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译一个ffmpeg-cmd库</span></span><br><span class="line"><span class="keyword">add_library</span>(  ffmpeg-cmd   <span class="comment"># 库名称</span></span><br><span class="line">        SHARED             <span class="comment"># 库类型</span></span><br><span class="line">        <span class="variable">$&#123;SRC&#125;</span>)            <span class="comment"># 编译进库的源码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加libffmpeg.so库</span></span><br><span class="line"><span class="keyword">add_library</span>( ffmpeg</span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="comment"># 指定libffmpeg.so库的位置</span></span><br><span class="line"><span class="keyword">set_target_properties</span>( ffmpeg</span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libffmpeg.so )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找日志库</span></span><br><span class="line"><span class="keyword">find_library</span>(</span><br><span class="line">        log-lib</span><br><span class="line">        log )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其他库链接到目标库ffmpeg-cmd</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( ffmpeg-cmd</span><br><span class="line">        ffmpeg</span><br><span class="line">        -landroid     <span class="comment"># native_window</span></span><br><span class="line">        -ljnigraphics <span class="comment"># bitmap</span></span><br><span class="line">        -lOpenSLES    <span class="comment"># openSLES</span></span><br><span class="line">        <span class="variable">$&#123;log-lib&#125;</span> )</span><br></pre></td></tr></table></figure>
<h3 id="修改FFmpeg源码"><a href="#修改FFmpeg源码" class="headerlink" title="修改FFmpeg源码"></a>修改FFmpeg源码</h3><ul>
<li><p>ffmpeg.c</p>
<p>修改main方法：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 修改后</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffmpeg_exec</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br></pre></td></tr></table></figure>
<p>在<code>ffmpeg_cleanup</code>函数执行结束前重新初始化：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ffmpeg_cleanup</span><span class="params">(<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">    </span><br><span class="line">    nb_filtergraphs = <span class="number">0</span>;</span><br><span class="line">    nb_output_files = <span class="number">0</span>;</span><br><span class="line">    nb_output_streams = <span class="number">0</span>;</span><br><span class="line">    nb_input_files = <span class="number">0</span>;</span><br><span class="line">    nb_input_streams = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>print_report</code>函数中添加代码实现FFmpeg命令执行进度的回调：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_report</span><span class="params">(<span class="keyword">int</span> is_last_report, <span class="keyword">int64_t</span> timer_start, <span class="keyword">int64_t</span> cur_time)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义已处理的时长</span></span><br><span class="line">    <span class="keyword">float</span> mss;</span><br><span class="line">    </span><br><span class="line">    secs = FFABS(pts) / AV_TIME_BASE;</span><br><span class="line">    us = FFABS(pts) % AV_TIME_BASE;</span><br><span class="line">    <span class="comment">// 获取已处理的时长</span></span><br><span class="line">    mss = secs + ((<span class="keyword">float</span>) us / AV_TIME_BASE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用ffmpeg_progress将进度传到Java层，代码后面定义</span></span><br><span class="line">    ffmpeg_progress(mss);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ffmpeg.h</p>
<p>添加<code>ffmpeg_exec</code>方法的声明：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffmpeg_exec</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>cmdutils.c</p>
<p>修改<code>exit_program</code>函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit_program</span><span class="params">(<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (program_exit)</span><br><span class="line">        program_exit(ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 退出线程(该函数后面定义)</span></span><br><span class="line">    ffmpeg_thread_exit(ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删掉下面这行代码，不然执行结束，应用会crash</span></span><br><span class="line">    <span class="comment">//exit(ret);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="编写JNI调用FFmpeg命令"><a href="#编写JNI调用FFmpeg命令" class="headerlink" title="编写JNI调用FFmpeg命令"></a>编写JNI调用FFmpeg命令</h3><p><strong>Note</strong>：这部分代码来自开源库 <a href="https://xch168.github.io/2018/08/04/android-ndk-compile-ffmpeg-to-a-so/">EpMedia</a></p>
<h4 id="C代码："><a href="#C代码：" class="headerlink" title="C代码："></a>C代码：</h4><p>ffmpeg_cmd.h</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_FFmpeg_Cmd</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_FFmpeg_Cmd</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_github_xch168_ffmpeg_1cmd_FFmpegCmd_exec</span><span class="params">(JNIEnv *, jclass, jint, jobjectArray)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_github_xch168_ffmpeg_1cmd_FFmpegCmd_exit</span><span class="params">(JNIEnv *, jclass)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_progress</span><span class="params">(<span class="keyword">float</span> progress)</span></span>;</span><br></pre></td></tr></table></figure>
<p>ffmpeg_cmd.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ffmpeg_cmd.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ffmpeg_thread.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"android_log.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmdutils.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> JavaVM *jvm = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//java虚拟机</span></span><br><span class="line"><span class="keyword">static</span> jclass m_clazz = <span class="literal">NULL</span>;<span class="comment">//当前类(面向java)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回调执行Java方法</span></span><br><span class="line"><span class="comment"> * 参看 Jni反射+Java反射</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callJavaMethod</span><span class="params">(JNIEnv *env, jclass clazz,<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"---------------clazz isNULL---------------"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取方法ID (I)V指的是方法签名 通过javap -s -public FFmpegCmd 命令生成</span></span><br><span class="line">    jmethodID methodID = (*env)-&gt;GetStaticMethodID(env, clazz, <span class="string">"onExecuted"</span>, <span class="string">"(I)V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (methodID == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"---------------methodID isNULL---------------"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用该java方法</span></span><br><span class="line">    (*env)-&gt;CallStaticVoidMethod(env, clazz, methodID,ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callJavaMethodProgress</span><span class="params">(JNIEnv *env, jclass clazz,<span class="keyword">float</span> ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"---------------clazz isNULL---------------"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取方法ID (I)V指的是方法签名 通过javap -s -public FFmpegCmd 命令生成</span></span><br><span class="line">    jmethodID methodID = (*env)-&gt;GetStaticMethodID(env, clazz, <span class="string">"onProgress"</span>, <span class="string">"(F)V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (methodID == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"---------------methodID isNULL---------------"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用该java方法</span></span><br><span class="line">    (*env)-&gt;CallStaticVoidMethod(env, clazz, methodID,ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * c语言-线程回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ffmpeg_callback</span><span class="params">(<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">    JNIEnv *env;</span><br><span class="line">    <span class="comment">//附加到当前线程从JVM中取出JNIEnv, C/C++从子线程中直接回到Java里的方法时  必须经过这个步骤</span></span><br><span class="line">    (*jvm)-&gt;AttachCurrentThread(jvm, (<span class="keyword">void</span> **) &amp;env, <span class="literal">NULL</span>);</span><br><span class="line">    callJavaMethod(env, m_clazz,ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完毕-脱离当前线程</span></span><br><span class="line">    (*jvm)-&gt;DetachCurrentThread(jvm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_progress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">    JNIEnv *env;</span><br><span class="line">    (*jvm)-&gt;AttachCurrentThread(jvm, (<span class="keyword">void</span> **) &amp;env, <span class="literal">NULL</span>);</span><br><span class="line">    callJavaMethodProgress(env, m_clazz,progress);</span><br><span class="line">    (*jvm)-&gt;DetachCurrentThread(jvm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpeg_1cmd_FFmpegCmd_exec(JNIEnv *env, jclass clazz, jint cmdnum, jobjectArray cmdline) &#123;</span><br><span class="line">    (*env)-&gt;GetJavaVM(env, &amp;jvm);</span><br><span class="line">    m_clazz = (*env)-&gt;NewGlobalRef(env, clazz);</span><br><span class="line">    <span class="comment">//---------------------------------C语言 反射Java 相关----------------------------------------</span></span><br><span class="line">    <span class="comment">//---------------------------------java 数组转C语言数组----------------------------------------</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//满足NDK所需的C99标准</span></span><br><span class="line">    <span class="keyword">char</span> **argv = <span class="literal">NULL</span>;<span class="comment">//命令集 二维指针</span></span><br><span class="line">    jstring *strr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cmdline != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        argv = (<span class="keyword">char</span> **) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span> *) * cmdnum);</span><br><span class="line">        strr = (jstring *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(jstring) * cmdnum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cmdnum; ++i) &#123;<span class="comment">//转换</span></span><br><span class="line">            strr[i] = (jstring)(*env)-&gt;GetObjectArrayElement(env, cmdline, i);</span><br><span class="line">            argv[i] = (<span class="keyword">char</span> *) (*env)-&gt;GetStringUTFChars(env, strr[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//---------------------------------java 数组转C语言数组----------------------------------------</span></span><br><span class="line">    <span class="comment">//---------------------------------执行FFmpeg命令相关----------------------------------------</span></span><br><span class="line">    <span class="comment">//新建线程 执行ffmpeg 命令</span></span><br><span class="line">    ffmpeg_thread_run_cmd(cmdnum, argv);</span><br><span class="line">    <span class="comment">//注册ffmpeg命令执行完毕时的回调</span></span><br><span class="line">    ffmpeg_thread_callback(ffmpeg_callback);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(strr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpeg_1cmd_FFmpegCmd_exit(JNIEnv *env, jclass type) &#123;</span><br><span class="line">    (*env)-&gt;GetJavaVM(env, &amp;jvm);</span><br><span class="line">    m_clazz = (*env)-&gt;NewGlobalRef(env, type);</span><br><span class="line">    ffmpeg_thread_cancel();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ffmpeg_thread.h</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavcodec/avcodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavformat/avformat.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libswscale/swscale.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ffmpeg.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffmpeg_thread_run_cmd</span><span class="params">(<span class="keyword">int</span> cmdnum,<span class="keyword">char</span> **argv)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_thread_exit</span><span class="params">(<span class="keyword">int</span> ret)</span></span>;</span><br><span class="line"></span><br><span class="line">void ffmpeg_thread_callback(void (*cb)(int ret));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_thread_cancel</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>ffmpeg_thread.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavcodec/avcodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ffmpeg_thread.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"android_log.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_t</span> ntid;</span><br><span class="line"><span class="keyword">char</span> **argvs = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;   <span class="comment">//执行</span></span><br><span class="line">    <span class="keyword">int</span> result = ffmpeg_exec(num, argvs);</span><br><span class="line">    ffmpeg_thread_exit(result);</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">void</span> *)<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新建子线程执行ffmpeg命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffmpeg_thread_run_cmd</span><span class="params">(<span class="keyword">int</span> cmdnum,<span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    num=cmdnum;</span><br><span class="line">    argvs=argv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> temp =pthread_create(&amp;ntid,<span class="literal">NULL</span>,thread,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(temp!=<span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"can't create thread: %s "</span>,strerror(temp));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGI(<span class="string">"create thread succes: %s "</span>,strerror(temp));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*ffmpeg_callback)</span><span class="params">(<span class="keyword">int</span> ret)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册线程回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">void ffmpeg_thread_callback(void (*cb)(int ret)) &#123;</span><br><span class="line">    ffmpeg_callback = cb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退出线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_thread_exit</span><span class="params">(<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ffmpeg_callback) &#123;</span><br><span class="line">        ffmpeg_callback(ret);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_exit(<span class="string">"ffmpeg_thread_exit"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ffmpeg_thread_cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ret=<span class="literal">NULL</span>;</span><br><span class="line">    pthread_join(ntid, &amp;ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a>Java代码：</h4><p>FFmpegCmd.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FFmpegCmd</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"ffmpeg-cmd"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OnCmdExecListener sOnCmdExecListener;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> sDuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> argc, String[] argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(String[] cmds, <span class="keyword">long</span> duration, OnCmdExecListener listener)</span> </span>&#123;</span><br><span class="line">        sOnCmdExecListener = listener;</span><br><span class="line">        sDuration = duration;</span><br><span class="line"></span><br><span class="line">        exec(cmds.length, cmds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FFmpeg执行结束回调，由C代码中调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onExecuted</span><span class="params">(<span class="keyword">int</span> ret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sOnCmdExecListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">                sOnCmdExecListener.onProgress(sDuration);</span><br><span class="line">                sOnCmdExecListener.onSuccess();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sOnCmdExecListener.onFailure();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FFmpeg执行进度回调，由C代码调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sOnCmdExecListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sDuration != <span class="number">0</span>) &#123;</span><br><span class="line">                sOnCmdExecListener.onProgress(progress / (sDuration / <span class="number">1000</span>) * <span class="number">0.95f</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnCmdExecListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">float</span> progress)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FFmpegUtil.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装FFmpeg命令的调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FFmpegUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"FFmpegUtil"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execCmd</span><span class="params">(CmdList cmd, <span class="keyword">long</span> duration, <span class="keyword">final</span> OnVideoProcessListener listener)</span> </span>&#123;</span><br><span class="line">        String[] cmds = cmd.toArray(<span class="keyword">new</span> String[cmd.size()]);</span><br><span class="line">        Log.i(TAG, <span class="string">"cmd:"</span> + cmd);</span><br><span class="line">        listener.onProcessStart();</span><br><span class="line">        FFmpegCmd.exec(cmds, duration, <span class="keyword">new</span> FFmpegCmd.OnCmdExecListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                listener.onProcessSuccess();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                listener.onProcessFailure();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">                listener.onProcessProgress(progress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CmdList.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmdList</span> <span class="keyword">extends</span> <span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CmdList <span class="title">append</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CmdList <span class="title">append</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(i + <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CmdList <span class="title">append</span><span class="params">(<span class="keyword">float</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(f + <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CmdList <span class="title">append</span><span class="params">(StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(sb.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CmdList <span class="title">append</span><span class="params">(String[] ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String s:ss) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!s.replace(<span class="string">" "</span>,<span class="string">""</span>).equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (String s : <span class="keyword">this</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">" "</span>).append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调用FFmpeg命令"><a href="#调用FFmpeg命令" class="headerlink" title="调用FFmpeg命令"></a>调用FFmpeg命令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line"><span class="comment">// 构建一条视频裁剪命令</span></span><br><span class="line">CmdList cmd = <span class="keyword">new</span> CmdList();</span><br><span class="line">cmd.append(<span class="string">"ffmpeg"</span>);</span><br><span class="line">cmd.append(<span class="string">"-y"</span>);</span><br><span class="line">cmd.append(<span class="string">"-ss"</span>).append(startTime/ <span class="number">1000</span>).append(<span class="string">"-t"</span>).append(duration / <span class="number">1000</span>).append(<span class="string">"-accurate_seek"</span>);</span><br><span class="line">cmd.append(<span class="string">"-i"</span>).append(srcFile);</span><br><span class="line">cmd.append(<span class="string">"-codec"</span>).append(<span class="string">"copy"</span>).append(destFile);</span><br><span class="line"></span><br><span class="line">FFmpegUtil.execCmd(cmd, duration, <span class="keyword">new</span> OnVideoProcessListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessStart</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessProgress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessSuccess</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessFailure</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>源码地址：<a href="https://github.com/xch168/VideoEditor" target="_blank" rel="noopener">https://github.com/xch168/VideoEditor</a></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://www.jianshu.com/p/3479bba0cf28" target="_blank" rel="noopener"> 将FFmpeg移植到Android平台</a></li>
<li><a href="https://github.com/yangjie10930/EpMedia" target="_blank" rel="noopener">EpMedia</a></li>
<li><a href="https://github.com/xufuji456/FFmpegAndroid" target="_blank" rel="noopener">FFmpegAndroid</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高效地加载Bitmap]]></title>
      <url>https://xch168.github.io/2018/10/13/Efficient-loading-bitmap/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>现在的图片是动辄几M到几十M，而系统分配给应用的内存有限，如果直接将原图载入内存，这会导致Bitmap加载的时候很容易出现内存溢出（OOM）。</p>
<p>Bitmap高效加载的策略：根据图片展示控件的尺寸，将图片以一定的采样率进行缩放后再加载。这样就能降低内存占用，从而在一定程度上避免OOM，并提高Bitmap加载时的性能。</p>
</blockquote>
<a id="more"></a>
<h3 id="Bitmap的加载方式"><a href="#Bitmap的加载方式" class="headerlink" title="Bitmap的加载方式"></a>Bitmap的加载方式</h3><blockquote>
<p><code>BitmapFactory</code>提供了四类方法来加载Bitmap：</p>
<p>decodeFile：从文件加载Bitmap</p>
<p>decodeResource：从资源中加载Bitmap</p>
<p>decodeStream：从输入流中加载Bitmap</p>
<p>decodeByteArray：从字节数组中加载Bitmap</p>
<p>这四类方法都分别有一个带<code>BitmapFactory.Options</code>参数的重载方法，通过对这个参数的配置从而达到高效加载Bitmap。</p>
</blockquote>
<h3 id="BitmapFactory-Options的属性"><a href="#BitmapFactory-Options的属性" class="headerlink" title="BitmapFactory.Options的属性"></a>BitmapFactory.Options的属性</h3><h4 id="inSampleSize"><a href="#inSampleSize" class="headerlink" title="inSampleSize"></a>inSampleSize</h4><blockquote>
<p><code>inSampleSize</code>：即采样率，通过对其设置，实现图片的宽和高缩放。</p>
<p>当inSampleSize=1：采样后的图片大小为图片的原始大小。</p>
<p>当inSameleSize&lt;1：按=1计算</p>
<p>当inSampleSize&gt;1：采样后的图片将会缩小，缩放比例为1 / (inSampleSize的2次方)。</p>
<p><strong>inSampleSize取值</strong>：inSampleSize的取值应该总是2的指数，如1，2，4，8等，如果传入的inSampleSize的值不为2的指数，那么系统会向下取整并选择一个最接近2的指数来代替。比如3，系统会选择2来代替。</p>
</blockquote>
<p>示例：</p>
<p>一张2048x1536像素的图片，采用ARGB_8888进行存储，那么内存大小2048 x 1536 x 4 = 12M，如果inSampleSize = 4，那么采样后的图片内存大小：512 x 384 x 4 = 0.75M</p>
<h4 id="inJustDecodeBounds"><a href="#inJustDecodeBounds" class="headerlink" title="inJustDecodeBounds"></a>inJustDecodeBounds</h4><blockquote>
<p>在计算图片缩放比的时候，我们需要先获取到图片的原始宽高，通过设置<code>inJustDecodeBounds=true</code>，就可以在不将图片加载进内存的情况下，解析出图片的宽高信息。计算出缩放比后，再设置<code>inJustDecodeBounds=false</code>，根据缩放比加载缩放后的图片。</p>
</blockquote>
<h3 id="高效加载Bitmap流程"><a href="#高效加载Bitmap流程" class="headerlink" title="高效加载Bitmap流程"></a>高效加载Bitmap流程</h3><blockquote>
<ol>
<li>将BitmapFactory.Options的<code>inJustDecodeBounds</code>参数设为<code>true</code>并加载图片。</li>
<li>从BitmapFactory.Options中取出图片的原始宽高信息，它们对应<code>outWidth</code>和<code>outHeight</code>参数。</li>
<li>根据采样率的规则并结合目标View的所需大小计算出采样率<code>inSampleSize</code>。</li>
<li>将BitmapFactory.Options的<code>inJustDecodeBounds</code>参数设为<code>false</code>，然后重新加载图片。</li>
</ol>
</blockquote>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> resId, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首次加载获取图片的原始宽高</span></span><br><span class="line">    <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">    options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">    BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算缩放比</span></span><br><span class="line">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新加载图片</span></span><br><span class="line">    options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span> <span class="params">(BitmapFactory.Options options, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 图片的原始宽高</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</span><br><span class="line">    <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算缩放比，是2的指数，</span></span><br><span class="line">        <span class="comment">// 取宽高的最小缩放比，如宽的缩放比为2，高的缩放比为4，那么取2作为整体的缩放比</span></span><br><span class="line">        <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt;= reqHeight</span><br><span class="line">                &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth) &#123;</span><br><span class="line">            inSampleSize *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inSampleSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mImageView.setImageBitmap(decodeSampledBitmapFromResource(getResources(), R.id.myimage, <span class="number">100</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://www.jianshu.com/p/5f02db4a225d" target="_blank" rel="noopener">彻底理解Bitmap的高效加载策略</a></li>
<li><a href="https://developer.android.google.cn/topic/performance/graphics/load-bitmap" target="_blank" rel="noopener">Loading Large Bitmaps Efficiently</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android APK脱壳--腾讯乐固、360加固一键脱壳]]></title>
      <url>https://xch168.github.io/2018/09/27/android-apk-shelling/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>现在使用Proguard进行混淆的代码，也很容易被破解，所以就出现了加固工具，让反编译的难度更大。但是有了加固技术，就会有反加固技术，正所谓道高一尺魔高一丈。</p>
</blockquote>
<a id="more"></a>
<p>经过加固后的apk，通过<code>dex2jar</code>反编译：</p>
<p>腾讯乐固：</p>
<p><img src="/2018/09/27/android-apk-shelling/legu.png" alt="legu"></p>
<p>360加固：</p>
<p><img src="/2018/09/27/android-apk-shelling/360jiagu.png" alt="360jiagu"></p>
<p>从上面可以看出，经过加固后的apk，通过常规方法反编译无法获取到源码。</p>
<h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><h4 id="脱壳工具FDex2"><a href="#脱壳工具FDex2" class="headerlink" title="脱壳工具FDex2"></a>脱壳工具FDex2</h4><blockquote>
<p>通过Hook ClassLoader的loadClass方法，反射调用getDex方法取得Dex(com.android.dex.Dex类对象)，在将里面的dex写出。</p>
</blockquote>
<p>下载地址：</p>
<blockquote>
<p>链接:<a href="https://pan.baidu.com/s/1smxtinr" target="_blank" rel="noopener">https://pan.baidu.com/s/1smxtinr</a> 密码:dk4v</p>
</blockquote>
<h4 id="VirtualXposed"><a href="#VirtualXposed" class="headerlink" title="VirtualXposed"></a>VirtualXposed</h4><blockquote>
<p>VirtualXposed：无需root手机即可使用xp框架。</p>
</blockquote>
<p>下载地址：</p>
<blockquote>
<p><a href="https://vxposed.com/" target="_blank" rel="noopener">https://vxposed.com/</a></p>
</blockquote>
<h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><p>Step1:</p>
<p>将<code>VirtualXposed</code>、<code>FDex2</code>和<strong>需要脱壳的应用</strong>都安装到手机上。</p>
<p>Step2:</p>
<p>启动<code>VirtualXposed</code>，并在<code>VirtualXposed</code>中安装<code>FDex2</code>:</p>
<p><img src="/2018/09/27/android-apk-shelling/vp-install-fdex2.gif" alt="vp-install-fdex2"></p>
<p>Step3:</p>
<p>在<code>VirtualXposed</code>中激活<code>FDex2</code>:</p>
<p><img src="/2018/09/27/android-apk-shelling/active-fdex2.gif" alt="active-fdex2"></p>
<p>Step4:</p>
<p>在<code>VirtualXposed</code>中安装要脱壳的应用，方法和Step2一样。</p>
<p>Step5:</p>
<p>启动<code>VirtualXposed</code>中的<code>FDex2</code>，并配置要脱壳的应用。</p>
<p><img src="/2018/09/27/android-apk-shelling/fdex2-config.png" alt="fdex2-config"></p>
<p>Step6:</p>
<p>在<code>VirtualXposed</code>中运行要脱壳的应用。</p>
<p>Step7:</p>
<p>脱壳后的dex文件：</p>
<p><img src="/2018/09/27/android-apk-shelling/shelling-dex.png" alt="shelling-dex"></p>
<p>导出脱壳的dex文件：</p>
<p>root设备：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb pull /data/user/0/iv.va.exposed/virtual/data/user/0/&#123;packageName&#125;   &#123;电脑上的目录&#125;</span><br></pre></td></tr></table></figure>
<p>未root设备：</p>
<p>在<code>VirtualXposed</code>中，设置–&gt;高级设置–&gt;文件管理，安装文件管理器，然后通过文件管理器进入到指定的目录，通过<code>分享</code>功能发到电脑上。</p>
<p>Step8：</p>
<p>通过<code>dex2jar</code>对 脱壳的dex进行反编译：</p>
<p><img src="/2018/09/27/android-apk-shelling/shelling-dex2jar.png" alt="shelling-dex2jar"></p>
<p>从上图就可以看到脱壳后的dex文件被成功的反编译。</p>
<h3 id="FDex2核心代码MainHook"><a href="#FDex2核心代码MainHook" class="headerlink" title="FDex2核心代码MainHook"></a>FDex2核心代码MainHook</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ppma.xposed;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XSharedPreferences;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainHook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    XSharedPreferences xsp;</span><br><span class="line">    Class Dex;</span><br><span class="line">    Method Dex_getBytes;</span><br><span class="line">    Method getDex;</span><br><span class="line">    String packagename;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        xsp = <span class="keyword">new</span> XSharedPreferences(<span class="string">"com.ppma.appinfo"</span>, <span class="string">"User"</span>);</span><br><span class="line">        xsp.makeWorldReadable();</span><br><span class="line">        xsp.reload();</span><br><span class="line">        initRefect();</span><br><span class="line">        packagename = xsp.getString(<span class="string">"packagename"</span>, <span class="keyword">null</span>);</span><br><span class="line">        XposedBridge.log(<span class="string">"设定包名："</span>+packagename);</span><br><span class="line">        <span class="keyword">if</span> ((!lpparam.packageName.equals(packagename))||packagename==<span class="keyword">null</span>) &#123;</span><br><span class="line">            XposedBridge.log(<span class="string">"当前程序包名与设定不一致或者包名为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        XposedBridge.log(<span class="string">"目标包名："</span>+lpparam.packageName);</span><br><span class="line">        String str = <span class="string">"java.lang.ClassLoader"</span>;</span><br><span class="line">        String str2 = <span class="string">"loadClass"</span>;</span><br><span class="line"> </span><br><span class="line">        XposedHelpers.findAndHookMethod(str, lpparam.classLoader, str2, String.class, Boolean.TYPE, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.afterHookedMethod(param);</span><br><span class="line">                Class cls = (Class) param.getResult();</span><br><span class="line">                <span class="keyword">if</span> (cls == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//XposedBridge.log("cls == null");</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String name = cls.getName();</span><br><span class="line">                XposedBridge.log(<span class="string">"当前类名："</span> + name);</span><br><span class="line">                <span class="keyword">byte</span>[] bArr = (<span class="keyword">byte</span>[]) Dex_getBytes.invoke(getDex.invoke(cls, <span class="keyword">new</span> Object[<span class="number">0</span>]), <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">if</span> (bArr == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    XposedBridge.log(<span class="string">"数据为空：返回"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                XposedBridge.log(<span class="string">"开始写数据"</span>);</span><br><span class="line">                String dex_path = <span class="string">"/data/data/"</span> + packagename + <span class="string">"/"</span> + packagename + <span class="string">"_"</span> + bArr.length + <span class="string">".dex"</span>;</span><br><span class="line">                XposedBridge.log(dex_path);</span><br><span class="line">                File file = <span class="keyword">new</span> File(dex_path);</span><br><span class="line">                <span class="keyword">if</span> (file.exists()) <span class="keyword">return</span>;</span><br><span class="line">                writeByte(bArr, file.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initRefect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Dex = Class.forName(<span class="string">"com.android.dex.Dex"</span>);</span><br><span class="line">            Dex_getBytes = Dex.getDeclaredMethod(<span class="string">"getBytes"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            getDex = Class.forName(<span class="string">"java.lang.Class"</span>).getDeclaredMethod(<span class="string">"getDex"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">writeByte</span><span class="params">(<span class="keyword">byte</span>[] bArr, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(str);</span><br><span class="line">            outputStream.write(bArr);</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            XposedBridge.log(<span class="string">"文件写出失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=758726&amp;fromguid=hot" target="_blank" rel="noopener">【手机端】腾讯乐固，360加固一键脱壳</a></li>
<li><a href="https://bbs.pediy.com/thread-224105.htm" target="_blank" rel="noopener">安卓xposed脱壳工具FDex2</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Decompile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DiskLruCache解析]]></title>
      <url>https://xch168.github.io/2018/09/23/DiskLruCache-analyze/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>DiskLruCache，是JakeWharton大神开源的作品，用于磁盘缓存，与LruCache内存缓存相对应，都是使用LRU算法。</p>
</blockquote>
<a id="more"></a>
<h3 id="获取DiskLruCache"><a href="#获取DiskLruCache" class="headerlink" title="获取DiskLruCache"></a>获取DiskLruCache</h3><blockquote>
<p>因为DiskLruCache不是Android官方的，所以在Android SDK中找不到，但是得到官方的推荐。</p>
</blockquote>
<p>获取方式一：</p>
<p><a href="https://github.com/JakeWharton/DiskLruCache" target="_blank" rel="noopener">https://github.com/JakeWharton/DiskLruCache</a></p>
<p>获取方式二：</p>
<p><a href="https://android.googlesource.com/platform/libcore/+/jb-mr2.0.0-release/luni/src/main/java/libcore/io/DiskLruCache.java" target="_blank" rel="noopener">https://android.googlesource.com/platform/libcore/+/jb-mr2.0.0-release/luni/src/main/java/libcore/io/DiskLruCache.java</a></p>
<h3 id="DiskLruCache的使用"><a href="#DiskLruCache的使用" class="headerlink" title="DiskLruCache的使用"></a>DiskLruCache的使用</h3><h4 id="打开缓存"><a href="#打开缓存" class="headerlink" title="打开缓存"></a>打开缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> directory    缓存目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> appVersion   当前应用程序的版本号 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valueCount   同一个key可以对应多少个缓存文件，基本都是1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maxSize      最多可以缓存多少字节的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 如果读写缓存失败会抛出IO异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DiskLruCache <span class="title">open</span><span class="params">(File directory, <span class="keyword">int</span> appVersion, <span class="keyword">int</span> valueCount, <span class="keyword">long</span> maxSize)</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>
<h4 id="写入缓存"><a href="#写入缓存" class="headerlink" title="写入缓存"></a>写入缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key会成为缓存文件的文件名，并且必须要和URL是一一对应的，而URL可能包含特殊字符，不能用作文件名，</span></span><br><span class="line"><span class="comment">// 所以对URL进行MD5编码，编码后的字符串是唯一的，并且只会包含0-F字符，符合文件命名规则</span></span><br><span class="line">String key = generateKey(url);</span><br><span class="line">DiskLruCache.Editor editor = mDiskLruCache.edit(key);</span><br><span class="line"><span class="comment">// 通过Editor获取到os是指向缓存文件的输出流，然后把想存的东西写入</span></span><br><span class="line">OutputStream os = editor.newOutputStream(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// ...流操作</span></span><br><span class="line"><span class="comment">// 写完缓存后，调用commit()，来提交缓存；调用abort()，放弃写入的缓存</span></span><br><span class="line">editor.commit();</span><br><span class="line"><span class="comment">// editor.abort();</span></span><br></pre></td></tr></table></figure>
<h4 id="读取缓存"><a href="#读取缓存" class="headerlink" title="读取缓存"></a>读取缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);</span><br><span class="line"><span class="comment">// 通过snapshot获取到输入流，然后对流进行操作</span></span><br><span class="line">InputStream is = snapshot.getInputStream(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// ...流操作</span></span><br></pre></td></tr></table></figure>
<h3 id="journal文件解读"><a href="#journal文件解读" class="headerlink" title="journal文件解读"></a>journal文件解读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">libcore.io.DiskLruCache</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">DIRTY <span class="number">335</span>c4c6028171cfddfbaae1a9c313c52</span><br><span class="line">CLEAN <span class="number">335</span>c4c6028171cfddfbaae1a9c313c52 <span class="number">2342</span></span><br><span class="line">REMOVE <span class="number">335</span>c4c6028171cfddfbaae1a9c313c52</span><br><span class="line">DIRTY <span class="number">1</span>ab96a171faeeee38496d8b330771a7a</span><br><span class="line">CLEAN <span class="number">1</span>ab96a171faeeee38496d8b330771a7a <span class="number">1600</span></span><br><span class="line">READ <span class="number">335</span>c4c6028171cfddfbaae1a9c313c52</span><br><span class="line">READ <span class="number">3400330</span>d1dfc7f3f7f4b8d4d803dfcf6</span><br></pre></td></tr></table></figure>
<h4 id="journal文件头"><a href="#journal文件头" class="headerlink" title="journal文件头"></a>journal文件头</h4><ul>
<li>第一行：固定字符串<code>libcore.io.DiskLruCache</code></li>
<li>第二行：DiskLruCache的版本号，这个值恒为1。</li>
<li>第三行：应用程序的版本号。每当版本号改变，缓存路径下存储的所有数据都会被清空，因为DiskLruCache认为应用更新，所有的数据都应重新获取。</li>
<li>第四行：指每个key对应几个文件，一般为1。</li>
<li>第五行：空行</li>
</ul>
<h4 id="journal文件内容"><a href="#journal文件内容" class="headerlink" title="journal文件内容"></a>journal文件内容</h4><ul>
<li><code>DIRTY</code>：第六行以DIRTY前缀开始，后面跟着缓存文件的key，表示一个entry正在被写入。</li>
<li><code>CLEAN</code>：当写入成功，就会写入一条CLEAN记录，后面的数字记录文件的长度，如果一个key可以对应多个文件，那么就会有多个数字</li>
<li><code>REMOVE</code>：表示写入失败，或者调用remove(key)方法的时候都会写入一条REMOVE记录</li>
<li><code>READ</code>：表示一次读取记录</li>
</ul>
<p><strong>NOTE</strong>：当journal文件记录的操作次数达到2000时，就会触发重构journal的事件，来保证journal文件的大小始终在一个合理的范围内。</p>
<h3 id="DiskLruCache源码解析"><a href="#DiskLruCache源码解析" class="headerlink" title="DiskLruCache源码解析"></a>DiskLruCache源码解析</h3><h4 id="DiskLruCache-open"><a href="#DiskLruCache-open" class="headerlink" title="DiskLruCache#open"></a>DiskLruCache#open</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DiskLruCache <span class="title">open</span><span class="params">(File directory, <span class="keyword">int</span> appVersion, <span class="keyword">int</span> valueCount, <span class="keyword">long</span> maxSize)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (valueCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"valueCount &lt;= 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查journal.bkp文件是否存在(journal的备份文件)</span></span><br><span class="line">    File backupFile = <span class="keyword">new</span> File(directory, JOURNAL_FILE_BACKUP);</span><br><span class="line">    <span class="keyword">if</span> (backupFile.exists()) &#123;</span><br><span class="line">        File journalFile = <span class="keyword">new</span> File(directory, JOURNAL_FILE);</span><br><span class="line">        <span class="comment">// 如果journal文件存在，则删除journal.bkp备份文件</span></span><br><span class="line">        <span class="keyword">if</span> (journalFile.exists()) &#123;</span><br><span class="line">            backupFile.delete();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// journal文件不存在，将bkp文件重命名为journal文件</span></span><br><span class="line">            renameTo(backupFile, journalFile, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prefer to pick up where we left off.</span></span><br><span class="line">    DiskLruCache cache = <span class="keyword">new</span> DiskLruCache(directory, appVersion, valueCount, maxSize);</span><br><span class="line">    <span class="comment">// 判断journal文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (cache.journalFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取journal文件</span></span><br><span class="line">            cache.readJournal();</span><br><span class="line">            cache.processJournal();</span><br><span class="line">            cache.journalWriter = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                    <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(cache.journalFile, <span class="keyword">true</span>), Util.US_ASCII));</span><br><span class="line">            <span class="keyword">return</span> cache;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException journalIsCorrupt) &#123;</span><br><span class="line">            System.out</span><br><span class="line">                    .println(<span class="string">"DiskLruCache "</span></span><br><span class="line">                            + directory</span><br><span class="line">                            + <span class="string">" is corrupt: "</span></span><br><span class="line">                            + journalIsCorrupt.getMessage()</span><br><span class="line">                            + <span class="string">", removing"</span>);</span><br><span class="line">            cache.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// journal文件不存在，则创建缓存目录，重新构造DiskLruCache</span></span><br><span class="line">    directory.mkdirs();</span><br><span class="line">    cache = <span class="keyword">new</span> DiskLruCache(directory, appVersion, valueCount, maxSize);</span><br><span class="line">    <span class="comment">// 重新创建journal文件</span></span><br><span class="line">    cache.rebuildJournal();</span><br><span class="line">    <span class="keyword">return</span> cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="rebuildJournal-："><a href="#rebuildJournal-：" class="headerlink" title="rebuildJournal()："></a>rebuildJournal()：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重新创建journal文件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">rebuildJournal</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (journalWriter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        journalWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建journal.tmp文件</span></span><br><span class="line">    Writer writer = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">            <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(journalFileTmp), Util.US_ASCII));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 写入文件头(5行)</span></span><br><span class="line">        writer.write(MAGIC);</span><br><span class="line">        writer.write(<span class="string">"\n"</span>);</span><br><span class="line">        writer.write(VERSION_1);</span><br><span class="line">        writer.write(<span class="string">"\n"</span>);</span><br><span class="line">        writer.write(Integer.toString(appVersion));</span><br><span class="line">        writer.write(<span class="string">"\n"</span>);</span><br><span class="line">        writer.write(Integer.toString(valueCount));</span><br><span class="line">        writer.write(<span class="string">"\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历lruEntries</span></span><br><span class="line">        <span class="keyword">for</span> (DiskLruCache.Entry entry : lruEntries.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.currentEditor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                writer.write(DIRTY + <span class="string">' '</span> + entry.key + <span class="string">'\n'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writer.write(CLEAN + <span class="string">' '</span> + entry.key + entry.getLengths() + <span class="string">'\n'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (journalFile.exists()) &#123;</span><br><span class="line">        renameTo(journalFile, journalFileBackup, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将journal文件重命名为journal文件</span></span><br><span class="line">    renameTo(journalFileTmp, journalFile, <span class="keyword">false</span>);</span><br><span class="line">    journalFileBackup.delete();</span><br><span class="line"></span><br><span class="line">    journalWriter = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">            <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(journalFile, <span class="keyword">true</span>), Util.US_ASCII));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="readJournal-："><a href="#readJournal-：" class="headerlink" title="readJournal()："></a>readJournal()：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取journal文件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readJournal</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    StrictLineReader reader = <span class="keyword">new</span> StrictLineReader(<span class="keyword">new</span> FileInputStream(journalFile), Util.US_ASCII);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String magic = reader.readLine();</span><br><span class="line">        String version = reader.readLine();</span><br><span class="line">        String appVersionString = reader.readLine();</span><br><span class="line">        String valueCountString = reader.readLine();</span><br><span class="line">        String blank = reader.readLine();</span><br><span class="line">        <span class="comment">// 校验journal文件头</span></span><br><span class="line">        <span class="keyword">if</span> (!MAGIC.equals(magic)</span><br><span class="line">                || !VERSION_1.equals(version)</span><br><span class="line">                || !Integer.toString(appVersion).equals(appVersionString)</span><br><span class="line">                || !Integer.toString(valueCount).equals(valueCountString)</span><br><span class="line">                || !<span class="string">""</span>.equals(blank)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"unexpected journal header: ["</span> + magic + <span class="string">", "</span> + version + <span class="string">", "</span></span><br><span class="line">                    + valueCountString + <span class="string">", "</span> + blank + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lineCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 读取journal文件内容</span></span><br><span class="line">                readJournalLine(reader.readLine());</span><br><span class="line">                lineCount++;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (EOFException endOfJournal) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        redundantOpCount = lineCount - lruEntries.size();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Util.closeQuietly(reader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="readJournalLine-："><a href="#readJournalLine-：" class="headerlink" title="readJournalLine()："></a>readJournalLine()：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取journal文件内容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readJournalLine</span><span class="params">(String line)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> firstSpace = line.indexOf(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">if</span> (firstSpace == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"unexpected journal line: "</span> + line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> keyBegin = firstSpace + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> secondSpace = line.indexOf(<span class="string">' '</span>, keyBegin);</span><br><span class="line">    <span class="keyword">final</span> String key;</span><br><span class="line">    <span class="keyword">if</span> (secondSpace == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取缓存key</span></span><br><span class="line">        key = line.substring(keyBegin);</span><br><span class="line">        <span class="comment">// 如果是REMOVE记录，则调用lruEntries.remove(key)</span></span><br><span class="line">        <span class="keyword">if</span> (firstSpace == REMOVE.length() &amp;&amp; line.startsWith(REMOVE)) &#123;</span><br><span class="line">            lruEntries.remove(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        key = line.substring(keyBegin, secondSpace);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DiskLruCache.Entry entry = lruEntries.get(key);</span><br><span class="line">    <span class="comment">// 如果该key没有加入到lruEntries，则创建并加入</span></span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        entry = <span class="keyword">new</span> DiskLruCache.Entry(key);</span><br><span class="line">        lruEntries.put(key, entry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理CLEAN记录</span></span><br><span class="line">    <span class="keyword">if</span> (secondSpace != -<span class="number">1</span> &amp;&amp; firstSpace == CLEAN.length() &amp;&amp; line.startsWith(CLEAN)) &#123;</span><br><span class="line">        String[] parts = line.substring(secondSpace + <span class="number">1</span>).split(<span class="string">" "</span>);</span><br><span class="line">        entry.readable = <span class="keyword">true</span>;</span><br><span class="line">        entry.currentEditor = <span class="keyword">null</span>;</span><br><span class="line">        entry.setLengths(parts);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (secondSpace == -<span class="number">1</span> &amp;&amp; firstSpace == DIRTY.length() &amp;&amp; line.startsWith(DIRTY)) &#123;</span><br><span class="line">        <span class="comment">// 处理DIRTY记录</span></span><br><span class="line">        entry.currentEditor = <span class="keyword">new</span> DiskLruCache.Editor(entry);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (secondSpace == -<span class="number">1</span> &amp;&amp; firstSpace == READ.length() &amp;&amp; line.startsWith(READ)) &#123;</span><br><span class="line">        <span class="comment">// This work was already done by calling lruEntries.get().</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"unexpected journal line: "</span> + line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="processJournal-："><a href="#processJournal-：" class="headerlink" title="processJournal()："></a>processJournal()：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理journal文件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processJournal</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    deleteIfExists(journalFileTmp);</span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;DiskLruCache.Entry&gt; i = lruEntries.values().iterator(); i.hasNext(); ) &#123;</span><br><span class="line">        DiskLruCache.Entry entry = i.next();</span><br><span class="line">        <span class="keyword">if</span> (entry.currentEditor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; valueCount; t++) &#123;</span><br><span class="line">                <span class="comment">// 统计所有可用cache占据的容量</span></span><br><span class="line">                size += entry.lengths[t];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 删除非法DIRTY状态的entry,并删除对应的文件</span></span><br><span class="line">            entry.currentEditor = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; valueCount; t++) &#123;</span><br><span class="line">                deleteIfExists(entry.getCleanFile(t));</span><br><span class="line">                deleteIfExists(entry.getDirtyFile(t));</span><br><span class="line">            &#125;</span><br><span class="line">            i.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DiskLruCache-edit"><a href="#DiskLruCache-edit" class="headerlink" title="DiskLruCache#edit"></a>DiskLruCache#edit</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> DiskLruCache.<span class="function">Editor <span class="title">edit</span><span class="params">(String key, <span class="keyword">long</span> expectedSequenceNumber)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    checkNotClosed();</span><br><span class="line">    <span class="comment">// 验证key，必须是字母、数字、下划线、横线(-)组成，且长度在1-120之间</span></span><br><span class="line">    validateKey(key);</span><br><span class="line">    <span class="comment">// 获取实体</span></span><br><span class="line">    DiskLruCache.Entry entry = lruEntries.get(key);</span><br><span class="line">    <span class="keyword">if</span> (expectedSequenceNumber != ANY_SEQUENCE_NUMBER &amp;&amp; (entry == <span class="keyword">null</span></span><br><span class="line">            || entry.sequenceNumber != expectedSequenceNumber)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// Snapshot is stale.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实体不存在，则创建一个Entry并加入到lruEntries</span></span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        entry = <span class="keyword">new</span> DiskLruCache.Entry(key);</span><br><span class="line">        lruEntries.put(key, entry);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entry.currentEditor != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 该实体正在被编辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Editor并赋值给entry.currentEditor</span></span><br><span class="line">    DiskLruCache.Editor editor = <span class="keyword">new</span> DiskLruCache.Editor(entry);</span><br><span class="line">    entry.currentEditor = editor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flush the journal before creating files to prevent file leaks.</span></span><br><span class="line">    journalWriter.write(DIRTY + <span class="string">' '</span> + key + <span class="string">'\n'</span>);</span><br><span class="line">    journalWriter.flush();</span><br><span class="line">    <span class="keyword">return</span> editor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Editor-newOutputStream"><a href="#Editor-newOutputStream" class="headerlink" title="Editor#newOutputStream"></a>Editor#newOutputStream</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个文件输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 缓存文件索引，一个key可能对应多个文件，当对应一个文件时，只要传0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OutputStream <span class="title">newOutputStream</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (DiskLruCache.<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.currentEditor != <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!entry.readable) &#123;</span><br><span class="line">            written[index] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取dirty file对象，这是一个中转文件，文件名格式key.index.tmp</span></span><br><span class="line">        File dirtyFile = entry.getDirtyFile(index);</span><br><span class="line">        FileOutputStream outputStream;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputStream = <span class="keyword">new</span> FileOutputStream(dirtyFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// Attempt to recreate the cache directory.</span></span><br><span class="line">            directory.mkdirs();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream = <span class="keyword">new</span> FileOutputStream(dirtyFile);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e2) &#123;</span><br><span class="line">                <span class="comment">// We are unable to recover. Silently eat the writes.</span></span><br><span class="line">                <span class="keyword">return</span> NULL_OUTPUT_STREAM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DiskLruCache.Editor.FaultHidingOutputStream(outputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Editor-commit"><a href="#Editor-commit" class="headerlink" title="Editor#commit"></a>Editor#commit</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否发生错误</span></span><br><span class="line">    <span class="keyword">if</span> (hasErrors) &#123;</span><br><span class="line">        completeEdit(<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">        remove(entry.key); <span class="comment">// The previous entry is stale.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        completeEdit(<span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    committed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Editor-completeEdit"><a href="#Editor-completeEdit" class="headerlink" title="Editor#completeEdit"></a>Editor#completeEdit</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">completeEdit</span><span class="params">(DiskLruCache.Editor editor, <span class="keyword">boolean</span> success)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DiskLruCache.Entry entry = editor.entry;</span><br><span class="line">    <span class="keyword">if</span> (entry.currentEditor != editor) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否写入成功，且是第一次写入</span></span><br><span class="line">    <span class="keyword">if</span> (success &amp;&amp; !entry.readable) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!editor.written[i]) &#123;</span><br><span class="line">                editor.abort();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Newly created entry didn't create value for index "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!entry.getDirtyFile(i).exists()) &#123;</span><br><span class="line">                editor.abort();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</span><br><span class="line">        File dirty = entry.getDirtyFile(i);</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dirty.exists()) &#123;</span><br><span class="line">                File clean = entry.getCleanFile(i);</span><br><span class="line">                <span class="comment">// 将dirtyFile重命名为cleanFile，更新size的大小</span></span><br><span class="line">                dirty.renameTo(clean);</span><br><span class="line">                <span class="keyword">long</span> oldLength = entry.lengths[i];</span><br><span class="line">                <span class="keyword">long</span> newLength = clean.length();</span><br><span class="line">                entry.lengths[i] = newLength;</span><br><span class="line">                size = size - oldLength + newLength;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            deleteIfExists(dirty);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    redundantOpCount++;</span><br><span class="line">    entry.currentEditor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 如果成功，写入一条CLEAN记录</span></span><br><span class="line">    <span class="keyword">if</span> (entry.readable | success) &#123;</span><br><span class="line">        entry.readable = <span class="keyword">true</span>;</span><br><span class="line">        journalWriter.write(CLEAN + <span class="string">' '</span> + entry.key + entry.getLengths() + <span class="string">'\n'</span>);</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            entry.sequenceNumber = nextSequenceNumber++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则，写入一条REMOVE记录</span></span><br><span class="line">        lruEntries.remove(entry.key);</span><br><span class="line">        journalWriter.write(REMOVE + <span class="string">' '</span> + entry.key + <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    journalWriter.flush();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; maxSize || journalRebuildRequired()) &#123;</span><br><span class="line">        executorService.submit(cleanupCallable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DiskLruCache-get"><a href="#DiskLruCache-get" class="headerlink" title="DiskLruCache#get"></a>DiskLruCache#get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> DiskLruCache.<span class="function">Snapshot <span class="title">get</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    checkNotClosed();</span><br><span class="line">    validateKey(key);</span><br><span class="line">    DiskLruCache.Entry entry = lruEntries.get(key);</span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!entry.readable) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open all streams eagerly to guarantee that we see a single published</span></span><br><span class="line">    <span class="comment">// snapshot. If we opened streams lazily then the streams could come</span></span><br><span class="line">    <span class="comment">// from different edits.</span></span><br><span class="line">    InputStream[] ins = <span class="keyword">new</span> InputStream[valueCount];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</span><br><span class="line">            ins[i] = <span class="keyword">new</span> FileInputStream(entry.getCleanFile(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// A file must have been deleted manually!</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ins[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Util.closeQuietly(ins[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    redundantOpCount++;</span><br><span class="line">    <span class="comment">// 往journal文件写入一条READ记录</span></span><br><span class="line">    journalWriter.append(READ + <span class="string">' '</span> + key + <span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">if</span> (journalRebuildRequired()) &#123;</span><br><span class="line">        executorService.submit(cleanupCallable);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 将cleanFile的FileInputStream封装成Snapshot并返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DiskLruCache.Snapshot(key, entry.sequenceNumber, ins, entry.lengths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/lmj623565791/article/details/47251585" target="_blank" rel="noopener">Android DiskLruCache 源码解析 硬盘缓存的绝佳方案</a></li>
<li><a href="https://blog.csdn.net/guolin_blog/article/details/28863651" target="_blank" rel="noopener">Android DiskLruCache完全解析，硬盘缓存的最佳方案</a></li>
<li><a href="https://www.jianshu.com/p/ed5668590900" target="_blank" rel="noopener">优雅的构建 Android 项目之磁盘缓存</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LruCache解析]]></title>
      <url>https://xch168.github.io/2018/09/23/LruCache-analyze/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p><code>LRU</code>(Least Recently Used)，即最近最少使用算法，它的核心思想是当缓存满时，会优先淘汰那些近期最少使用的缓存对象。</p>
<p>该算法被应用在<code>LruCache</code>和<code>DiskLruCache</code>，分别用于实现内存缓存和磁盘缓存。</p>
</blockquote>
<a id="more"></a>
<h3 id="LruCache的介绍"><a href="#LruCache的介绍" class="headerlink" title="LruCache的介绍"></a>LruCache的介绍</h3><blockquote>
<p>LruCache是个泛型类，主要算法原理是把最近使用的对象用强引用存储在<code>LinkedHashMap</code>中，当缓存满时，把最近最少使用的对象从内存中移除，并提供了get和put方法来完成缓存的获取和添加操作。</p>
</blockquote>
<h3 id="LruCache的使用"><a href="#LruCache的使用" class="headerlink" title="LruCache的使用"></a>LruCache的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置LruCache缓存的大小，一般为当前进程可用容量的1/8</span></span><br><span class="line"><span class="keyword">int</span> cacheSize = (<span class="keyword">int</span>) (Runtime.getRuntime().totalMemory() / <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">LruCache&lt;String, Bitmap&gt; mMemoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写sizeOf方法，计算出要缓存的每张图片的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.getByteCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>NOTE</strong>：缓存的总容量和每个缓存对象的大小所用的单位要一致。</p>
<h3 id="LruCache的实现原理"><a href="#LruCache的实现原理" class="headerlink" title="LruCache的实现原理"></a>LruCache的实现原理</h3><blockquote>
<p>LruCache的核心思想：维护一个缓存对象列表，其中对象列表的排列方式是按照访问顺序实现的，即一直没有访问的对象，将放在队头，最早被淘汰，而最近访问的对象将放在队尾，最晚被淘汰。</p>
</blockquote>
<p><img src="/2018/09/23/LruCache-analyze/LRU.png" alt="LRU"></p>
<blockquote>
<p>LruCache的实现是使用LinkedHashMap来维护这个对象队列的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  initialCapacity 初始化大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  loadFactor      加载因子，用于当容量不足，自动扩大</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  accessOrder     true访问顺序，false为插入顺序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LinkedHashMap使用示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">        map.put(<span class="string">"A"</span>, <span class="string">"A"</span>);</span><br><span class="line">        map.put(<span class="string">"B"</span>, <span class="string">"B"</span>);</span><br><span class="line">        map.put(<span class="string">"C"</span>, <span class="string">"C"</span>);</span><br><span class="line">        map.put(<span class="string">"D"</span>, <span class="string">"D"</span>);</span><br><span class="line">        map.put(<span class="string">"E"</span>, <span class="string">"E"</span>);</span><br><span class="line">        map.put(<span class="string">"F"</span>, <span class="string">"F"</span>);</span><br><span class="line"></span><br><span class="line">        map.get(<span class="string">"A"</span>);</span><br><span class="line">        map.get(<span class="string">"B"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            Log.i(<span class="string">"TAG"</span>, <span class="string">"key:"</span> + entry.getKey() + <span class="string">" value:"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I/TAG: key:C value:C</span><br><span class="line">I/TAG: key:D value:D</span><br><span class="line">I/TAG: key:E value:E</span><br><span class="line">I/TAG: key:F value:F</span><br><span class="line">I/TAG: key:A value:A</span><br><span class="line">I/TAG: key:B value:B</span><br></pre></td></tr></table></figure>
<h3 id="LruCache的源码解析"><a href="#LruCache的源码解析" class="headerlink" title="LruCache的源码解析"></a>LruCache的源码解析</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">    <span class="keyword">this</span>.map = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从构造方法可以看出，使用的是LinkedHashMap的访问顺序。</p>
<h4 id="put-方法"><a href="#put-方法" class="headerlink" title="put()方法"></a>put()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null || value == null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    V previous;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 插入的缓存对象数加1</span></span><br><span class="line">        putCount++;</span><br><span class="line">        <span class="comment">// 增加缓存对象的大小</span></span><br><span class="line">        size += safeSizeOf(key, value);</span><br><span class="line">        <span class="comment">// 向map中加入缓存对象</span></span><br><span class="line">        previous = map.put(key, value);</span><br><span class="line">        <span class="comment">// 如果有缓存对象，则缓存大小恢复到插入前</span></span><br><span class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">            size -= safeSizeOf(key, previous);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// entryRemoved是空方法，可以自行实现</span></span><br><span class="line">    <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// false表示调用的put()或remove</span></span><br><span class="line">        <span class="comment">// true表示因为内存不足，为了腾出空间</span></span><br><span class="line">        entryRemoved(<span class="keyword">false</span>, key, previous, value);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 调整缓存大小</span></span><br><span class="line">    trimToSize(maxSize);</span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="trimToSize-方法"><a href="#trimToSize-方法" class="headerlink" title="trimToSize()方法"></a>trimToSize()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size &lt; <span class="number">0</span> || (map.isEmpty() &amp;&amp; size != <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(getClass().getName() + <span class="string">".sizeOf() is reporting inconsistent results!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果缓存大小size小于配置的最大缓存，则跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (size &lt;= maxSize) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 获取最老的对象，即队头元素，近期最少访问的元素</span></span><br><span class="line">            Map.Entry&lt;K, V&gt; toEvict = map.eldest();</span><br><span class="line">            <span class="keyword">if</span> (toEvict == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            key = toEvict.getKey();</span><br><span class="line">            value = toEvict.getValue();</span><br><span class="line">            <span class="comment">// 删除最近最少使用的对象，并更新缓存的大小</span></span><br><span class="line">            map.remove(key);</span><br><span class="line">            size -= safeSizeOf(key, value);</span><br><span class="line">            evictionCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        entryRemoved(<span class="keyword">true</span>, key, value, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    V mapValue;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取对应的缓存对象</span></span><br><span class="line">        <span class="comment">// get()方法会将访问的元素更新到队列的尾部</span></span><br><span class="line">        mapValue = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            hitCount++;</span><br><span class="line">            <span class="keyword">return</span> mapValue;</span><br><span class="line">        &#125;</span><br><span class="line">        missCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不存在缓存对象，则创建，create方法是空方法，可以自行实现</span></span><br><span class="line">    V createdValue = create(key);</span><br><span class="line">    <span class="keyword">if</span> (createdValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        createCount++;</span><br><span class="line">        <span class="comment">// 将创建的对象放到缓存里</span></span><br><span class="line">        mapValue = map.put(key, createdValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果缓存中存在该对象，则恢复缓存中的对象</span></span><br><span class="line">        <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(key, mapValue);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            size += safeSizeOf(key, createdValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        entryRemoved(<span class="keyword">false</span>, key, createdValue, mapValue);</span><br><span class="line">        <span class="keyword">return</span> mapValue;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        trimToSize(maxSize);</span><br><span class="line">        <span class="keyword">return</span> createdValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LinkedHashMap的get()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder)</span><br><span class="line">        <span class="comment">// 重新排序该对象，将该对象放到队列尾部</span></span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">    <span class="keyword">return</span> e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>afterNodeAccess()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">    LinkedHashMapEntry&lt;K,V&gt; last;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMapEntry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMapEntry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://www.jianshu.com/p/b49a111147ee" target="_blank" rel="noopener">彻底解析Android缓存机制——LruCache</a></li>
<li><a href="https://github.com/LittleFriendsGroup/AndroidSdkSourceAnalysis/blob/master/article/LruCache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.md" target="_blank" rel="noopener">LruCache 源码解析</a></li>
<li><a href="https://blog.csdn.net/maosidiaoxian/article/details/51393753" target="_blank" rel="noopener">Android源码解析——LruCache</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android全局异常处理]]></title>
      <url>https://xch168.github.io/2018/09/09/android-crash-handler/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>当Android应用程序出现未捕获的异常，都会弹出一个强制退出的弹框，在这种情况下，用户体验非常差。且发布到线上后，开发没法定位Bug的位置，这就需要一个能全局捕获异常，并且将这个异常log上传到服务器的功能。</p>
</blockquote>
<a id="more"></a>
<h3 id="CrashHandler"><a href="#CrashHandler" class="headerlink" title="CrashHandler"></a>CrashHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的异常处理类，实现UncaughtExceptionHandler接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrashHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CrashHandler INSTANCE = <span class="keyword">new</span> CrashHandler();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CrashHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CrashHandler <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当有未捕获异常发生，就会调用该函数，</span></span><br><span class="line"><span class="comment">     * 可以在该函数中对异常信息捕获并上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 发生异常的线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理异常,可以自定义弹框，可以上传异常信息</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 干掉当前的程序   </span></span><br><span class="line">        android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在Application中注册CrashHandler"><a href="#在Application中注册CrashHandler" class="headerlink" title="在Application中注册CrashHandler"></a>在Application中注册CrashHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        </span><br><span class="line">        CrashHandler handler = CrashHandler.getInstance();</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://lrh1993.gitbooks.io/android_interview_guide/content/android/advance/exception.html" target="_blank" rel="noopener">Android全局异常处理</a></li>
<li><a href="https://blog.csdn.net/XiNanHeiShao/article/details/73302724" target="_blank" rel="noopener">Android全局异常捕获机制</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中的单位(dp、sp、dpi)]]></title>
      <url>https://xch168.github.io/2018/09/09/android-size-unit/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>因为不同的屏幕具有不同的像素密度，因此同样数量的像素在不同设备上可能对应于不同的物理尺寸。因此要使用<code>dp</code>和<code>sp</code>单位。</p>
<p><code>dp</code>：是一种密度无关像素，对应于160dpi下像素的物理尺寸。</p>
<p><code>sp</code>：是相同的基本单位，但它会按用户首选的文本尺寸进行缩放（属于缩放无关像素），因此在定义文本尺寸时应使用此计量单位(但切勿为布局尺寸使用此单位)。</p>
</blockquote>
<a id="more"></a>
<h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><blockquote>
<p>像素，屏幕上显示数据的最基本的点。</p>
</blockquote>
<h3 id="dpi"><a href="#dpi" class="headerlink" title="dpi"></a>dpi</h3><blockquote>
<p><code>dpi</code>(Dots Per Inch)：每英寸的点数，也称像素密度，即屏幕对角线像素值÷英寸值。</p>
</blockquote>
<p><img src="/2018/09/09/android-size-unit/dpi.png" alt="dpi"></p>
<p>例：720x1280分辨率5.7英寸的手机:</p>
<p><img src="/2018/09/09/android-size-unit/dpi-calc.png" alt="dpi-calc"></p>
<h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><blockquote>
<p><code>dp</code>：在每英寸160点的显示屏上，1dp = 1px，即<strong>px = dp(dpi / 160)</strong></p>
</blockquote>
<h3 id="sp"><a href="#sp" class="headerlink" title="sp"></a>sp</h3><blockquote>
<p><code>sp</code>(Scaled Pixels)：通常用于指定字体的大小，当用户修改手机显示的字体时，字体大小会随之改变。</p>
</blockquote>
<h3 id="单位转换"><a href="#单位转换" class="headerlink" title="单位转换"></a>单位转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SizeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(Context context, <span class="keyword">float</span> dpValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> density = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (dpValue * density + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(Context context, <span class="keyword">float</span> spValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (spValue * fontScale + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">px2dp</span><span class="params">(Context context, <span class="keyword">float</span> pxValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> density = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (pxValue / density + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">px2sp</span><span class="params">(Context context, <span class="keyword">float</span> pxValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (pxValue / fontScale + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用TypedValue进行单位转换"><a href="#使用TypedValue进行单位转换" class="headerlink" title="使用TypedValue进行单位转换"></a>使用TypedValue进行单位转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(Context context, <span class="keyword">float</span> dpValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dpValue, context.getResources().getDisplayMetrics());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(Context context, <span class="keyword">float</span> spValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, spValue, context.getResources().getDisplayMetrics());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>TypedValue.applyDimension</code>源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypedValue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">applyDimension</span><span class="params">(<span class="keyword">int</span> unit, <span class="keyword">float</span> value, DisplayMetrics metrics)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (unit) &#123;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_PX:</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_DIP:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.density;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_SP:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.scaledDensity;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_PT:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi * (<span class="number">1.0f</span>/<span class="number">72</span>);</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_IN:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_MM:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi * (<span class="number">1.0f</span>/<span class="number">25.4f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/training/multiscreen/screendensities" target="_blank" rel="noopener">支持不同密度</a></li>
<li><a href="https://blog.csdn.net/jiangwei0910410003/article/details/40509571" target="_blank" rel="noopener">Android中dp,px,sp概念梳理以及如何做到屏幕适配</a></li>
<li><a href="https://www.jianshu.com/p/384cde7e4f16" target="_blank" rel="noopener">Android中px, dp, sp单位转换</a></li>
<li><a href="http://www.cnblogs.com/tinyphp/p/3782097.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/tinyphp/p/3782097.html" target="_blank" rel="noopener">Android：布局单位换算</a></a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ConstraintLayout(约束布局)的使用]]></title>
      <url>https://xch168.github.io/2018/09/09/ConstraintLayout-usage/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>ConstraintLayout(约束布局)的出现是为了在Android应用布局中保持扁平的层次结构，减少布局的嵌套，为应用创建响应快速而灵敏的界面。ConstraintLayout可以替代其他布局。</p>
</blockquote>
<a id="more"></a>
<h3 id="导库"><a href="#导库" class="headerlink" title="导库"></a>导库</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.android.support.constraint:constraint-layout:1.1.2'</span></span><br></pre></td></tr></table></figure>
<h3 id="ConstraintLayout的用法"><a href="#ConstraintLayout的用法" class="headerlink" title="ConstraintLayout的用法"></a>ConstraintLayout的用法</h3><h4 id="Relative-position"><a href="#Relative-position" class="headerlink" title="Relative position"></a>Relative position</h4><blockquote>
<p>ConstraintLayout具有RelativeLayout的能力，可以将一个控件置于相对于另一个控件的位置。</p>
</blockquote>
<p><strong>示例</strong>：将B按钮放在A按钮的右边</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/relative-positioning.png" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/buttonA"</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/buttonB"</span> <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toRightOf</span>=<span class="string">"@+id/buttonA"</span> /&gt;</span> <span class="comment">&lt;!--B控件的左边与A控件右边对齐--&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>控件的边界名</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/relative-positioning-constraints.png" alt="relative-positioning-constraints"></p>
<p><strong>其他相关属性</strong></p>
<ul>
<li>layout_constraintLeft_toLeftOf</li>
<li>layout_constraintLeft_toRightOf</li>
<li>layout_constraintRight_toLeftOf</li>
<li>layout_constraintRight_toRightOf</li>
<li>layout_constraintTop_toTopOf</li>
<li>layout_constraintTop_toBottomOf</li>
<li>layout_constraintBottom_toTopOf</li>
<li>layout_constraintBottom_toBottomOf</li>
<li>layout_constraintBaseline_toBaselineOf</li>
<li>layout_constraintStart_toEndOf</li>
<li>layout_constraintStart_toStartOf</li>
<li>layout_constraintEnd_toStartOf</li>
<li>layout_constraintEnd_toEndOf</li>
</ul>
<p><strong>这些属性会引用另一个控件的<code>id</code>或者<code>parent</code>(这会引用父容器，即ConstraintLayout)</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/buttonB"</span> <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Margins"><a href="#Margins" class="headerlink" title="Margins"></a>Margins</h4><blockquote>
<p>在ConstraintLayout中，layout_margin及其子属性的作用都被复写，margin属性只对其相约束的View起作用。</p>
</blockquote>
<p><img src="/2018/09/09/ConstraintLayout-usage/relative-positioning-margin.png" alt="relative-positioning-margin"></p>
<p><strong>示例</strong>1：有约束属性</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/margin-sample1.png" alt="margin-sample1"></p>
<p><strong>示例</strong>2：没有约束属性，margin就会失效</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/margin-sample2.png" alt="margin-sample2"></p>
<h4 id="GONE-Margins"><a href="#GONE-Margins" class="headerlink" title="GONE Margins"></a>GONE Margins</h4><blockquote>
<p>当被约束的目标对象的可见性为<code>View.GONE</code>，可以使用<code>gone margin</code>来设置，它只会在目标Target为<code>GONE</code>的时候生效。</p>
</blockquote>
<p><strong>相关属性</strong>：</p>
<ul>
<li>layout_goneMarginStart</li>
<li>layout_goneMarginEnd</li>
<li>layout_goneMarginLeft</li>
<li>layout_goneMarginTop</li>
<li>layout_goneMarginRight</li>
<li>layout_goneMarginBottom</li>
</ul>
<p><strong>示例1</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/gone-margin-1.png" alt="gone-margin-1"></p>
<p><strong>示例2</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/gone-margin-2.png" alt="gone-margin-2"></p>
<h4 id="Bias"><a href="#Bias" class="headerlink" title="Bias"></a>Bias</h4><p>在ConstraintLayout中没有直接的属性让一个控件水平居中，或者竖直居中，可以使用如下方式：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/bias-center.png" alt="bias-center"></p>
<p>如果想要将控件在水平方向偏向左、或者在竖直方向偏向一个方向，就可以配合使用<code>bias</code>属性：</p>
<ul>
<li>layout_constraintHorizontal_bias</li>
<li>layout_constraintVertical_bias</li>
</ul>
<blockquote>
<p>居中情况下，bias的默认值为0.5，取值范围是<code>0~1</code>，是以left或top为始起边界。</p>
</blockquote>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/bias.png" alt="bias"></p>
<h4 id="Circular-positioning-圆形定位"><a href="#Circular-positioning-圆形定位" class="headerlink" title="Circular positioning(圆形定位)"></a>Circular positioning(圆形定位)</h4><blockquote>
<p>可以使用角度和距离来约束一个控件相对于另一个控件的位置。</p>
</blockquote>
<p><img src="/2018/09/09/ConstraintLayout-usage/circle.png" alt="circle"></p>
<p><strong>相关属性</strong>：</p>
<ul>
<li>layout_constraintCircle：参照控件的id</li>
<li>layout_constraintCircleRadius：两个控件中心连线的距离</li>
<li>layout_constraintCircleAngle：当前View的中心与目标View的中心的连线与Y轴方向的夹角（取值：0~360）</li>
</ul>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/circle-sample.png" alt="circle-sample"></p>
<h4 id="Dimensions-constraints"><a href="#Dimensions-constraints" class="headerlink" title="Dimensions constraints"></a>Dimensions constraints</h4><blockquote>
<p>ConstraintLayout中有3中方式来设置子View的宽高尺寸：</p>
<ul>
<li><strong>Xdp</strong>，X为具体数值</li>
<li><strong>WARP_CONTENT</strong> </li>
<li><strong>0dp</strong>，0dp代表<code>MATCH_CONSTRAINT</code>，ConstraintLayout不推荐使用<del>MATCH_PARENT</del></li>
</ul>
</blockquote>
<h5 id="MATCH-CONSTRAINT"><a href="#MATCH-CONSTRAINT" class="headerlink" title="MATCH_CONSTRAINT"></a>MATCH_CONSTRAINT</h5><p><strong>示例</strong>1：0dp的使用，可以看到，View的宽度就是父容器的宽度</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/0dp.png" alt="0dp"></p>
<p><strong>示例2</strong>：B按钮被拉伸</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/0dp2.png" alt="0dp2"></p>
<p>当控件的尺寸被设置为<code>MATCH_CONSTRAINT</code>时，默认情况下尺寸会被设置成占用所有可用空间，可用使用下面几个属性进行约束：</p>
<ul>
<li>layout_constraintWidth_min</li>
<li>layout_constraintHeight_min</li>
<li>layout_constraintWidth_max</li>
<li>layout_constraintHeight_max</li>
<li>layout_constraintWidth_percent</li>
<li>layout_constraintHeight_percent</li>
</ul>
<h5 id="WRAP-CONTENT-enforcing-constraints（强制约束）"><a href="#WRAP-CONTENT-enforcing-constraints（强制约束）" class="headerlink" title="WRAP_CONTENT : enforcing constraints（强制约束）"></a>WRAP_CONTENT : enforcing constraints（强制约束）</h5><blockquote>
<p>如果一个View的尺寸被设置为<code>wrap_content</code>，那么当View的内容太多时，可能会超出约束规定的范围，约束布局提供了两个属性来限制View的尺寸:</p>
<ul>
<li>layout_constrainedWidth=”true|false”，默认为false</li>
<li>layout_constrainedHeight=”true|false”，默认为false</li>
</ul>
</blockquote>
<p><strong>示例1</strong>：默认情况下，B控件由于内容较多，高度超出了约束规定的范围。</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/wrap1.png" alt="wrap1"></p>
<p><strong>示例2</strong>：限制高度</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/wrap2.png" alt="wrap2"></p>
<h5 id="Percent-dimension"><a href="#Percent-dimension" class="headerlink" title="Percent dimension"></a>Percent dimension</h5><p>使用百分比步骤</p>
<ul>
<li>需要将宽或高设置为<code>MATCH_CONSTRAINT</code>(0dp)</li>
<li>设置<code>layout_constraintWidth_percent</code>或<code>layout_constraintHeight_percent</code>，值为<code>0~1</code></li>
</ul>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/percent.png" alt="percent"></p>
<h4 id="Ratio"><a href="#Ratio" class="headerlink" title="Ratio"></a>Ratio</h4><blockquote>
<p>ConstrainLayout提供了<code>ratio</code>属性，用来限制View的宽高比例。</p>
<p>使用<code>Ratio</code>属性，宽高两个尺寸中至少要一个是<code>MATCH_CONSTRAINT</code>(0dp)</p>
<p>默认情况下，1:2，表示宽:高，宽为1，高为2</p>
<p>宽高都为<code>MATCH_CONSTRAINT</code>时，可以在比例前加W或者H：</p>
<p><code>W,1:2</code>：表示宽=2，高=1，即H:W = 1:2</p>
<p><code>H,1:2</code>：表示高=2，宽=1，即W:H = 1:2</p>
</blockquote>
<p><strong>示例1</strong>：2:1</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/ratio1.png" alt="ratio1"></p>
<p><strong>示例2</strong>：H,16:9（宽度占满父控件，约束高度为宽的9/16）</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/ratio2.png" alt="ratio2"></p>
<p><strong>示例2</strong>：W,1:5（高度占满父控件，宽度为高度的1/5）</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/ratio3.png" alt="ratio3"></p>
<p><strong>示例3</strong>：指定宽度为屏幕一半，并保持比例</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/ratio4.png" alt="ratio4"></p>
<h4 id="Chains"><a href="#Chains" class="headerlink" title="Chains"></a>Chains</h4><blockquote>
<p>链使我们能够对一组在水平或竖直方向互相关联的控件的属性进行统一管理。</p>
<p>成为链条的条件：</p>
<p><strong>一组控件它们通过一个双向的约束关系链接起来，并且链的属性由一条链的头结点控制。</strong></p>
</blockquote>
<p><img src="/2018/09/09/ConstraintLayout-usage/chains.png" alt="chains"></p>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/chains1.png" alt="chains1"></p>
<h5 id="Chain-style"><a href="#Chain-style" class="headerlink" title="Chain style"></a>Chain style</h5><p>设定链条样式的属性：</p>
<ul>
<li>layout_constraintHorizontal_chainStyle：水平链条的样式</li>
<li>layout_constraintVertical_chainStyle：竖直链条的样式</li>
</ul>
<p><strong>链的样式</strong>:</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/chains-styles.png" alt="chains-styles"></p>
<h5 id="Weighted-chains"><a href="#Weighted-chains" class="headerlink" title="Weighted chains"></a>Weighted chains</h5><blockquote>
<p>权重链，宽或高需要设置为<code>MATCH_CONSTRAINT</code>。</p>
<p>使用<code>layout_constraintHorizontal_weight</code>或<code>layout_constraintVertical_weight</code>设置对应的权重</p>
</blockquote>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/weighted-chains.png" alt="weighted-chains"></p>
<h3 id="constraint其他组件的用法"><a href="#constraint其他组件的用法" class="headerlink" title="constraint其他组件的用法"></a>constraint其他组件的用法</h3><h4 id="Guideline"><a href="#Guideline" class="headerlink" title="Guideline"></a>Guideline</h4><blockquote>
<p>Guideline，是一个辅助控件，可见性为<code>GONE</code>，主要作用是充当一个锚点。</p>
</blockquote>
<p><strong>设置Guidline的方向</strong>：</p>
<ul>
<li>android:orientation=”horizontal”：高度0dp，宽度与父容器等宽</li>
<li>android:orientation=”vertical”：宽度0dp，高度与父容器等高</li>
</ul>
<p><strong>设置Guidline的位置</strong>：</p>
<ul>
<li>layout_constraintGuide_begin：距离父容器左边或者顶部的距离</li>
<li>layout_constraintGuide_end：距离父容器右边或者底部的距离</li>
<li>layout_constraintGuide_percent：距离父容器左边或者顶部的距离占父容器的宽或者高的百分比</li>
</ul>
<p><strong>示例</strong></p>
<p><img src="/2018/09/09/ConstraintLayout-usage/guidline.png" alt="guidline"></p>
<h4 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h4><blockquote>
<p>Barrier，译为屏障，是一个虚拟的辅助控件，用来防止它引用的View的位置超过自己。</p>
</blockquote>
<p><strong>相关属性</strong>：</p>
<ul>
<li>barrierDirection=”left | top | right | bottom | start | end”：设置屏障的方向</li>
<li>constraint_referenced_ids=”id1,id2,…,idn”：设置要限制在屏障内的控件</li>
</ul>
<p><strong>示例</strong>：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/barrier.png" alt="barrier"></p>
<h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><blockquote>
<p>Group，用于控制多个控件的可见性。</p>
</blockquote>
<p><img src="/2018/09/09/ConstraintLayout-usage/group.png" alt="group"></p>
<h4 id="Placeholder"><a href="#Placeholder" class="headerlink" title="Placeholder"></a>Placeholder</h4><blockquote>
<p>Placeholder，占位符，可以用来放置其他View，用这个可以写一些布局模板。</p>
</blockquote>
<p><strong>示例</strong>：</p>
<p>模板文件：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/template.png" alt="template"></p>
<blockquote>
<p><strong>tools:parentTag</strong>：设为ConstraintLayout，使得编辑器将当前merge标签当做约束布局来预览。</p>
<p><strong>content</strong>：是要填入这个占位符的View的id。</p>
</blockquote>
<p>引用模板：</p>
<p><img src="/2018/09/09/ConstraintLayout-usage/use-template.png" alt="use-template"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/reference/android/support/constraint/ConstraintLayout" target="_blank" rel="noopener">ConstraintLayout</a></li>
<li><a href="https://www.jianshu.com/p/a74557359882" target="_blank" rel="noopener">实战篇ConstraintLayout的崛起之路</a></li>
<li><a href="https://blog.csdn.net/lmj623565791/article/details/78011599" target="_blank" rel="noopener">ConstraintLayout 完全解析 快来优化你的布局吧</a></li>
<li><a href="https://blog.csdn.net/guolin_blog/article/details/53122387" target="_blank" rel="noopener">Android新特性介绍，ConstraintLayout完全解析</a></li>
<li><a href="https://mp.weixin.qq.com/s/gGR2itbY7hh9fo61SxaMQQ" target="_blank" rel="noopener">解析ConstraintLayout的性能优势</a></li>
<li><a href="https://www.jianshu.com/p/4290b86289c8" target="_blank" rel="noopener">ConstraintLayout学习笔记</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java注解处理器]]></title>
      <url>https://xch168.github.io/2018/08/26/java-annotation-processor/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>注解处理器（Annotation Processor），是<code>javac</code>的一个工具，用来在编译时扫描和处理注解。</p>
<p>一个注解处理器以Java代码（或者编译过得字节码）作为输入，生成<code>.java</code>文件作为输出。</p>
</blockquote>
<a id="more"></a>
<p>接下来我们模仿<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">ButterKnife</a> 实现一个<code>@BindView</code>的注解来了解Java注解处理器的使用。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="/2018/08/26/java-annotation-processor/apt-project.png" alt="apt-project"></p>
<p><strong>模块说明：</strong></p>
<p><code>bindview-annotation</code>：定义注解，<code>@BindView</code>。<br><code>bindview-compiler</code>：定义注解处理器，处理被<code>@BindView</code>标记的代码，并在编译时生成<code>xxxActivity_ViewBinding.java</code><br><code>bindview-api</code>：工具类，调用<code>xxxActivity_ViewBinding.java</code>中的方法，实现<code>View</code>的绑定。</p>
<h3 id="bindview-annotation-自定义注解"><a href="#bindview-annotation-自定义注解" class="headerlink" title="bindview-annotation(自定义注解)"></a>bindview-annotation(自定义注解)</h3><p>创建注解类<code>BindView</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)  <span class="comment">// 表示编译时注解</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)         <span class="comment">// 表示注解范围为类成员</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindView &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;                   <span class="comment">// 用于获取对应View的id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bindview-compiler-注解处理器"><a href="#bindview-compiler-注解处理器" class="headerlink" title="bindview-compiler(注解处理器)"></a>bindview-compiler(注解处理器)</h3><p>在该module的<code>build.gradle</code>中添加如下代码：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'com.google.auto.service:auto-service:1.0-rc3'</span></span><br><span class="line">    implementation project(<span class="string">':bindview-annotation'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>BindViewProcessor</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该注解用来自动生成META-INF/services/javax.annotation.processing.Processor文件，</span></span><br><span class="line"><span class="comment">// 并在该文件注册BindViewProcessor这个注解处理器</span></span><br><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindViewProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用来在处理注解的过程中打印日志</span></span><br><span class="line">    <span class="keyword">private</span> Messager mMessager;</span><br><span class="line">    <span class="keyword">private</span> Elements mElementUtils;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ClassCreatorProxy&gt; mProxyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnvironment);</span><br><span class="line"></span><br><span class="line">        mMessager = processingEnvironment.getMessager();</span><br><span class="line">        mElementUtils = processingEnvironment.getElementUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明该注解所处理的注解类型，也可以直接在注解处理器的类声明添加如下注解：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@SupportedAnnotationTypes</span>(&#123;"com.github.xch168.bindview.annotation.BindView"&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 接受处理的所有注解类型的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(BindView.class.getCanonicalName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定使用的Java版本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">        mMessager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"processing..."</span>);</span><br><span class="line">        mProxyMap.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到所有的注解</span></span><br><span class="line">        Set&lt;? extends Element&gt; elements = roundEnvironment.getElementsAnnotatedWith(BindView.class);</span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            VariableElement variableElement = (VariableElement) element;</span><br><span class="line">            TypeElement classElement = (TypeElement) variableElement.getEnclosingElement();</span><br><span class="line">            String fullClassName = classElement.getQualifiedName().toString();</span><br><span class="line">            ClassCreatorProxy proxy = mProxyMap.get(fullClassName);</span><br><span class="line">            <span class="keyword">if</span> (proxy == <span class="keyword">null</span>) &#123;</span><br><span class="line">                proxy = <span class="keyword">new</span> ClassCreatorProxy(mElementUtils, classElement);</span><br><span class="line">                mProxyMap.put(fullClassName, proxy);</span><br><span class="line">            &#125;</span><br><span class="line">            BindView bindAnnotation = variableElement.getAnnotation(BindView.class);</span><br><span class="line">            <span class="keyword">int</span> id = bindAnnotation.value();</span><br><span class="line">            proxy.putElement(id, variableElement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过遍历mProxy，创建java文件</span></span><br><span class="line">        <span class="keyword">for</span> (String key : mProxyMap.keySet()) &#123;</span><br><span class="line">            ClassCreatorProxy proxyInfo = mProxyMap.get(key);</span><br><span class="line">            mMessager.printMessage(Diagnostic.Kind.NOTE, <span class="string">" --&gt; create "</span> + proxyInfo.getProxyClassFullName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JavaFileObject jfo = processingEnv.getFiler().createSourceFile(proxyInfo.getProxyClassFullName(), proxyInfo.getTypeElement());</span><br><span class="line">                Writer writer = jfo.openWriter();</span><br><span class="line">                writer.write(proxyInfo.generateJavaCode());</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                mMessager.printMessage(Diagnostic.Kind.NOTE, <span class="string">" --&gt; create "</span> + proxyInfo.getProxyClassFullName() + <span class="string">" error!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mMessager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"process finish ..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ClassCreatorProxy</code>是创建Java代码的代理类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCreatorProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mBindingClassName;</span><br><span class="line">    <span class="keyword">private</span> String mPackageName;</span><br><span class="line">    <span class="keyword">private</span> TypeElement mTypeElement;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, VariableElement&gt; mVariableElementMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassCreatorProxy</span><span class="params">(Elements elementUtils, TypeElement classElement)</span> </span>&#123;</span><br><span class="line">        mTypeElement = classElement;</span><br><span class="line">        PackageElement packageElement = elementUtils.getPackageOf(mTypeElement);</span><br><span class="line">        String packageName = packageElement.getQualifiedName().toString();</span><br><span class="line">        String className = mTypeElement.getSimpleName().toString();</span><br><span class="line">        mPackageName = packageName;</span><br><span class="line">        mBindingClassName = className + <span class="string">"_ViewBinding"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putElement</span><span class="params">(<span class="keyword">int</span> id, VariableElement element)</span> </span>&#123;</span><br><span class="line">        mVariableElementMap.put(id, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateJavaCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        builder.append(<span class="string">"package "</span>).append(mPackageName).append(<span class="string">";\n\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"public class "</span>).append(mBindingClassName);</span><br><span class="line">        builder.append(<span class="string">" &#123;\n"</span>);</span><br><span class="line"></span><br><span class="line">        generateMethods(builder);</span><br><span class="line"></span><br><span class="line">        builder.append(<span class="string">"\n"</span>);</span><br><span class="line">        builder.append(<span class="string">"&#125;\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateMethods</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">        builder.append(<span class="string">"public void bind("</span> + mTypeElement.getQualifiedName() + <span class="string">" host) &#123;\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> id : mVariableElementMap.keySet()) &#123;</span><br><span class="line">            VariableElement element = mVariableElementMap.get(id);</span><br><span class="line">            String name = element.getSimpleName().toString();</span><br><span class="line">            String type = element.asType().toString();</span><br><span class="line">            builder.append(<span class="string">"host."</span> + name).append(<span class="string">" = "</span>);</span><br><span class="line">            builder.append(<span class="string">"("</span> + type + <span class="string">")(((android.app.Activity)host).findViewById("</span> + id + <span class="string">"));\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(<span class="string">" &#125;\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProxyClassFullName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPackageName + <span class="string">"."</span> + mBindingClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TypeElement <span class="title">getTypeElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTypeElement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bindview-api-注解生成代码的调用工具类"><a href="#bindview-api-注解生成代码的调用工具类" class="headerlink" title="bindview-api(注解生成代码的调用工具类)"></a>bindview-api(注解生成代码的调用工具类)</h3><p>创建注解工具类<code>BindViewTool</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindViewTool</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过翻车找到对应的ViewBinding类，然后调用其中的bind方法，完成View的绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> bind(Activity activity) &#123;</span><br><span class="line">        Class clz = activity.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class bindViewClass = Class.forName(clz.getName() + <span class="string">"_ViewBinding"</span>);</span><br><span class="line">            Method method = bindViewClass.getMethod(<span class="string">"bind"</span>, activity.getClass());</span><br><span class="line">            method.invoke(bindViewClass.newInstance(), activity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>在app模块的<code>build.gradle</code>中添加如下代码：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation project(<span class="string">':bindview-annotation'</span>)</span><br><span class="line">    implementation project(<span class="string">':bindview-api'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Gradle 2.2及后面的版本都是用annotationProcessor，早先的版本是用apt，现以废弃，故不再介绍</span></span><br><span class="line">    annotationProcessor project(<span class="string">':bindview-compiler'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在MainActivity中使用注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindView</span>(R.id.content)</span><br><span class="line">    TextView mContentText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        BindViewTool.bind(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">        mContentText.setText(<span class="string">"From BindView"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行后生成的代码（路径 <code>app/build/generated/source/apt</code>）：</p>
<p><img src="/2018/08/26/java-annotation-processor/apt-generated-code.png" alt="apt-generated-code"></p>
<p><code>MainActivity_ViewBinding</code>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity_ViewBinding</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(com.github.xch168.annotationdemo.MainActivity host)</span> </span>&#123;</span><br><span class="line">	host.mContentText = (android.widget.TextView)(((android.app.Activity)host).findViewById(<span class="number">2131165228</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过javapoet生成代码"><a href="#通过javapoet生成代码" class="headerlink" title="通过javapoet生成代码"></a>通过javapoet生成代码</h3><p>上面生成代码的部分，是通过字符串拼接，过程非常繁琐。接下来就介绍一种更优雅的方式，使用<code>javapoet</code>。</p>
<p>添加依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'com.squareup:javapoet:1.10.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>ClassCreatorProxy</code>中添加如下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCreatorProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TypeSpec <span class="title">generateJavaCodeByJavapoet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TypeSpec bindingClass = TypeSpec.classBuilder(mBindingClassName)</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .addMethod(generateMethodsByJavapoet())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> bindingClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MethodSpec <span class="title">generateMethodsByJavapoet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassName host = ClassName.bestGuess(mTypeElement.getQualifiedName().toString());</span><br><span class="line">        MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder(<span class="string">"bind"</span>)</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .returns(<span class="keyword">void</span>.class)</span><br><span class="line">                .addParameter(host, <span class="string">"host"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> id : mVariableElementMap.keySet()) &#123;</span><br><span class="line">            VariableElement element = mVariableElementMap.get(id);</span><br><span class="line">            String name = element.getSimpleName().toString();</span><br><span class="line">            String type = element.asType().toString();</span><br><span class="line">            methodBuilder.addCode(<span class="string">"host."</span> + name + <span class="string">" = "</span> + <span class="string">"("</span> + type + <span class="string">")(((android.app.Activity)host).findViewById("</span> + id + <span class="string">"));"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPackageName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPackageName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>BindViewProcessor</code>中调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (String key : mProxyMap.keySet()) &#123;</span><br><span class="line">        ClassCreatorProxy proxyInfo = mProxyMap.get(key);</span><br><span class="line">        JavaFile javaFile = JavaFile.builder(proxyInfo.getPackageName(), proxyInfo.generateJavaCodeByJavapoet()).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//　生成文件</span></span><br><span class="line">            javaFile.writeTo(processingEnv.getFiler());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mMessager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"process finish ..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相比用StringBuilder拼Java代码，明显简介很多，且生成的代码是一样的。</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li><a href="https://www.jianshu.com/p/7af58e8e3e18" target="_blank" rel="noopener">【Android】APT</a></li>
<li><a href="https://www.jianshu.com/p/50d95fbf635c" target="_blank" rel="noopener">自定义Java注解处理器</a></li>
<li><a href="https://blog.csdn.net/u013045971/article/details/53509237" target="_blank" rel="noopener">一小时搞明白注解处理器（Annotation Processor Tool）</a></li>
<li><a href="https://www.jianshu.com/p/94979c056b20" target="_blank" rel="noopener">Android APT及基于APT的简单应用</a></li>
<li><a href="https://blog.csdn.net/wzgiceman/article/details/54580745" target="_blank" rel="noopener">Android 编译时注解-提升-butterknife</a></li>
<li><a href="https://github.com/square/javapoet" target="_blank" rel="noopener">javapoet</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> Annotation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java注解Annotation]]></title>
      <url>https://xch168.github.io/2018/08/25/java-annotation/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>注解（Annotation）：是元数据的一种形式，能够添加到Java源代码，Java中的类、方法、变量、参数、包都可以被注解。注解对他们所注解的代码没有直接的影响。</p>
<p>注解的使用可以简化代码，提高开发效率。</p>
<p>在Android中，用到注解的开源库有：Retrofit、ButterKnife、Dagger。</p>
</blockquote>
<a id="more"></a>
<h3 id="Annotation分类"><a href="#Annotation分类" class="headerlink" title="Annotation分类"></a>Annotation分类</h3><h4 id="标准Annotation"><a href="#标准Annotation" class="headerlink" title="标准Annotation"></a>标准Annotation</h4><p>标准Annotation是指Java自带的几个Annotation：</p>
<p><code>@Override</code>、<code>@Deprecated</code>、<code>@SuppressWarnings</code></p>
<h4 id="元Annotation"><a href="#元Annotation" class="headerlink" title="元Annotation"></a>元Annotation</h4><p>元Annotation是指用来定义Annotation的Annotation：</p>
<p><code>@Documented</code>：保存到Javadoc文档中。</p>
<p><code>@Retention</code>：保留时间，可选值<code>SOURCE</code>(源码)、<code>CLASS</code>(编译时)、<code>RUNTIME</code>(运行时)；默认为<code>CLASS</code>，<code>SOURCE</code>大都为Mark Annotation，这类Annotation大都用来校验，如Override。</p>
<p><code>@Target</code>：表示该注解可以修饰那些程序元素，值为：<code>TYPE</code>、<code>METHOD</code>、<code>CONSTRUCTOR</code>、<code>FIELD</code>、<code>PARAMETER</code>等，未标记则表示可修饰所有。</p>
<p><code>@Inherited</code>：是否可以被继承，默认为false。</p>
<h4 id="自定义Annotation"><a href="#自定义Annotation" class="headerlink" title="自定义Annotation"></a>自定义Annotation</h4><p>根据自己需要进行自定义的Annotation，定义时需要用到上面的元Annotation。</p>
<h3 id="Annotation自定义"><a href="#Annotation自定义" class="headerlink" title="Annotation自定义"></a>Annotation自定义</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Request &#123;</span><br><span class="line"></span><br><span class="line">    String GET = <span class="string">"get"</span>;</span><br><span class="line">    String POST = <span class="string">"post"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">host</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">path</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">version</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>语法说明</strong>：</p>
<ol>
<li><p>通过<code>@interface</code>定义，注解类名即为注解名；</p>
</li>
<li><p>注解配置参数为注解类的方法名：</p>
<p>（1）所有的方法没有方法体，没有参数，没有修饰符，不允许抛出异常；</p>
<p>（2）方法的返回值只能是基本类型、String、Class、enum、Annotation、及他们的一维数组；</p>
<p>（3）若只有一个默认属性，可直接用<code>value()</code>函数；</p>
<p>（4）若一个属性都没有的表示该Annotation为标记注解（Mark Annotation）如@Override；</p>
<p>（5）可以加<code>default</code>表示默认值。</p>
</li>
</ol>
<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Request</span>(host = <span class="string">"https://api.github.com/"</span>, path = <span class="string">"users"</span>, method = Request.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Request</span>(host = <span class="string">"https://api.github.com/"</span>, path = <span class="string">"users/xch168/repos"</span>, method = Request.POST, version = <span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Annotation解析"><a href="#Annotation解析" class="headerlink" title="Annotation解析"></a>Annotation解析</h3><h4 id="运行时Annotation解析"><a href="#运行时Annotation解析" class="headerlink" title="运行时Annotation解析"></a>运行时Annotation解析</h4><p>（1）运行时Annotation指<code>@Retention</code>为<code>RUNTIME</code>的Annotation。</p>
<p>（2）常用API</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取该Target的某个Annotation的信息</span></span><br><span class="line">method.getAnnotation(AnnotationName.class);</span><br><span class="line"><span class="comment">// 获取该Target的所有Annotation</span></span><br><span class="line">method.getAnnotations();</span><br><span class="line"><span class="comment">// 判断该Target是否被某个Annotation修饰</span></span><br><span class="line">method.isAnnotationPresent(AnnotationName.class);</span><br></pre></td></tr></table></figure>
<p>（3）解析示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class clz = Class.forName(<span class="string">"com.github.xch168.annotationdemo.HttpUtil"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method method : clz.getMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(Request.class)) &#123;</span><br><span class="line">                Request request = method.getAnnotation(Request.class);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"method name:"</span> + method.getName());</span><br><span class="line">                System.out.println(<span class="string">"request host:"</span> + request.host());</span><br><span class="line">                System.out.println(<span class="string">"request path:"</span> + request.path());</span><br><span class="line">                System.out.println(<span class="string">"request method:"</span> + request.method());</span><br><span class="line">                System.out.println(<span class="string">"request version:"</span> + request.version());</span><br><span class="line">                System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">method name:request1</span><br><span class="line">request host:https:<span class="comment">//api.github.com/</span></span><br><span class="line">request path:users</span><br><span class="line">request method:get</span><br><span class="line">request version:<span class="number">1</span></span><br><span class="line">-----------------</span><br><span class="line">method name:request2</span><br><span class="line">request host:https:<span class="comment">//api.github.com/</span></span><br><span class="line">request path:users/xch168/repos</span><br><span class="line">request method:post</span><br><span class="line">request version:<span class="number">2</span></span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure>
<h4 id="编译时Annotation解析"><a href="#编译时Annotation解析" class="headerlink" title="编译时Annotation解析"></a>编译时Annotation解析</h4><p>（1）编译时Annotation指<code>@Retention</code>为<code>CLASS</code>的Annotation，由编译器自动解析。</p>
<p>（2）自定义类继承自<code>AbstractProcessor</code>，并重写其中的<code>process</code>函数。</p>
<p>  示例代码：将上面的Request的@Retention改为CLASS：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示这个Processor要处理的Annotation</span></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;<span class="string">"com.github.xch168.annotationdemo.Request"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotations 表示带处理的Annotations</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> env         表示当前或者之前的运行环境</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>            表示这组annotations是否被这个Processor接受，如果接受，后续子Processor不会再对这个annotations进行处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TypeElement te : annotations) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Element element : env.getElementsAnnotatedWith(te)) &#123;</span><br><span class="line">                Request request = element.getAnnotation(Request.class);</span><br><span class="line">                map.put(element.getEnclosingElement().toString(), request.path());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://a.codekk.com/detail/Android/Trinea/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Java%20%E6%B3%A8%E8%A7%A3%20Annotation" target="_blank" rel="noopener">公共技术点之 Java 注解 Annotation</a></li>
<li><a href="https://blog.csdn.net/javazejian/article/details/71860633" target="_blank" rel="noopener">深入理解Java注解类型(@Annotation)</a></li>
<li><a href="https://www.jianshu.com/p/50d95fbf635c" target="_blank" rel="noopener">自定义Java注解处理器</a></li>
<li><a href="https://blog.csdn.net/briblue/article/details/73824058" target="_blank" rel="noopener">秒懂，Java 注解 （Annotation）你可以这样学</a></li>
<li><a href="https://juejin.im/post/59bf5e1c518825397176d126" target="_blank" rel="noopener">Android 中注解的使用</a></li>
<li><a href="https://juejin.im/post/5a1517a6f265da4312808f1b" target="_blank" rel="noopener">Java 基础（十七）注解</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> Annotation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java动态代理]]></title>
      <url>https://xch168.github.io/2018/08/18/java-dynamic-proxy/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>代理模式，是一种常用的设计模式。</p>
<p>在某些情况下，我们不希望或不能直接访问对象A，而是通过访问一个中介对象B，由B去访问A达成目的，这种方式就是代理。</p>
<p>对象A所属的类称为<code>委托类</code>，也被称为<code>被代理类</code>，对象B所属的类称为<code>代理类</code>。</p>
<p>根据程序运行前代理类是否存在，可以将代理分为<code>静态代理</code>和<code>动态代理</code>。</p>
</blockquote>
<a id="more"></a>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><blockquote>
<p>代理类在程序运行前已经存在的代理方式称为静态代理。</p>
<p>由开发人员编写或是编译器生成代理类的方式都属于静态代理。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 委托类/被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ClassA a;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassB</span><span class="params">(ClassA a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a.method1();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a.method2();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不对外提供method3()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面<code>ClassA</code>是委托类，<code>ClassB</code>是代理类，<code>ClassB</code>中的函数直接调用<code>ClassA</code>中相应的函数，并隐藏了<code>ClassA</code>的<code>method3()</code>函数。</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><blockquote>
<p>代理类在程序运行前不存在，运行时由程序动态生成的代理方式称为动态代理。</p>
</blockquote>
<blockquote>
<p>动态代理的好处：可以方便对代理类的函数做统一或特殊处理，如记录所有函数的执行时间、所有函数执行前添加验证判断、对某个特殊函数进行特殊操作，而不用像静态代理方式那样需要修改每个函数。</p>
</blockquote>
<blockquote>
<p>实现动态代理的步骤：</p>
<ol>
<li>新建委托类；</li>
<li>实现<code>InvocationHandler</code>接口，这是负责连接代理类和委托类的中间类必须实现的接口；</li>
<li>通过<code>Proxy</code>类创建代理类对象。</li>
</ol>
</blockquote>
<p>接下来我们通过一个实例来演示动态代理的使用。如果要统计某个类所有函数的执行时间，传统的方式是在类的每个函数前打点统计，使用动态代理可以对这一操作进行统一处理。</p>
<p>Step1. 新建委托类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateImpl</span> <span class="keyword">implements</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DynamicProxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Invoke method1"</span>);</span><br><span class="line">        sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Invoke method2"</span>);</span><br><span class="line">        sleep(<span class="number">87</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Invoke method3"</span>);</span><br><span class="line">        sleep(<span class="number">28</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millSeconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millSeconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step2. 实现InvocationHandler接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimingInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DynamicProxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 委托类对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimingInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy     表示通过Proxy.newProxyInstance()生成的代理类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method    表示代理对象被调用的函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args      表示代理对象被调用的函数的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Object obj = method.invoke(target, objects);</span><br><span class="line">        Log.i(TAG, method.getName() + <span class="string">" cost time is:"</span> + (System.currentTimeMillis() - start));</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>InvocationHandler</code>：是负责连接代理类和委托类的中间类必须实现的接口。调用代理对象的每个函数实际最终都是调用了<code>InvocationHandler</code>的<code>invoke</code>函数。我们就可以在<code>invoke</code>函数中添加开始结束计时，其中还调用了委托类对象<code>target</code>的相应函数，这样便完成了统计执行时间的需求。</p>
<p>Step3. 通过Proxy类静态函数动态生成代理对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">		</span><br><span class="line">        TimingInvocationHandler handler = <span class="keyword">new</span> TimingInvocationHandler(<span class="keyword">new</span> OperateImpl());</span><br><span class="line">        Operate operate = (Operate) Proxy.newProxyInstance(Operate.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;Operate.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        operate.method1();</span><br><span class="line"></span><br><span class="line">        operate.method2();</span><br><span class="line"></span><br><span class="line">        operate.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I/DynamicProxy: Invoke method1</span><br><span class="line">I/DynamicProxy: method1 cost time is:<span class="number">100</span></span><br><span class="line">I/DynamicProxy: Invoke method2</span><br><span class="line">I/DynamicProxy: method2 cost time is:<span class="number">88</span></span><br><span class="line">I/DynamicProxy: Invoke method3</span><br><span class="line">I/DynamicProxy: method3 cost time is:<span class="number">28</span></span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<ol>
<li>将委托类<code>new OperateImpl()</code>作为<code>TimingInvocationHandler</code>的构造参数创建<code>handler</code>对象；</li>
<li>通过<code>Proxy.newProxyInstance(...)</code>函数新建一个代理对象，代理类就是在这时候动态生成的；</li>
<li>调用代理对象的函数就会调用到<code>handler</code>的<code>invoke</code>函数，而<code>invoke</code>函数中调用委托类对象相应的函数。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loader       类加载器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> interfaces   委托类的接口，生成代理类时需要实现这些接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler      handler是InvocationHandler的实现类对象，负责连接代理类和委托类的中间类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler handler)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://a.codekk.com/detail/Android/Caij/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Java%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86" target="_blank" rel="noopener">公共技术点之 Java 动态代理</a></li>
<li><a href="https://buwenqi.github.io/2017/11/07/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">Java动态代理解析</a></li>
<li><a href="https://www.jianshu.com/p/cbd58642fc08" target="_blank" rel="noopener">十分钟理解Java之动态代理</a></li>
<li><a href="https://www.jianshu.com/p/e709aff78a53?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">Java动态代理机制详解</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> Design Patterns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将FFmpeg编译成一个libffmpeg.so库]]></title>
      <url>https://xch168.github.io/2018/08/04/android-ndk-compile-ffmpeg-to-a-so/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>在上一篇文章 <a href="https://xch168.github.io/2018/07/22/android-ndk-ffmpeg-compile/">Android NDK交叉编译FFmpeg</a> 中，编译出的FFmpeg有好几个库，使用起来比较麻烦，所以这篇文章将要介绍如何将FFmpeg编译成一个单独的libffmpeg.so库。</p>
</blockquote>
<a id="more"></a>
<h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><blockquote>
<ul>
<li>Mac OS X  10.13.6</li>
<li>android-ndk-r17b</li>
<li>FFmpeg 4.0.2</li>
</ul>
</blockquote>
<h3 id="编译脚本"><a href="#编译脚本" class="headerlink" title="编译脚本"></a>编译脚本</h3><p><code>build-android-ffmpeg.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndk环境    </span></span><br><span class="line"><span class="built_in">export</span> NDK=/Users/xch/debug/ndk/android-ndk-r17b</span><br><span class="line"><span class="built_in">export</span> SYSROOT=<span class="variable">$NDK</span>/platforms/android-21/arch-arm</span><br><span class="line"><span class="built_in">export</span> TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64</span><br><span class="line">CPU=armv7<span class="_">-a</span></span><br><span class="line"></span><br><span class="line">ISYSROOT=<span class="variable">$NDK</span>/sysroot</span><br><span class="line">ASM=<span class="variable">$ISYSROOT</span>/usr/include/arm-linux-androideabi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要保存动态库的目录，这里保存在源码根目录下的android/armv7-a</span></span><br><span class="line"><span class="built_in">export</span> PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">"-marm"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> build_android</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"开始编译ffmpeg"</span></span><br><span class="line"></span><br><span class="line">    ./configure \</span><br><span class="line">        --target-os=linux \</span><br><span class="line">        --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">        --<span class="built_in">enable</span>-cross-compile \</span><br><span class="line">        --<span class="built_in">enable</span>-static \</span><br><span class="line">        --<span class="built_in">disable</span>-shared \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-ffmpeg \</span><br><span class="line">        --<span class="built_in">disable</span>-ffplay \</span><br><span class="line">        --<span class="built_in">disable</span>-ffprobe \</span><br><span class="line">        --<span class="built_in">disable</span>-avdevice \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-symver \</span><br><span class="line">        --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line">        --arch=arm \</span><br><span class="line">        --sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">        --extra-cflags=<span class="string">"-I<span class="variable">$ASM</span> -isysroot <span class="variable">$ISYSROOT</span> -D__ANDROID_API__=21 -U_FILE_OFFSET_BITS -Os -fPIC -DANDROID -Wno-deprecated -mfloat-abi=softfp -marm"</span> \</span><br><span class="line">        --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">        <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line"></span><br><span class="line">    make clean</span><br><span class="line"></span><br><span class="line">    make -j16</span><br><span class="line">    make install</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打包</span></span><br><span class="line">    <span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi-ld \</span><br><span class="line">        -rpath-link=<span class="variable">$SYSROOT</span>/usr/lib \</span><br><span class="line">        -L<span class="variable">$SYSROOT</span>/usr/lib \</span><br><span class="line">        -L<span class="variable">$PREFIX</span>/lib \</span><br><span class="line">        -soname libffmpeg.so -shared -nostdlib -Bsymbolic --whole-archive --no-undefined -o \</span><br><span class="line">        <span class="variable">$PREFIX</span>/libffmpeg.so \</span><br><span class="line">        libavcodec/libavcodec.a \</span><br><span class="line">        libavfilter/libavfilter.a \</span><br><span class="line">        libavformat/libavformat.a \</span><br><span class="line">        libavutil/libavutil.a \</span><br><span class="line">        libswresample/libswresample.a \</span><br><span class="line">        libswscale/libswscale.a \</span><br><span class="line">        -lc -lm -lz -ldl -llog --dynamic-linker=/system/bin/linker \</span><br><span class="line">        <span class="variable">$TOOLCHAIN</span>/lib/gcc/arm-linux-androideabi/4.9.x/libgcc.a</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># strip 精简文件</span></span><br><span class="line">    <span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi-strip  <span class="variable">$PREFIX</span>/libffmpeg.so</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"编译结束！"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_android</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> 这个脚本不再需要修改<code>Configure</code>的内容（生成的是<em>.a而不是</em>.so，并没有涉及到版本号问题)</p>
<h3 id="编译结果"><a href="#编译结果" class="headerlink" title="编译结果"></a>编译结果</h3><p><img src="/2018/08/04/android-ndk-compile-ffmpeg-to-a-so/libffmpeg.png" alt="libffmpeg"></p>
<h3 id="CMakeLists-txt-文件配置"><a href="#CMakeLists-txt-文件配置" class="headerlink" title="CMakeLists.txt 文件配置"></a>CMakeLists.txt 文件配置</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( FFmpegUtil</span><br><span class="line">        SHARED</span><br><span class="line">        src/main/cpp/native-lib.cpp )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( log-lib</span><br><span class="line">        log )</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( android-lib</span><br><span class="line">        android )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置ffmpeg库所在路径的目录</span></span><br><span class="line"><span class="keyword">set</span>(distribution_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/src/main/jniLibs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( libffmpeg</span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( libffmpeg</span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libffmpeg.so)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加ffmpeg头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(src/main/jniLibs/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>( FFmpegUtil</span><br><span class="line">        libffmpeg</span><br><span class="line">        <span class="variable">$&#123;log-lib&#125;</span></span><br><span class="line">        <span class="variable">$&#123;android-lib&#125;</span> )</span><br></pre></td></tr></table></figure>
<p>可以看出cmake文件的配置简洁了许多。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://www.ihubin.com/blog/android-ffmpeg-demo-3/" target="_blank" rel="noopener">Android最简单的基于FFmpeg的例子(三)—编译FFmpeg成一个SO库</a></li>
<li><a href="https://blog.csdn.net/sunwutian0325/article/details/53502025" target="_blank" rel="noopener">ffmpeg编译成android的单独的libffmpeg.so</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK交叉编译FFmpeg]]></title>
      <url>https://xch168.github.io/2018/07/22/android-ndk-ffmpeg-compile/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转换成流的开源程序。它提供了录制、转换以及流化音视频的完整解决方案。</p>
</blockquote>
<a id="more"></a>
<h3 id="下载NDK"><a href="#下载NDK" class="headerlink" title="下载NDK"></a>下载NDK</h3><ul>
<li><p>通过Android Studio下载</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/ndk-download.png" alt="ndk-download"></p>
</li>
<li><p>到官网下载</p>
<blockquote>
<p><a href="https://developer.android.com/ndk/downloads/" target="_blank" rel="noopener">https://developer.android.com/ndk/downloads/</a></p>
</blockquote>
</li>
</ul>
<h3 id="下载FFmpeg源码"><a href="#下载FFmpeg源码" class="headerlink" title="下载FFmpeg源码"></a>下载FFmpeg源码</h3><ul>
<li><p>通过git clone</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/FFmpeg/FFmpeg.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>到官网下载</p>
<blockquote>
<p><a href="http://ffmpeg.org/download.html#repositories" target="_blank" rel="noopener">http://ffmpeg.org/download.html#repositories</a></p>
</blockquote>
</li>
</ul>
<h3 id="配置configure"><a href="#配置configure" class="headerlink" title="配置configure"></a>配置configure</h3><p>由于默认configure脚本编译出来的动态库版本号在文件名后缀.so之后，如：libavcodec.so.7</p>
<p>所以需要对configure进行修改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'</span></span><br><span class="line"><span class="comment"># LIB_INSTALL_EXTRA_CMD='$$(RANLIB) "$(LIBDIR)/$(LIBNAME)"'</span></span><br><span class="line"><span class="comment"># SLIB_INSTALL_NAME='$(SLIBNAME_WITH_VERSION)'</span></span><br><span class="line"><span class="comment"># SLIB_INSTALL_LINKS='$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 将上面四个变量的值改成如下：</span></span><br><span class="line">SLIBNAME_WITH_MAJOR=<span class="string">'$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'</span>  </span><br><span class="line">LIB_INSTALL_EXTRA_CMD=<span class="string">'$$(RANLIB)"$(LIBDIR)/$(LIBNAME)"'</span>  </span><br><span class="line">SLIB_INSTALL_NAME=<span class="string">'$(SLIBNAME_WITH_MAJOR)'</span>  </span><br><span class="line">SLIB_INSTALL_LINKS=<span class="string">'$(SLIBNAME)'</span></span><br></pre></td></tr></table></figure>
<h3 id="使用android-ndk-r15c编译FFmpeg3-3-7"><a href="#使用android-ndk-r15c编译FFmpeg3-3-7" class="headerlink" title="使用android-ndk-r15c编译FFmpeg3.3.7"></a>使用android-ndk-r15c编译FFmpeg3.3.7</h3><p>编写编译脚本<code>build-android-ffmpeg.sh</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndk环境    </span></span><br><span class="line"><span class="built_in">export</span> NDK=/Users/xch/debug/ndk/android-ndk-r15c</span><br><span class="line"><span class="built_in">export</span> SYSROOT=<span class="variable">$NDK</span>/platforms/android-21/arch-arm</span><br><span class="line"><span class="built_in">export</span> TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64</span><br><span class="line">CPU=armv7<span class="_">-a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要保存动态库的目录，这里保存在源码根目录下的android/armv7-a</span></span><br><span class="line"><span class="built_in">export</span> PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">"-marm"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> build_android</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"开始编译ffmpeg"</span></span><br><span class="line"></span><br><span class="line">    ./configure \</span><br><span class="line">        --target-os=linux \</span><br><span class="line">        --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">        --<span class="built_in">enable</span>-cross-compile \</span><br><span class="line">        --<span class="built_in">enable</span>-shared \</span><br><span class="line">        --<span class="built_in">disable</span>-static \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-ffmpeg \</span><br><span class="line">        --<span class="built_in">disable</span>-ffplay \</span><br><span class="line">        --<span class="built_in">disable</span>-ffprobe \</span><br><span class="line">        --<span class="built_in">disable</span>-avdevice \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-symver \</span><br><span class="line">        --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line">        --arch=arm \</span><br><span class="line">        --sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">        --extra-cflags=<span class="string">"-Os -fpic <span class="variable">$ADDI_CFLAGS</span>"</span> \</span><br><span class="line">        --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">        <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line"></span><br><span class="line">    make clean</span><br><span class="line"></span><br><span class="line">    make -j16</span><br><span class="line">    make install</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"编译结束！"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_android</span><br></pre></td></tr></table></figure>
<p>编译结果：</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/ffmpeg-lib.png" alt="ffmpeg-lib"></p>
<h3 id="使用android-ndk-r17b编译FFmpeg4-0-2"><a href="#使用android-ndk-r17b编译FFmpeg4-0-2" class="headerlink" title="使用android-ndk-r17b编译FFmpeg4.0.2"></a>使用android-ndk-r17b编译FFmpeg4.0.2</h3><p>编译脚本<code>build-android-ffmpeg.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndk环境    </span></span><br><span class="line"><span class="built_in">export</span> NDK=/Users/xch/debug/ndk/android-ndk-r17b</span><br><span class="line"><span class="built_in">export</span> SYSROOT=<span class="variable">$NDK</span>/platforms/android-21/arch-arm</span><br><span class="line"><span class="built_in">export</span> TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64</span><br><span class="line">CPU=armv7<span class="_">-a</span></span><br><span class="line"></span><br><span class="line">ISYSROOT=<span class="variable">$NDK</span>/sysroot</span><br><span class="line">ASM=<span class="variable">$ISYSROOT</span>/usr/include/arm-linux-androideabi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要保存动态库的目录，这里保存在源码根目录下的android/armv7-a</span></span><br><span class="line"><span class="built_in">export</span> PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">"-marm"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> build_android</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"开始编译ffmpeg"</span></span><br><span class="line"></span><br><span class="line">    ./configure \</span><br><span class="line">        --target-os=linux \</span><br><span class="line">        --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">        --<span class="built_in">enable</span>-cross-compile \</span><br><span class="line">        --<span class="built_in">enable</span>-shared \</span><br><span class="line">        --<span class="built_in">disable</span>-static \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-ffmpeg \</span><br><span class="line">        --<span class="built_in">disable</span>-ffplay \</span><br><span class="line">        --<span class="built_in">disable</span>-ffprobe \</span><br><span class="line">        --<span class="built_in">disable</span>-avdevice \</span><br><span class="line">        --<span class="built_in">disable</span>-doc \</span><br><span class="line">        --<span class="built_in">disable</span>-symver \</span><br><span class="line">        --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line">        --arch=arm \</span><br><span class="line">        --sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">        --extra-cflags=<span class="string">"-I<span class="variable">$ASM</span> -isysroot <span class="variable">$ISYSROOT</span> -D__ANDROID_API__=21 -U_FILE_OFFSET_BITS -Os -fPIC -DANDROID -Wno-deprecated -mfloat-abi=softfp -marm"</span> \</span><br><span class="line">        --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">        <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line"></span><br><span class="line">    make clean</span><br><span class="line"></span><br><span class="line">    make -j16</span><br><span class="line">    make install</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"编译结束！"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_android</span><br></pre></td></tr></table></figure>
<p>编译过程错误处理：</p>
<p>错误1：变量名与宏定义冲突</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/compile-error1.png" alt="compile-error1"></p>
<p>解决方法：将B0修改为b0，一共4处。</p>
<p>错误2：</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/compile-error2.png" alt="compile-error2"></p>
<p>解决：将libavcodec/hevc_mvs.c中的B0改为b0。</p>
<p>错误3：</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/compile-error3.png" alt="compile-error3"></p>
<p>解决：将libavcodec/opus_pvq.c中的B0改为b0。</p>
<p><strong>NOTE:</strong> </p>
<p>android-ndk-r16b之前版本的头文件位于<code>{NDK_HOME}/platforms/{android-21}/{arch-arm}/usr/include</code>，r16b及之后的版本头文件位于<code>{NDK_HOME}/sysroot/usr/include</code></p>
<h3 id="使用编译好的so库"><a href="#使用编译好的so库" class="headerlink" title="使用编译好的so库"></a>使用编译好的so库</h3><p>Step1:  在Android Studio创建一个工程，并勾选“Include C++ support”；</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/build-demo-project.png" alt="build-demo-project"></p>
<p>Step2: 创建一个<code>jniLibs</code>目录，并把编译好的<code>头文件</code>和<code>.so</code>文件都复制到该目录；</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/demo-project-dir.png" alt="demo-project-dir"></p>
<p>Step3: 配置gradle文件:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">    cmake &#123;</span><br><span class="line">        cppFlags <span class="string">"-frtti -fexceptions"</span></span><br><span class="line">        abiFilters <span class="string">'armeabi-v7a'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sourceSets.main &#123;</span><br><span class="line">    jniLibs.srcDirs = [<span class="string">'src/main/jniLibs'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step4: 编辑CMakeLists.txt文件:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( MyFFmpeg</span><br><span class="line">             SHARED</span><br><span class="line">             src/main/cpp/native-lib.cpp )</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( log-lib</span><br><span class="line">              log )</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( android-lib</span><br><span class="line">              android )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置ffmpeg库所在路径的目录</span></span><br><span class="line"><span class="keyword">set</span>(distribution_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/src/main/jniLibs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( avutil-<span class="number">56</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( avutil-<span class="number">56</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libavutil-<span class="number">56</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( swresample-<span class="number">3</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( swresample-<span class="number">3</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libswresample-<span class="number">3</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( avfilter-<span class="number">7</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( avfilter-<span class="number">7</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libavfilter-<span class="number">7</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( avformat-<span class="number">58</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( avformat-<span class="number">58</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libavformat-<span class="number">58</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( swscale-<span class="number">5</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( swscale-<span class="number">5</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libswscale-<span class="number">5</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( avcodec-<span class="number">58</span></span><br><span class="line">        SHARED</span><br><span class="line">        IMPORTED )</span><br><span class="line"><span class="keyword">set_target_properties</span>( avcodec-<span class="number">58</span></span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="variable">$&#123;distribution_DIR&#125;</span>/libavcodec-<span class="number">58</span>.so)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加ffmpeg头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(src/main/jniLibs/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>( MyFFmpeg</span><br><span class="line">        avcodec-<span class="number">58</span></span><br><span class="line">        avfilter-<span class="number">7</span></span><br><span class="line">        avformat-<span class="number">58</span></span><br><span class="line">        avutil-<span class="number">56</span></span><br><span class="line">        swresample-<span class="number">3</span></span><br><span class="line">        swscale-<span class="number">5</span></span><br><span class="line">        <span class="variable">$&#123;log-lib&#125;</span></span><br><span class="line">        <span class="variable">$&#123;android-lib&#125;</span> )</span><br></pre></td></tr></table></figure>
<p>Step5: 编写代码：</p>
<p>Java层：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"MyFFmpeg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">avformatInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">avcodecInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">avfilterInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">configurationInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView mInfoView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mInfoView = findViewById(R.id.info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">format</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mInfoView.setText(avformatInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">codec</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mInfoView.setText(avcodecInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mInfoView.setText(avfilterInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">config</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mInfoView.setText(configurationInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavformat/avformat.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavcodec/avcodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavutil/avutil.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavfilter/avfilter.h"</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpegdemo_MainActivity_avformatInfo(JNIEnv *env, jobject instance) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> info[<span class="number">40000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    AVInputFormat *if_temp = av_iformat_next(<span class="literal">NULL</span>);</span><br><span class="line">    AVOutputFormat *of_temp = av_oformat_next(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//Input</span></span><br><span class="line">    <span class="keyword">while</span> (if_temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(info, <span class="string">"%s[In ][%10s]\n"</span>, info, if_temp-&gt;name);</span><br><span class="line">        if_temp = if_temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Output</span></span><br><span class="line">    <span class="keyword">while</span> (of_temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(info, <span class="string">"%s[Out][%10s]\n"</span>, info, of_temp-&gt;name);</span><br><span class="line">        of_temp = of_temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpegdemo_MainActivity_avcodecInfo(JNIEnv *env, jobject instance) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> info[<span class="number">40000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    AVCodec *c_temp = av_codec_next(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (c_temp!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c_temp-&gt;decode!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">"%s[Dec]"</span>, info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">"%s[Enc]"</span>, info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (c_temp-&gt;type) &#123;</span><br><span class="line">            <span class="keyword">case</span> AVMEDIA_TYPE_VIDEO:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s[Video]"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AVMEDIA_TYPE_AUDIO:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s[Audio]"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s[Other]"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sprintf</span>(info, <span class="string">"%s[%10s]\n"</span>, info, c_temp-&gt;name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        c_temp=c_temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpegdemo_MainActivity_avfilterInfo(JNIEnv *env, jobject instance) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> info[<span class="number">40000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    AVFilter *f_temp = (AVFilter *)avfilter_next(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span> (f_temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(info, <span class="string">"%s[%10s]\n"</span>, info, f_temp-&gt;name);</span><br><span class="line">        f_temp = f_temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ffmpegdemo_MainActivity_configurationInfo(JNIEnv *env, jobject instance) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> info[<span class="number">10000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(info, <span class="string">"%s\n"</span>, avcodec_configuration());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(info);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/2018/07/22/android-ndk-ffmpeg-compile/run-result.gif" alt="run-result"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://juejin.im/post/5b1ddc84e51d4506d73f2b3b?utm_source=gold_browser_extension" target="_blank" rel="noopener">Android 基于ffmpeg开发简易播放器 - NDK交叉编译ffmpeg</a></li>
<li><a href="https://www.jianshu.com/p/5d738f645697" target="_blank" rel="noopener">在Mac下使用NDK编译FFmpeg3.3.4</a></li>
<li><a href="https://blog.csdn.net/tyutccser/article/details/80619065" target="_blank" rel="noopener">Ubuntu编译Android版本FFmpeg</a></li>
<li><a href="https://android.googlesource.com/platform/ndk/+/master/docs/UnifiedHeaders.md#supporting-unified-headers-in-your-build-system" target="_blank" rel="noopener">Unified Headers</a></li>
<li><a href="http://www.ihubin.com/blog/android-ffmpeg-demo-1/" target="_blank" rel="noopener">Android最简单的基于FFmpeg的例子(一)—编译FFmpeg类库</a></li>
<li><a href="http://www.ihubin.com/blog/android-ffmpeg-demo-2/" target="_blank" rel="noopener">Android最简单的基于FFmpeg的例子(二)—测试编译好的SO库</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-APK增量更新]]></title>
      <url>https://xch168.github.io/2018/07/22/android-ndk-apk-incremental-update/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>现在的APP更新频率非常高，apk的大小也在不断的变大。如果每次新版本的更新，都让用户去下载一个完整的apk，这对于用户的耐心和流量都是巨大的消耗。特别是做应用市场的，如果没有增量更新，那么就要额外的付出高额的流量费用。</p>
</blockquote>
<a id="more"></a>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p>将手机已安装的apk与服务端最新的apk进行二进制对比，得到差分包，用户更新程序时，只需要下载差分包，并在本地使用差分包与已安装的apk合并成新版的apk。</p>
</blockquote>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/apk-increment-principle.png" alt="apk-increment-principle"></p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul>
<li><p>bsdiff、bspatch</p>
<p>下载地址：<a href="http://www.daemonology.net/bsdiff/" target="_blank" rel="noopener">http://www.daemonology.net/bsdiff/</a></p>
<p>编译源码：</p>
<p>Step1: make</p>
<p>出错信息：</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bsdiff-compile-1.png" alt="bsdiff-compile-1"></p>
<p>Step2: 修改<code>Makefile</code>文件，将install：下面的<code>if</code>和<code>endif</code>各添加一个缩进：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS		+=	-O3 -lbz2</span><br><span class="line"></span><br><span class="line">PREFIX		?=	/usr/local</span><br><span class="line">INSTALL_PROGRAM	?=	$&#123;INSTALL&#125; -c -s -m 555</span><br><span class="line">INSTALL_MAN	?=	$&#123;INSTALL&#125; -c -m 444</span><br><span class="line"></span><br><span class="line"><span class="section">all:		bsdiff bspatch</span></span><br><span class="line"><span class="section">bsdiff:		bsdiff.c</span></span><br><span class="line"><span class="section">bspatch:	bspatch.c</span></span><br><span class="line"></span><br><span class="line"><span class="section">install:</span></span><br><span class="line">	$&#123;INSTALL_PROGRAM&#125; bsdiff bspatch $&#123;PREFIX&#125;/bin</span><br><span class="line">	.<span class="keyword">ifndef</span> WITHOUT_MAN</span><br><span class="line">	$&#123;INSTALL_MAN&#125; bsdiff.1 bspatch.1 $&#123;PREFIX&#125;/man/man1</span><br><span class="line">	.<span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
<p>Step3: make</p>
<p>错误信息：</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bsdiff-compile-2.png" alt="bsdiff-compile-2png"></p>
<p>Step4: 在bspath.c中添加<code>#include &lt;sys/types.h&gt;</code></p>
<p>Step5: make</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bsdiff-compile-3.png" alt="bsdiff-compile-3"></p>
</li>
</ul>
<h3 id="生成差分包"><a href="#生成差分包" class="headerlink" title="生成差分包"></a>生成差分包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bsdiff v1.0.0.apk v1.0.1.apk 1.0.0-to-1.0.1.patch</span><br></pre></td></tr></table></figure>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bsdiff.png" alt="bsdiff"></p>
<h3 id="合并差分包"><a href="#合并差分包" class="headerlink" title="合并差分包"></a>合并差分包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bspatch v1.0.0.apk new.apk 1.0.0-to-1.0.1.patch</span><br></pre></td></tr></table></figure>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bspatch.png" alt="bspatch"></p>
<p>对比文件是否一样：</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/md5.png" alt="md5"></p>
<h3 id="在Android项目中使用bspatch"><a href="#在Android项目中使用bspatch" class="headerlink" title="在Android项目中使用bspatch"></a>在Android项目中使用bspatch</h3><p>Step1：下载依赖库<code>bzip</code>的源码（官网域名过期），可以从我的GitHub项目中拷贝：</p>
<p>下载地址：<a href="https://github.com/xch168/BsPatchTest" target="_blank" rel="noopener">https://github.com/xch168/BsPatchTest</a></p>
<p>Step2：将bzip库，导入到Android项目中；</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bzip2.png" alt="bzip2"></p>
<p>Step3：将bsdiff中的<code>bspatch.c</code>文件导入到Android项目中，并将bspatch.c中的<code>#include &lt;bzlib.h&gt;</code>改成<code>#include &quot;bzip2/bzlib.h&quot;</code></p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/bspatch.c.png" alt="bspatch.c"></p>
<p>Step4：编写CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将./src/main/cpp目录（不包含子目录）下所有源文件保存在变量 SRC 中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src/main/cpp SRC)</span><br><span class="line"><span class="comment"># 将./src/main/cpp/bzip2目录（不包含子目录）下所有源文件保存在变量 SRC_BZIP 中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src/main/cpp/bzip2 SRC_BZIP)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 SRC_BZIP 添加到 SRC 中</span></span><br><span class="line">list(APPEND SRC <span class="variable">$&#123;SRC_BZIP&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>( bspatch</span><br><span class="line">             SHARED</span><br><span class="line">             <span class="variable">$&#123;SRC&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>( log-lib</span><br><span class="line">              log )</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>( bspatch</span><br><span class="line">                       <span class="variable">$&#123;log-lib&#125;</span> )</span><br></pre></td></tr></table></figure>
<p>Step4：编写代码</p>
<p>Java层：</p>
<p>BsPatchUtil.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BsPatchUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"bspatch"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">patch</span><span class="params">(String oldApk, String newApk, String patch)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> File destApk = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"dest.apk"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> File patch = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"1.0.0-to-1.0.1.patch"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        TextView versionText = findViewById(R.id.tv_version);</span><br><span class="line">        versionText.setText(<span class="string">"App版本：v"</span> + getVersionName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                BsPatchUtil.patch(getApkPath(), destApk.getAbsolutePath(), patch.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (destApk.exists()) &#123;</span><br><span class="line">                    install(MainActivity.<span class="keyword">this</span>, destApk);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">install</span><span class="params">(Context context, File apk)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        intent.setDataAndType(Uri.fromFile(apk), <span class="string">"application/vnd.android.package-archive"</span>);</span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前应用的apk包的路径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> apk路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getApkPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationInfo applicationInfo = getApplicationInfo();</span><br><span class="line">        <span class="keyword">return</span> applicationInfo.sourceDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getVersionName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String versionName = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PackageInfo packageInfo = getApplicationContext()</span><br><span class="line">                    .getPackageManager()</span><br><span class="line">                    .getPackageInfo(getPackageName(), <span class="number">0</span>);</span><br><span class="line">            versionName = packageInfo.versionName;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> versionName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C层：</p>
<p>bspatch-util.h：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bzip2/bzlib_private.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">executePatch</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_bspatchtest_BsPatchUtil_patch(JNIEnv *env, jclass type, jstring oldApk_, jstring newApk_, jstring patch_);</span><br></pre></td></tr></table></figure>
<p>bspatch-util.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bspatch-util.h"</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_bspatchtest_BsPatchUtil_patch(JNIEnv *env, jclass type, jstring oldApk_, jstring newApk_, jstring patch_) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">char</span> *argv[argc];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">"bspatch"</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = (<span class="keyword">char</span>*)((*env)-&gt;GetStringUTFChars(env, oldApk_, <span class="number">0</span>));</span><br><span class="line">    argv[<span class="number">2</span>] = (<span class="keyword">char</span>*)((*env)-&gt;GetStringUTFChars(env, newApk_, <span class="number">0</span>));</span><br><span class="line">    argv[<span class="number">3</span>] = (<span class="keyword">char</span>*)((*env)-&gt;GetStringUTFChars(env, patch_, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = executePatch(argc, argv);</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, oldApk_, argv[<span class="number">1</span>]);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, newApk_, argv[<span class="number">2</span>]);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, patch_, argv[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step5：将通过bsdiff生成的差量包<code>1.0.0-to-1.0.1.patch</code> push到手机sdcard目录</p>
<p>Step6：运行程序，点击”增量更新“</p>
<p><img src="/2018/07/22/android-ndk-apk-incremental-update/update.gif" alt="update"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><p><a href="https://www.jianshu.com/p/99d986db4db8" target="_blank" rel="noopener">Android 增量更新 （一） NDK 编译 Bsdiff</a></p>
</li>
<li><p><a href="https://blog.csdn.net/lmj623565791/article/details/52761658" target="_blank" rel="noopener">Android 增量更新完全解析</a></p>
</li>
<li><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1222/3795.html" target="_blank" rel="noopener">Android应用增量更新 - Smart App Updates</a></p>
</li>
<li><p><a href="https://blog.csdn.net/dd864140130/article/details/52928419" target="_blank" rel="noopener">漫谈Android 增量更新</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/lping/p/5833090.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/lping/p/5833090.html" target="_blank" rel="noopener">编译和使用bsdiff</a></a></p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-异常处理]]></title>
      <url>https://xch168.github.io/2018/07/22/android-ndk-exception-handle/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>异常，是程序不正确执行的表现。异常包括编译时异常、运行时异常。对程序的异常进行处理是程序健壮性的保障。</p>
</blockquote>
<a id="more"></a>
<h3 id="在JNI函数中调用Java方法出现异常情况"><a href="#在JNI函数中调用Java方法出现异常情况" class="headerlink" title="在JNI函数中调用Java方法出现异常情况"></a>在JNI函数中调用Java方法出现异常情况</h3><p>当JNI函数调用Java方法的时候出现异常，JNI的函数还是会继续执行：</p>
<p>Java层：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">invokeNativeMethod</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        invokeNativeMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exceptionMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        Log.i(TAG, <span class="string">"a = "</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_invokeNativeMethod(JNIEnv *env, jclass type) &#123;</span><br><span class="line"></span><br><span class="line">    jmethodID mid = env-&gt;GetStaticMethodID(type, <span class="string">"exceptionMethod"</span>, <span class="string">"()V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (mid != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        env-&gt;CallStaticVoidMethod(type, mid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOGI(<span class="string">"Run to here!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.ArithmeticException: divide by zero</span><br><span class="line">        at com.github.xch168.ndkdemo.MainActivity.exceptionMethod(MainActivity.java:<span class="number">28</span>)</span><br><span class="line">        at com.github.xch168.ndkdemo.MainActivity.invokeNativeMethod(Native Method)</span><br><span class="line">        at com.github.xch168.ndkdemo.MainActivity.onCreate(MainActivity.java:<span class="number">24</span>)</span><br><span class="line">...</span><br><span class="line">com.github.xch168.ndkdemo I/<span class="keyword">native</span>-lib: Run to here!!!</span><br></pre></td></tr></table></figure>
<p>从运行的结果可以看出，当JNI函数调用Java方法时，Java方法出现异常崩溃后，JNI函数还是会继续执行。</p>
<h3 id="异常检测与处理"><a href="#异常检测与处理" class="headerlink" title="异常检测与处理"></a>异常检测与处理</h3><p>步骤：</p>
<ol>
<li>调用<code>ExceptionCheck</code>函数检查最近一次JNI调用是否发生异常；</li>
<li>当检测到异常后，调用<code>ExceptionDescribe</code>函数打印这个异常的堆栈信息；</li>
<li>调用<code>ExceptionClear</code>函数清除异常堆栈信息的缓冲区（否则，后面调用ThrowNew抛出的异常堆栈信息会覆盖前面的异常信息）；</li>
<li>调用<code>ThrowNew</code>函数手动抛出一个<code>java.lang.Exception</code>异常。</li>
</ol>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_invokeNativeMethod(JNIEnv *env, jclass type) &#123;</span><br><span class="line"></span><br><span class="line">    jmethodID mid = env-&gt;GetStaticMethodID(type, <span class="string">"exceptionMethod"</span>, <span class="string">"()V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (mid != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用Java层的方法</span></span><br><span class="line">        env-&gt;CallStaticVoidMethod(type, mid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查JNI调用是否引发了异常</span></span><br><span class="line">    <span class="keyword">if</span> (env-&gt;ExceptionCheck()) &#123;</span><br><span class="line">        env-&gt;ExceptionDescribe();</span><br><span class="line">        env-&gt;ExceptionClear();</span><br><span class="line">        env-&gt;ThrowNew(env-&gt;FindClass(<span class="string">"java/lang/Exception"</span>), <span class="string">"JNI抛出的异常"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGI(<span class="string">"Run to here!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ArithmeticException: divide by zero</span><br><span class="line">at com.github.xch168.ndkdemo.MainActivity.exceptionMethod(MainActivity.java:<span class="number">28</span>)</span><br><span class="line">at com.github.xch168.ndkdemo.MainActivity.invokeNativeMethod(Native Method)</span><br><span class="line">at com.github.xch168.ndkdemo.MainActivity.onCreate(MainActivity.java:<span class="number">24</span>)</span><br><span class="line">...</span><br><span class="line">Caused by: java.lang.Exception: JNI抛出的异常</span><br><span class="line">        at com.github.xch168.ndkdemo.MainActivity.invokeNativeMethod(Native Method)</span><br><span class="line">        at com.github.xch168.ndkdemo.MainActivity.onCreate(MainActivity.java:<span class="number">24</span>)</span><br><span class="line">        at android.app.Activity.performCreate(Activity.java:<span class="number">7130</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>ExceptionOccurred</code>函数，如果检查有异常发生时，该函数会返回一个指向当前异常的引用。作用和<code>ExceptionCheck</code>一样，两者的返回值不一样。</p>
</blockquote>
<h3 id="封装抛出异常工具函数"><a href="#封装抛出异常工具函数" class="headerlink" title="封装抛出异常工具函数"></a>封装抛出异常工具函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">throwByExceptionName</span><span class="params">(JNIEnv *env, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">char</span> *msg)</span> </span>&#123;</span><br><span class="line">    jclass cls = env-&gt;FindClass(name);</span><br><span class="line">    <span class="keyword">if</span> (cls != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        env-&gt;ThrowNew(cls, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;DeleteLocalRef(cls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/u013718120/article/details/65629074" target="_blank" rel="noopener">Android NDK（七）：JNI异常处理</a></li>
<li><a href="https://www.cnblogs.com/chenxibobo/p/6895489.html" target="_blank" rel="noopener">Android jni/ndk编程五：jni异常处理</a></li>
<li><a href="https://blog.csdn.net/xyang81/article/details/45770551" target="_blank" rel="noopener">JNI/NDK开发指南（十一）——JNI异常处理</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-LLDB调试]]></title>
      <url>https://xch168.github.io/2018/07/15/android-ndk-lldb-debug/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>LLDB是一个高效的C/C++调试器，与LLVM编译器一起使用，提供了丰富的流程控制和数据监测，有效的帮助我们调试程序。</p>
</blockquote>
<a id="more"></a>
<h3 id="LLDB安装"><a href="#LLDB安装" class="headerlink" title="LLDB安装"></a>LLDB安装</h3><p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_install.png" alt="lldb-install"></p>
<h3 id="Debug-JNI"><a href="#Debug-JNI" class="headerlink" title="Debug JNI"></a>Debug JNI</h3><p>JNI的调试方式和Java的调试方式差不多，先设置<code>断点</code>，然后点击<code>Debug</code>，进入调试模式。</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_breakpoint.png" alt="lldb-breakpoint"></p>
<p>当程序运行到断点的时候就会停下来，这时在Debug面板可以看到变量的值和指针地址：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_debug_pane.png" alt="lldb-debug-pane"></p>
<h3 id="使用LLDB"><a href="#使用LLDB" class="headerlink" title="使用LLDB"></a>使用LLDB</h3><p>进入到Debug模式后，在<code>Variables</code>Tab的旁边有一个<code>LLDB</code>的Tab，切换到<code>LLDB</code>Tab，就可以使用LLDB命令进行调试，<strong>LLDB命令有很多强大的功能，比如：打印、寻址、调用堆栈等，通过这些命令可以有效的帮助调试NDK程序。</strong></p>
<ul>
<li><p><code>print (p)</code> 打印命令，打印变量及其值：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_print.png" alt="lldb-cmd-print"></p>
</li>
<li><p><code>po</code> 仅打印变量的值：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_po.png" alt="lldb-cmd-po"></p>
</li>
<li><p>&nbsp;<code>expr</code> 可以在调试时动态执行指定表达式，并打印结果，用于在调试过程中修改变量的值：</p>
<p>执行expr命令前：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_expr_jni.png" alt="lldb-cmd-expr-jni"></p>
<p>执行expr命令</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_expr.png" alt="lldb-cmd-expr"></p>
<p>执行expr命令后：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_expr_jni2.png" alt="lldb-cmd-expr-jni2"></p>
</li>
<li><p><code>call</code>命令，一般只在不需要显示输出或是方法无返回值时使用：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_call_jni.png" alt="lldb-cmd-call-jni"></p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_call.png" alt="lldb-cmd-call"></p>
</li>
<li><p><code>bt</code>命令用来打印堆栈信息，加<code>all</code>可打印所有thread的堆栈：</p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_bt_jni.png" alt="lldb-cmd-bt-jni"></p>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_bt.png" alt="lldb-cmd-bt"></p>
</li>
<li><p><code>image</code>命令用于寻址，可以用来查找栈地址对应的代码位置：</p>
<blockquote>
<p>image lookup –address 0xfxxxxx</p>
<p><code>0xfxxxxx</code>：表示对应的栈地址</p>
</blockquote>
<p><img src="/2018/07/15/android-ndk-lldb-debug/lldb_cmd_image.png" alt="lldb-cmd-image"></p>
</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://juejin.im/post/58dae3a5ac502e0058ee242f" target="_blank" rel="noopener">Andorid Studio NDK开发-LLDB调试</a></li>
<li><a href="http://lldb.llvm.org/" target="_blank" rel="noopener">The LLDB Debugger</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-JNI]]></title>
      <url>https://xch168.github.io/2018/07/08/android-ndk-jni/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>JNI（Java Native Interface）：Java本地接口。是为了方便使用Java调用C、C++等本地代码所封装的一层接口。大家都知道，Java的优点是跨平台，但是作为优点的同时，其在本地交互的时候就变成了缺点。Java的跨平台特性导致其本地交互的能力不够强大，一些和操作系统相关的特性Java无法完成，于是Java提供了JNI专门用于和本地代码交互，这样就增强了Java语言的本地交互能力。</p>
</blockquote>
<a id="more"></a>
<h3 id="JNI描述符"><a href="#JNI描述符" class="headerlink" title="JNI描述符"></a>JNI描述符</h3><h4 id="域描述符"><a href="#域描述符" class="headerlink" title="域描述符"></a>域描述符</h4><h5 id="基本类型描述符"><a href="#基本类型描述符" class="headerlink" title="基本类型描述符"></a>基本类型描述符</h5><table>
<thead>
<tr>
<th>Field Desciptor</th>
<th>Java Language Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Z</td>
<td>boolean</td>
</tr>
<tr>
<td>B</td>
<td>byte</td>
</tr>
<tr>
<td>C</td>
<td>char</td>
</tr>
<tr>
<td>S</td>
<td>short</td>
</tr>
<tr>
<td>I</td>
<td>int</td>
</tr>
<tr>
<td>J</td>
<td>long</td>
</tr>
<tr>
<td>F</td>
<td>float</td>
</tr>
<tr>
<td>D</td>
<td>Double</td>
</tr>
</tbody>
</table>
<p><em>除了<strong>boolean</strong>和<strong>long</strong>类型分别为<strong>Z</strong>和<strong>J</strong>外，其他的描述符对应的都是Java类型名的大写字母。<strong>void</strong>的描述符为<strong>V</strong></em></p>
<h5 id="引用类型描述符"><a href="#引用类型描述符" class="headerlink" title="引用类型描述符"></a>引用类型描述符</h5><p>一般的引用类型描述符规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L + 类描述符 + ；</span><br></pre></td></tr></table></figure>
<p>如，String类型的域描述符为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ljava/lang/String;</span><br></pre></td></tr></table></figure>
<p>数组的域描述符比较特殊，规则：其中有多少级数组就有多少个“[”，数组的类型为类时，则有分号，为基本类型时没有分号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ + 其类型的域描述符</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[]      描述符为 [I</span><br><span class="line">long[]     描述符为 [J</span><br><span class="line">String[]   描述符为 [Ljava/lang/String;</span><br><span class="line">int[][]    描述符为 [[I</span><br><span class="line">double[][] 描述符为 [[D</span><br></pre></td></tr></table></figure>
<h4 id="类描述符"><a href="#类描述符" class="headerlink" title="类描述符"></a>类描述符</h4><p>类描述符是类的完整名称：包名+类名，Java中包名用.分隔，JNI中改成/分隔</p>
<p>如，Java中java.lang.String类的描述符为java/lang/String</p>
<h4 id="方法描述符（方法签名）"><a href="#方法描述符（方法签名）" class="headerlink" title="方法描述符（方法签名）"></a>方法描述符（方法签名）</h4><p>方法描述符需要将所有类型的域描述符按照声明顺序放入括号，然后加上返回值类型的域描述符，规则如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数……)返回类型</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java 层方法               --&gt;    JNI 函数签名</span><br><span class="line">String getString()       --&gt; ()Ljava/lang/String;</span><br><span class="line">int sum(int a, int b)    --&gt; (II)I</span><br><span class="line">void main(String[] args) --&gt; ([Ljava/lang/String;)V</span><br></pre></td></tr></table></figure>
<h3 id="JNI方法结构分析"><a href="#JNI方法结构分析" class="headerlink" title="JNI方法结构分析"></a>JNI方法结构分析</h3><p>命名规则：</p>
<p><code>extern &quot;C&quot; JNIEXPORT 返回值 JNICALL Java_全路径类名_方法名__参数签名(JNIEnv* , jobject, 其它参数);</code></p>
<p>说明：</p>
<p><strong>JNIEXPORT</strong>、<strong>JNICALL</strong>：这两个关键词是宏定义，主要是注明该函数是JNI函数，当虚拟机加载so库时，如果发现函数含有这两个宏定义时，就会链接到对应的Java层的native方法。</p>
<p><strong>Java_</strong>：标识该函数来源于Java。</p>
<p><strong>__参数签名</strong>：如果是重载方法，则有参数签名，否则没有。参数签名的斜杠“/”改为“_”，分号“；”改为”_2”连接。</p>
<p><strong>extern “C”</strong> ：如果在使用的是C++，在函数前面加extern “C”，表示按照C的方式编译。</p>
<p><strong>JNIEnv</strong>：指向函数表指针的指针，函数表里面定义了很多JNI函数，通过这些函数可以实现Java层和JNI层的交互，就是说JNIEnv调用JNI函数可以访问Java虚拟机，操作Java对象。</p>
<p><strong>jobject</strong>：调用该方法的Java实例对象。对于Java的native方法，static和非static方法的区别在于第二个参数，static的为jclass，非static的为jobject。</p>
<p>示例：</p>
<p><img src="/2018/07/08/android-ndk-jni/method_mapping.png" alt="method-mapping"></p>
<h3 id="打印log"><a href="#打印log" class="headerlink" title="打印log"></a>打印log</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_TAG    <span class="meta-string">"native-lib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo2_MainActivity_stringFromJNI(JNIEnv* env, jobject<span class="comment">/* this */</span>) &#123;</span><br><span class="line">	<span class="comment">// 这样就可以在Logcat中查看到log</span></span><br><span class="line">    LOGI(<span class="string">"invoke method: stringFromJNI"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JNI函数访问Java对象的变量"><a href="#JNI函数访问Java对象的变量" class="headerlink" title="JNI函数访问Java对象的变量"></a>JNI函数访问Java对象的变量</h3><p>步骤：</p>
<ol>
<li><p>通过<code>env-&gt;GetObjectClass(jobject)</code>获取Java对象的class类，返回一个jclass；</p>
</li>
<li><p>调用<code>env-&gt;GetFieldID(jclazz, fieldName, signature)</code>的到该变量的id，即jfieldID；</p>
<p>如果变量是静态static的，则调用的方法为<code>GetStaticFieldID</code>。</p>
</li>
<li><p>最后通过调用<code>env-&gt;Get{type}Field(jobject, fieldId)</code>的到该变量的值。其中{type}是变量的类型；</p>
<p>如果变量是静态static的，则调用的方法是<code>GetStatic{type}Field(jclass, fieldId)</code></p>
<p><strong>注意</strong>：static的话，是使用jclass作为参数</p>
</li>
</ol>
<hr>
<h4 id="访问非static变量"><a href="#访问非static变量" class="headerlink" title="访问非static变量"></a>访问非static变量</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">addNum</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"调用前：num="</span> + num);</span><br><span class="line">    Log.i(TAG, <span class="string">"调用后："</span> + addNum());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_addNum(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    <span class="comment">// 获取实例对应的 class</span></span><br><span class="line">    jclass jclazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    <span class="comment">// 通过class获取相应的变量的 field id</span></span><br><span class="line">    jfieldID fid = env-&gt;GetFieldID(jclazz, <span class="string">"num"</span>, <span class="string">"I"</span>);</span><br><span class="line">    <span class="comment">// 通过 field id 获取对应变量的值</span></span><br><span class="line">    jint num = env-&gt;GetIntField(instance, fid);</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用前：num=<span class="number">1</span></span><br><span class="line">MainActivity: 调用后：<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h4 id="访问static变量"><a href="#访问static变量" class="headerlink" title="访问static变量"></a>访问static变量</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String name = <span class="string">"Tom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessStaticField</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"调用前：name="</span> + name);</span><br><span class="line">    accessStaticField();</span><br><span class="line">    Log.i(TAG, <span class="string">"调用后："</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_accessStaticField(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    jclass jclazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    jfieldID fid = env-&gt;GetStaticFieldID(jclazz, <span class="string">"name"</span>, <span class="string">"Ljava/lang/String;"</span>);</span><br><span class="line">    jstring name = (jstring)(env-&gt;GetStaticObjectField(jclazz, fid));</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str = env-&gt;GetStringUTFChars(name, JNI_FALSE);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 不要用 == 比较字符串</span></span><br><span class="line"><span class="comment">     *  name == (jstring)"Tom"</span></span><br><span class="line"><span class="comment">     * 或用 = 直接赋值</span></span><br><span class="line"><span class="comment">     * name = (jstring)"Jerry"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">30</span>] = <span class="string">"hello, "</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(ch, str);</span><br><span class="line">    jstring new_str = env-&gt;NewStringUTF(ch);</span><br><span class="line">    <span class="comment">// 将jstring类型的变量，设置到java</span></span><br><span class="line">    env-&gt;SetStaticObjectField(jclazz, fid, new_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用前：name=Tom</span><br><span class="line">MainActivity: 调用后：hello, Tom</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：获取Java静态变量，都是调用JNI相应静态函数，不能调用非静态的，同时留意传入的参数是<code>jclass</code>，而不是jobject。</p>
<h4 id="访问private变量，并对其修改"><a href="#访问private变量，并对其修改" class="headerlink" title="访问private变量，并对其修改"></a>访问private变量，并对其修改</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessPrivateField</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"调用前：age="</span> + age);</span><br><span class="line">    accessPrivateField();</span><br><span class="line">    Log.i(TAG, <span class="string">"调用后：age"</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_accessPrivateField(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    jclass clazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    jfieldID fid = env-&gt;GetFieldID(clazz, <span class="string">"age"</span>, <span class="string">"I"</span>);</span><br><span class="line">    jint age = env-&gt;GetIntField(instance, fid);</span><br><span class="line">    age++;</span><br><span class="line">    env-&gt;SetIntField(instance, fid, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用前：age=<span class="number">25</span></span><br><span class="line">MainActivity: 调用后：age=<span class="number">26</span></span><br></pre></td></tr></table></figure>
<h3 id="JNI函数调用Java对象的方法"><a href="#JNI函数调用Java对象的方法" class="headerlink" title="JNI函数调用Java对象的方法"></a>JNI函数调用Java对象的方法</h3><p>步骤：</p>
<ol>
<li><p>通过<code>env-&gt;GetObjectClass(jobject)</code>获取Java对象的class类，返回一个jclass；</p>
</li>
<li><p>通过<code>env-&gt;GetMethodID(jclass, methodName, sign)</code>获取到Java对象的方法id，即jmethodID，当获取的方法是static时，使用<code>GetStaticMethodID</code>；</p>
</li>
<li><p>通过JNI函数<code>env-&gt;Call{type}Method(jobject, jmethod, param...)</code>实现调用Java的方法；</p>
<p>若调用的是static方法，则使用<code>CallStatic{type}Method(jclass, jmethod, param...)</code>，使用的是jclass。</p>
</li>
</ol>
<hr>
<h4 id="调用Java公有方法"><a href="#调用Java公有方法" class="headerlink" title="调用Java公有方法"></a>调用Java公有方法</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name = <span class="string">"Tom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">invokePublicMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"调用前：name="</span> + name);</span><br><span class="line">    accessPublicMethod();</span><br><span class="line">    Log.i(TAG, <span class="string">"调用后：name="</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_invokePublicMethod(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    <span class="comment">// 1.获取对应的 class</span></span><br><span class="line">    jclass jclazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    <span class="comment">// 2.获取方法的id</span></span><br><span class="line">    jmethodID mid = env-&gt;GetMethodID(jclazz, <span class="string">"setName"</span>, <span class="string">"(Ljava/lang/String;)V"</span>);</span><br><span class="line">    <span class="comment">// 3.字符数组转换为字符串</span></span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">10</span>] = <span class="string">"Jerry"</span>;</span><br><span class="line">    jstring jName = env-&gt;NewStringUTF(c);</span><br><span class="line">    <span class="comment">// 4.通过该jobject调用对应的方法</span></span><br><span class="line">    env-&gt;CallVoidMethod(instance, mid, jName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用前：name=Tom</span><br><span class="line">MainActivity: 调用后：name=Jerry</span><br></pre></td></tr></table></figure>
<p><strong>调用Java private方法也一样，Java的访问修饰符对C++无效。</strong></p>
<h4 id="调用Java静态方法"><a href="#调用Java静态方法" class="headerlink" title="调用Java静态方法"></a>调用Java静态方法</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> height = <span class="number">170</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">invokeStaticMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"调用静态方法：getHeight() = "</span> + invokeStaticMethod());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_invokeStaticMethod(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    <span class="comment">// 1.获取对应的 class</span></span><br><span class="line">    jclass jclazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    <span class="comment">// 2.通过class类找到对应的静态方法</span></span><br><span class="line">    jmethodID mid = env-&gt;GetStaticMethodID(jclazz, <span class="string">"getHeight"</span>, <span class="string">"()I"</span>);</span><br><span class="line">    <span class="comment">// 3.通过class调用对应的静态方法</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;CallStaticIntMethod(jclazz, mid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用静态方法：getHeight() = <span class="number">170</span></span><br></pre></td></tr></table></figure>
<h4 id="调用Java父类方法"><a href="#调用Java父类方法" class="headerlink" title="调用Java父类方法"></a>调用Java父类方法</h4><p>Java层：native方法定义和调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to JNI world, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">	<span class="comment">//……</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">invokeSuperMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">"调用父类方法：hello(name) = "</span> + invokeSuperMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_invokeSuperMethod(JNIEnv *env, jobject instance) &#123;</span><br><span class="line">    <span class="comment">// 1.通过反射获取 class</span></span><br><span class="line">    jclass jclazz = env-&gt;FindClass(<span class="string">"com/github/xch168/ndkdemo/BaseActivity"</span>);</span><br><span class="line">    <span class="keyword">if</span> (jclazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> c[<span class="number">10</span>] = <span class="string">"error"</span>;</span><br><span class="line">        <span class="keyword">return</span> env-&gt;NewStringUTF(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.通过class找到对应的方法id</span></span><br><span class="line">    jmethodID mid = env-&gt;GetMethodID(jclazz, <span class="string">"hello"</span>, <span class="string">"(Ljava/lang/String;)Ljava/lang/String;"</span>);</span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">10</span>] = <span class="string">"Tom"</span>;</span><br><span class="line">    jstring jstr = env-&gt;NewStringUTF(ch);</span><br><span class="line">    <span class="comment">// 3.调用方法</span></span><br><span class="line">    <span class="keyword">return</span> (jstring) env-&gt;CallNonvirtualObjectMethod(instance, jclazz, mid, jstr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: 调用父类方法：hello(name) = Welcome to JNI world, Tom</span><br></pre></td></tr></table></figure>
<p><strong>两个不同点</strong>：</p>
<ul>
<li>获取的是父类的方法，所有不能通过GetObjectClass获取，需要通过反射<code>FindClass</code>获取；</li>
<li>调用父类的方法是<code>CallNonvirtual{type}Method</code>函数。Novirtual是非虚函数。</li>
</ul>
<h3 id="Java方法传递参数给JNI函数"><a href="#Java方法传递参数给JNI函数" class="headerlink" title="Java方法传递参数给JNI函数"></a>Java方法传递参数给JNI函数</h3><p>native方法既可以传递基本类型参数给JNI（可以不经过转换直接使用），也可以传递复杂类型（需要转换为C/C++的数据结构才能使用）如数组，String或自定义的类等。</p>
<p>用到的JNI函数：</p>
<ul>
<li>获取数组长度：<code>GetArrayLength(j{type}Array)</code>，type为基础类型；</li>
<li>数组转换为对应类型的指针：<code>Get{type}ArrayElements(jarr, 0)</code></li>
<li>获取构造函数的jmethodID时，仍然是用<code>env-&gt;GetMethodID(jclass, methodName, sign)</code>获取，方法名是<code>&lt;init&gt;</code>；</li>
<li>通过构造函数new一个jobject，<code>env-&gt;NewObject(jclass, constructorMethodId, param...)</code>，无参构造函数param为空。</li>
</ul>
<h4 id="数组参数的传递"><a href="#数组参数的传递" class="headerlink" title="数组参数的传递"></a>数组参数的传递</h4><p>Java层：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">intArrayMethod</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"intArrayMethod: "</span> + intArrayMethod(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">9</span>&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_intArrayMethod(JNIEnv *env, jobject instance, jintArray arr_) &#123;</span><br><span class="line">    jint *arr = env-&gt;GetIntArrayElements(arr_, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = env-&gt;GetArrayLength(arr_);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseIntArrayElements(arr_, arr, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: intArrayMethod: <span class="number">25</span></span><br></pre></td></tr></table></figure>
<h4 id="自定义对象参数的传递"><a href="#自定义对象参数的传递" class="headerlink" title="自定义对象参数的传递"></a>自定义对象参数的传递</h4><p>Java层：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person: &#123;name:"</span> + name + <span class="string">", age:"</span> + age + <span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Person <span class="title">objectMethod</span><span class="params">(Person person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">"objectMethod: "</span> + objectMethod(<span class="keyword">new</span> Person()).toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++层：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jobject JNICALL</span><br><span class="line">Java_com_github_xch168_ndkdemo_MainActivity_objectMethod(JNIEnv *env, jobject instance, jobject person) &#123;</span><br><span class="line"></span><br><span class="line">    jclass clazz = env-&gt;GetObjectClass(person); <span class="comment">// 主要用的是person，而不是instance</span></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"cannot find class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    jmethodID constructorMid = env-&gt;GetMethodID(clazz, <span class="string">"&lt;init&gt;"</span>, <span class="string">"(ILjava/lang/String;)V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (constructorMid == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"cannot find constructor method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    jstring name = env-&gt;NewStringUTF(<span class="string">"Tom"</span>);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewObject(clazz, constructorMid, <span class="number">25</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivity: objectMethod: Person: &#123;name:Tom, age:<span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/singwhatiwanna/article/details/9061545" target="_blank" rel="noopener">Java JNI介绍</a></li>
<li><a href="http://cfanr.cn/2017/07/29/Android-NDK-dev-JNI-s-foundation/" target="_blank" rel="noopener">Android NDK开发：JNI基础篇</a></li>
<li><a href="http://cfanr.cn/2017/08/05/Android-NDK-dev-JNI-s-practice/" target="_blank" rel="noopener">Android NDK开发：JNI实战篇</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-CMake]]></title>
      <url>https://xch168.github.io/2018/07/04/android-ndk-cmake/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>在Android Studio 2.2及更高的版本，可以使用<code>CMake</code>将C/C++代码编译到一个native library（即.so文件），然后打包到APK中。</p>
</blockquote>
<a id="more"></a>
<h3 id="在Gradle中配置CMake变量"><a href="#在Gradle中配置CMake变量" class="headerlink" title="在Gradle中配置CMake变量"></a>在Gradle中配置CMake变量</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 用于配置Cmake构建参数</span></span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">      cmake &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 将参数传递给变量时，请使用以下语法：</span></span><br><span class="line">        <span class="comment">// arguments "-DVAR_NAME=ARGUMENT".</span></span><br><span class="line">        arguments <span class="string">"-DANDROID_ARM_NEON=TRUE"</span>,</span><br><span class="line">        <span class="comment">// 如果要将多个参数传递给变量, 使用以下语法一起传递:</span></span><br><span class="line">        <span class="comment">// arguments "-DVAR_NAME=ARG_1 ARG_2"</span></span><br><span class="line">        <span class="comment">// 下面一行将 'rtti' 和 'exceptions' 传递给 'ANDROID_CPP_FEATURES'.</span></span><br><span class="line">                  <span class="string">"-DANDROID_CPP_FEATURES=rtti exceptions"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于链接CMake脚本</span></span><br><span class="line">  externalNativeBuild &#123;</span><br><span class="line">      cmake &#123;</span><br><span class="line">          path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CMake部分构建变量列表：</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ANDROID_TOOLCHAIN</td>
<td>clang(默认)</td>
<td>指定CMake应该使用的编译器工具链</td>
</tr>
<tr>
<td>ANDROID_PLATFORM</td>
<td>android-19</td>
<td>指定Android的目标平台</td>
</tr>
<tr>
<td>ANDROID_CPP_FEATURES</td>
<td>默认为空，可配置：<br>rtti（RunTime Type Information）：运行时类型信息<br> exceptions: 指示代码使用C++异常</td>
<td>指定CMake编译时需要使用某些C++特性</td>
</tr>
<tr>
<td>ANDROID_ARM_MODE</td>
<td>thumb（默认）<br>arm</td>
<td>指定是arm还是以thumb模式生成ARM目标二进制库</td>
</tr>
</tbody>
</table>
<h3 id="CMake构建命令"><a href="#CMake构建命令" class="headerlink" title="CMake构建命令"></a>CMake构建命令</h3><p>Android Studio在<code>cmake_build_command.txt</code>文件中保存用于执行CMake构建的构建参数。</p>
<p>Android Studio会为每个ABI和每个构建类型创建<code>cmake_build_command.txt</code>，放置在如下目录：</p>
<blockquote>
<p>&lt;project-root&gt;/&lt;module-root&gt;/.externalNativeBuild/cmake/&lt;build-type&gt;/&lt;ABI&gt;/</p>
</blockquote>
<p><img src="/2018/07/04/android-ndk-cmake/cmake_build_cmd.png" alt="cmake-build-cmd"></p>
<p>示例：debug模式下的<code>armeabi-v7a</code>的CMake构建命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Executable : /Users/xch/Library/Android/sdk/cmake/3.6.4111459/bin/cmake</span><br><span class="line">arguments : </span><br><span class="line">-H/Users/xch/debug/Android/NDKDemo2/app</span><br><span class="line">-B/Users/xch/debug/Android/NDKDemo2/app/.externalNativeBuild/cmake/debug/armeabi-v7a</span><br><span class="line">-DANDROID_ABI=armeabi-v7a</span><br><span class="line">-DANDROID_PLATFORM=android-19</span><br><span class="line">-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=/Users/xch/debug/Android/NDKDemo2/app/build/intermediates/cmake/debug/obj/armeabi-v7a</span><br><span class="line">-DCMAKE_BUILD_TYPE=Debug</span><br><span class="line">-DANDROID_NDK=/Users/xch/Library/Android/sdk/ndk-bundle</span><br><span class="line">-DCMAKE_CXX_FLAGS=-frtti -fexceptions</span><br><span class="line">-DCMAKE_TOOLCHAIN_FILE=/Users/xch/Library/Android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake</span><br><span class="line">-DCMAKE_MAKE_PROGRAM=/Users/xch/Library/Android/sdk/cmake/3.6.4111459/bin/ninja</span><br><span class="line">-GAndroid Gradle - Ninja</span><br><span class="line">jvmArgs :</span><br></pre></td></tr></table></figure>
<p>这些构建参数是Gradle插件基于<code>build.gradle</code>的配置自动生成。</p>
<p>CMake构建参数列表：</p>
<table>
<thead>
<tr>
<th>构建参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-G  &lt;build-system&gt;</td>
<td>Android Gradle - Ninja是Android Studio唯一支持的C/C++构建系统.CMake会生成<code>android_gradle_build.json</code>文件。 其中包含有关CMake构建的Gradle插件的元数据，例如编译器标志和目标名称。</td>
</tr>
<tr>
<td>-DANDROID_ABI &lt;abi&gt;</td>
<td>目标ABI</td>
</tr>
<tr>
<td>-DCMAKE_LIBRARY_OUTPUT_DIRECTORY &lt;path&gt;</td>
<td>CMake生成的库的位置</td>
</tr>
<tr>
<td>-DCMAKE_TOOLCHAIN_FILE &lt;path&gt;</td>
<td>CMake用于交叉编译的<code>android.toolchain.cmake</code>文件的路径</td>
</tr>
</tbody>
</table>
<h3 id="CMakeList-txt文件说明"><a href="#CMakeList-txt文件说明" class="headerlink" title="CMakeList.txt文件说明"></a>CMakeList.txt文件说明</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 指定CMake编译器的最低版本</span><br><span class="line">cmake_minimum_required(VERSION <span class="number">3.4</span><span class="number">.1</span>)</span><br><span class="line"></span><br><span class="line"># 要求CMake根据指定的源文件生成库</span><br><span class="line">add_library( # 生成的库的名称</span><br><span class="line">             native-lib</span><br><span class="line"></span><br><span class="line">             # 设置生成的库的类型</span><br><span class="line">             SHARED</span><br><span class="line"></span><br><span class="line">             # 所有需要加入到这个库的源文件</span><br><span class="line">             src<span class="regexp">/main/</span>cpp/native-lib.cpp )</span><br><span class="line"></span><br><span class="line"># 如果需要使用系统预构建库，可以使用该方法来查找，比如这里的log库</span><br><span class="line">find_library( # 该变量保存所要关联库的路径</span><br><span class="line">              log-lib</span><br><span class="line"></span><br><span class="line">              # 需要关联的库名称</span><br><span class="line">              log )</span><br><span class="line"></span><br><span class="line"># 指定需要关联的库</span><br><span class="line">target_link_libraries( # 目标库文件</span><br><span class="line">                       native-lib</span><br><span class="line"></span><br><span class="line">                       # 需要在目标库文件中使用的库</span><br><span class="line">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>
<p>在上面使用<code>add_library</code>来添加系统的预构建库。如果要添加其他的非系统的预构建库，比较FFmpeg的相关库，需要按如下格式：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 添加第三方非系统预构建库</span><br><span class="line">add_library( # 导入的库的名称</span><br><span class="line">    		 imported-lib</span><br><span class="line">            </span><br><span class="line">             # 导入的库的类型</span><br><span class="line">             SHARED</span><br><span class="line">            </span><br><span class="line">             # 表示是导入第三方库</span><br><span class="line">             IMPORTED )</span><br><span class="line"></span><br><span class="line"># 指定库的路径</span><br><span class="line">set_target_properties( # 指定导入的库的名称</span><br><span class="line">                       imported-lib</span><br><span class="line"></span><br><span class="line">                       # Specifies the parameter you want to define.</span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line"></span><br><span class="line">                       # 指定要导入的库的路径</span><br><span class="line">                       imported-lib<span class="regexp">/src/</span>$&#123;ANDROID_ABI&#125;/libimported-lib.so )</span><br><span class="line"></span><br><span class="line"># 包含头文件的路径</span><br><span class="line">include_directories( imported-lib<span class="regexp">/include/</span> )</span><br></pre></td></tr></table></figure>
<p>如果要显示执行构建过程中的详细信息，比如为了得到更详细的出错信息。</p>
<p>运行后在<code>.externalNativeBuild/cmake/debug/{abi}/cmake_build_output.txt</code>查看log</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 开启输出详细的编译和链接信息</span><br><span class="line">set(CMAKE_VERBOSE_MAKEFILE on)</span><br><span class="line"></span><br><span class="line">message(STATUS <span class="string">"要打印的信息"</span>)</span><br></pre></td></tr></table></figure>
<p>自定义变量</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(变量名 变量值)</span><br></pre></td></tr></table></figure>
<p>常用变量</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 引用变量格式：$&#123;变量名&#125;</span><br><span class="line"></span><br><span class="line"># 工程的源文件目录</span><br><span class="line">PROJECT_SOURCE_DIR </span><br><span class="line"># CMakeList.txt文件所在的目录</span><br><span class="line">CMAKE_SOURCE_DIR</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/ndk/guides/cmake" target="_blank" rel="noopener">CMake</a></li>
<li><a href="https://juejin.im/post/5a30fa9b6fb9a0450167f43e" target="_blank" rel="noopener">使用 CMake 进行 NDK 开发之如何编写 CMakeLists txt 脚本</a></li>
<li><a href="https://blog.csdn.net/guiying712/article/details/75452193" target="_blank" rel="noopener">JNI和NDK编程-使用AndroidStudio进行NDK开发</a></li>
<li><a href="https://juejin.im/post/595da4e25188250d8b65ddbf" target="_blank" rel="noopener">Android NDK开发扫盲及最新CMake的编译使用</a></li>
<li><a href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html" target="_blank" rel="noopener"><a href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html#id2" target="_blank" rel="noopener">cmake-commands</a></a></li>
<li><a href="https://blog.csdn.net/qq_34902522/article/details/78144127" target="_blank" rel="noopener">通过CMake来进行ndk开发之补充篇</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK开发-环境搭建]]></title>
      <url>https://xch168.github.io/2018/07/01/android-ndk-environment/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>NDK</code>全称Native Development Kit，是一组可以让您在Android应用中利用C和C++代码的工具。</p>
<a id="more"></a>
<p>使用NDK的好处：</p>
<p><code>安全</code>：APK的Java层代码很容易被反编译，而C/C++库反编译难度较大。</p>
<p><code>效率</code>：将要求高性能的应用逻辑使用C开发，从而提高应用程序的执行效率。</p>
<p><code>移植</code>：用C/C++写的库可以方便在其他的嵌入式平台上再次使用，如在Android、iOS使用。</p>
<p><code>复用</code>：可以方便地使用现存的开源库。大部分现存的开源库都是用C/C++代码编写的，如音视频处理库FFmpeg。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p>Android Studio 3.2</p>
<h4 id="下载NDK"><a href="#下载NDK" class="headerlink" title="下载NDK"></a>下载NDK</h4><p><img src="/2018/07/01/android-ndk-environment/ndk_download.png" alt="download_ndk"></p>
<p><code>LLDB</code>：是C/C++的调试器，可以用来做NDK开发的调试。</p>
<p>下载后的NDK位置(Mac)：<code>/Users/你的用户名/Library/Android/sdk/ndk-bundle</code></p>
<h3 id="使用NDK"><a href="#使用NDK" class="headerlink" title="使用NDK"></a>使用NDK</h3><h4 id="创建一个支持NDK的Project"><a href="#创建一个支持NDK的Project" class="headerlink" title="创建一个支持NDK的Project"></a>创建一个支持NDK的Project</h4><p><img src="/2018/07/01/android-ndk-environment/create_ndk_project.png" alt="create_ndk_project"></p>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="/2018/07/01/android-ndk-environment/ndk_project_structure.png" alt="ndk-project_structure"></p>
<h4 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h4><p><img src="/2018/07/01/android-ndk-environment/ndk_gradle_config.png" alt="ndk-gradle-config"></p>
<h4 id="CMakeLists-txt构建脚本配置"><a href="#CMakeLists-txt构建脚本配置" class="headerlink" title="CMakeLists.txt构建脚本配置"></a>CMakeLists.txt构建脚本配置</h4><p><img src="/2018/07/01/android-ndk-environment/ndk_cmake_config.png" alt="ndk-cmake-config"></p>
<h4 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h4><p><img src="/2018/07/01/android-ndk-environment/ndk-native-jni.png" alt="ndk-native-jni-code"></p>
<h4 id="生成so库"><a href="#生成so库" class="headerlink" title="生成so库"></a>生成so库</h4><p><img src="/2018/07/01/android-ndk-environment/ndk_so.png" alt="ndk-so"></p>
<p>生成的so库会自动打包到apk中，不需要手动去移动。</p>
<p>使用<code>Analyze Apk</code>工具查看打包apk中的so库</p>
<p><img src="/2018/07/01/android-ndk-environment/ndk_apk_analyze.png" alt="ndk-apk-analyze"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://blog.csdn.net/a396901990/article/details/51872849" target="_blank" rel="noopener">NDK开发－简介&amp;环境搭建</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Lint进行静态代码分析]]></title>
      <url>https://xch168.github.io/2018/06/17/use-lint-analyse-code/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Lint是Android Studio提供的一个代码扫描工具，通过对代码进行静态分析，可以帮助开发者发现代码的质量问题和提出一下改进建议。</p>
<p>Lint工具可检查您的Android项目源文件是否包含潜在错误，以及在正确性、安全性、性能、易用性、便利性和国际化方面是否需要改进优化。</p>
</blockquote>
<a id="more"></a>
<h3 id="Lint的工作流程"><a href="#Lint的工作流程" class="headerlink" title="Lint的工作流程"></a>Lint的工作流程</h3><p><img src="/2018/06/17/use-lint-analyse-code/lint_flow.png" alt="Lint 工具的代码扫描工作流"></p>
<p>应用源文件：源文件包含组成 Android 项目的文件，包括 Java 和 XML 文件、图标和 ProGuard 配置文件等。</p>
<p><code>lint.xml</code>文件：此配置文件可用于指定您希望排除的任何 Lint 检查以及自定义问题严重级别。</p>
<p>Lint工具：可以从命令行或在 Android Studio 中对 Android 项目运行此静态代码扫描工具。</p>
<p>Lint检查结果：可以在控制台或 Android Studio 的 Inspection Results 窗口中查看 Lint 检查结果。</p>
<ul>
<li>Correctness：正确性</li>
<li>Security：安全性</li>
<li>Performance：性能</li>
<li>Usability：易用性</li>
<li>Accessibility：便利性</li>
<li>I18n：国际化</li>
</ul>
<h3 id="通过-Gradle-运行-Lint"><a href="#通过-Gradle-运行-Lint" class="headerlink" title="通过 Gradle 运行 Lint"></a>通过 Gradle 运行 Lint</h3><ul>
<li><p>在 Windows 上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew lint</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Linux 或 Mac 上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew lint</span><br></pre></td></tr></table></figure>
<p>为特定构建变体运行 <code>lint</code> 任务，您必须大写变体名称并在其前面加上 <code>lint</code> 前缀。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew lintDebug</span><br></pre></td></tr></table></figure>
<p>Lint 工具完成其检查后，Lint 报告会提供两个路径，分别指向该报告的 XML 和 HTML 版本。</p>
<p><img src="/2018/06/17/use-lint-analyse-code/lint_report.png" alt="lint_report"></p>
</li>
</ul>
<h3 id="在Android-Studio手动运行检查"><a href="#在Android-Studio手动运行检查" class="headerlink" title="在Android Studio手动运行检查"></a>在Android Studio手动运行检查</h3><p><strong>Analyze &gt;Inspect Code</strong> ，手动运行已配置的 Lint 和其他 IDE 检查。检查结果显示在 <strong>Inspection Results</strong> 窗口中。</p>
<p><img src="/2018/06/17/use-lint-analyse-code/inspect.png" alt="inspect"></p>
<p><img src="/2018/06/17/use-lint-analyse-code/inspection_results.png" alt="inspect_results"></p>
<h3 id="通过-Gradle-配置-Lint-选项"><a href="#通过-Gradle-配置-Lint-选项" class="headerlink" title="通过 Gradle 配置 Lint 选项"></a>通过 Gradle 配置 Lint 选项</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        <span class="comment">// 设置为 true，则当 Lint 发现错误时停止 Gradle 构建</span></span><br><span class="line">        abortOnError <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 设置为 true，则当有错误时会显示文件的全路径或绝对路径 (默认情况下为true)</span></span><br><span class="line">        absolutePaths <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 仅检查指定的问题（根据 id 指定）</span></span><br><span class="line">        check <span class="string">'NewApi'</span>, <span class="string">'InlinedApi'</span></span><br><span class="line">        <span class="comment">// 设置为 true 则检查所有的问题，包括默认不检查问题</span></span><br><span class="line">        checkAllWarnings <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 设置为 true 后，release 构建都会以 Fatal 的设置来运行 Lint。</span></span><br><span class="line">        <span class="comment">// 如果构建时发现了致命（Fatal）的问题，会中止构建（具体由 abortOnError 控制）</span></span><br><span class="line">        checkReleaseBuilds <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 不检查指定的问题（根据问题 id 指定）</span></span><br><span class="line">        disable <span class="string">'TypographyFractions'</span>,<span class="string">'TypographyQuotes'</span></span><br><span class="line">        <span class="comment">// 检查指定的问题（根据 id 指定）</span></span><br><span class="line">        enable <span class="string">'RtlHardcoded'</span>,<span class="string">'RtlCompat'</span>, <span class="string">'RtlEnabled'</span></span><br><span class="line">        <span class="comment">// 在报告中是否返回对应的 Lint 说明</span></span><br><span class="line">        explainIssues <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 写入报告的路径，默认为构建目录下的 lint-results.html</span></span><br><span class="line">        htmlOutput file(<span class="string">"lint-report.html"</span>)</span><br><span class="line">        <span class="comment">// 设置为 true 则会生成一个 HTML 格式的报告</span></span><br><span class="line">        htmlReport <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 设置为 true 则只报告错误</span></span><br><span class="line">        ignoreWarnings <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 重新指定 Lint 规则配置文件</span></span><br><span class="line">        lintConfig file(<span class="string">"default-lint.xml"</span>)</span><br><span class="line">        <span class="comment">// 设置为 true 则错误报告中不包括源代码的行号</span></span><br><span class="line">        noLines <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 设置为 true 时 Lint 将不报告分析的进度</span></span><br><span class="line">        quiet <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 覆盖 Lint 规则的严重程度，例如：</span></span><br><span class="line">        severityOverrides [<span class="string">"MissingTranslation"</span>: LintOptions.SEVERITY_WARNING]</span><br><span class="line">        <span class="comment">// 设置为 true 则显示一个问题所在的所有地方，而不会截短列表</span></span><br><span class="line">        showAll <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 配置写入输出结果的位置，格式可以是文件或 stdout</span></span><br><span class="line">        textOutput <span class="string">'stdout'</span></span><br><span class="line">        <span class="comment">// 设置为 true，则生成纯文本报告（默认为 false）</span></span><br><span class="line">        textReport <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 设置为 true，则会把所有警告视为错误处理</span></span><br><span class="line">        warningsAsErrors <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 写入检查报告的文件（不指定默认为 lint-results.xml）</span></span><br><span class="line">        xmlOutput file(<span class="string">"lint-report.xml"</span>)</span><br><span class="line">        <span class="comment">// 设置为 true 则会生成一个 XML 报告</span></span><br><span class="line">        xmlReport <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 将指定问题（根据 id 指定）的严重级别（severity）设置为 Fatal</span></span><br><span class="line">        fatal <span class="string">'NewApi'</span>, <span class="string">'InlineApi'</span></span><br><span class="line">        <span class="comment">// 将指定问题（根据 id 指定）的严重级别（severity）设置为 Error</span></span><br><span class="line">        error <span class="string">'Wakelock'</span>, <span class="string">'TextViewEdits'</span></span><br><span class="line">        <span class="comment">// 将指定问题（根据 id 指定）的严重级别（severity）设置为 Warning</span></span><br><span class="line">        warning <span class="string">'ResourceAsColor'</span></span><br><span class="line">        <span class="comment">// 将指定问题（根据 id 指定）的严重级别（severity）设置为 ignore</span></span><br><span class="line">        ignore <span class="string">'TypographyQuotes'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>lint.xml</code>配置文件示例</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">lint</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Disable the given check in this project --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">"IconMissingDensityFolder"</span> <span class="attr">severity</span>=<span class="string">"ignore"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Ignore the ObsoleteLayoutParam issue in the specified files --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">"ObsoleteLayoutParam"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">"res/layout/activation.xml"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">"res/layout-xlarge/activation.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issue</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Ignore the UselessLeaf issue in the specified file --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">"UselessLeaf"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">"res/layout/main.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issue</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Change the severity of hardcoded strings to "error" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">"HardcodedText"</span> <span class="attr">severity</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">"Deprecated"</span> <span class="attr">severity</span>=<span class="string">"warning"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">regexp</span>=<span class="string">"singleLine"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>issue标签</code>：指定的一个检测规则，</p>
<p><code>id</code>：规则名</p>
<p><code>severity</code>：严重级别</p>
<p><code>ignore标签</code>：指定忽略检查的文件，或者匹配正则表达式</p>
<h3 id="配置-Lint-对-Java-的检查"><a href="#配置-Lint-对-Java-的检查" class="headerlink" title="配置 Lint 对 Java 的检查"></a>配置 Lint 对 Java 的检查</h3><p>在 Java 代码添加 <code>@SuppressLint</code> 注解，来特别禁止 Lint 检查某个 Java 类或方法</p>
<p>示例1. 关闭对方法中<code>NewApi</code>问题的检测</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.main);</span><br></pre></td></tr></table></figure>
<p>示例2. 关闭类中<code>ParserError</code>问题的检测</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"ParserError"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeedProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<p>示例3. 禁止检查 Java 文件中的所有 Lint 问题</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"all"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="配置-Lint-对-XML-的检查"><a href="#配置-Lint-对-XML-的检查" class="headerlink" title="配置 Lint 对 XML 的检查"></a>配置 Lint 对 XML 的检查</h3><p>使用<code>tools:ignore</code> 属性禁止 Lint 检查 XML 文件的特定部分，首先要在所在的xml文件添加命名空间</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:tools="http://schemas.android.com/tools"</span><br></pre></td></tr></table></figure>
<p>示例1. 忽略<linearlayout> 元素中的 UnusedResources 问题</linearlayout></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:ignore</span>=<span class="string">"UnusedResources"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/auto_update_prompt"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>示例2. 禁止检查多个问题，使用以逗号分隔的字符串列出要禁止检查的问题</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools:ignore="NewApi,StringFormatInvalid"</span><br></pre></td></tr></table></figure>
<p>示例3. 禁止 Lint 检查 XML 元素中的所有问题</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools:ignore="all"</span><br></pre></td></tr></table></figure>
<h3 id="在Android-Studio中查看和编辑检查配置文件"><a href="#在Android-Studio中查看和编辑检查配置文件" class="headerlink" title="在Android Studio中查看和编辑检查配置文件"></a>在Android Studio中查看和编辑检查配置文件</h3><blockquote>
<p>Android Studio 附带多种 Lint 及其他检查配置文件，可通过 Android 更新来更新此类配置文件。您可以原封不动地使用这些配置文件，也可以编辑它们的名称、描述、严重级别和范围。您还可以激活和停用全部配置文件组或一组配置文件中的个别配置文件。</p>
</blockquote>
<ol>
<li><p>选择 <strong>Analyze &gt; Inspect Code</strong>。</p>
</li>
<li><p>在 <strong>Specify Scope</strong> 对话框中的 <strong>Inspection Profile</strong> 下面，点击 <strong>More</strong>。</p>
<p>此时将显示 <strong>Inspections</strong> 对话框，其中列出了一系列支持的检查及其描述。</p>
<p><img src="/2018/06/17/use-lint-analyse-code/inspect_profile.png" alt="inspect_profile"></p>
</li>
<li><p>选择 <strong>Profile</strong> 下拉列表，在 <strong>Default</strong> (Android Studio) 和 <strong>Project Default</strong>（活动项目）检查项目之间切换。</p>
</li>
<li><p>在左侧窗格的 <strong>Inspections</strong> 对话框中，选择最上面的配置文件类别，或展开一个组，选择特定配置文件。选择一种配置文件类别后，您可以将此类别中的所有检查项目当作一个检查项目进行编辑。</p>
</li>
<li><p>选择 <strong>Manage</strong> 下拉列表，以复制、重命名、将描述添加至、导出和导入检查项目。</p>
</li>
<li><p>操作完成后点击 <strong>OK</strong>。</p>
</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/studio/write/lint#commandline" target="_blank" rel="noopener">使用 Lint 改进您的代码</a></li>
<li><a href="https://juejin.im/post/59dde8036fb9a045055d1b93#heading-2" target="_blank" rel="noopener">Android Lint 实践 —— 简介及常见问题分析</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中tools属性的使用]]></title>
      <url>https://xch168.github.io/2018/06/09/android-tools-attributes-use/</url>
      <content type="html"><![CDATA[<h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><blockquote>
<p>Android Studio在<code>tools</code>命名空间中支持一些XML属性来开关设计功能和编译时行为。当构建应用时，构建工具会删除这些属性，从而不会影响APK的大小和运行行为。</p>
</blockquote>
<a id="more"></a>
<h4 id="二、引入tools命名空间"><a href="#二、引入tools命名空间" class="headerlink" title="二、引入tools命名空间"></a>二、引入<code>tools</code>命名空间</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RootTag</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span> &gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="三、XML视图预览相关属性"><a href="#三、XML视图预览相关属性" class="headerlink" title="三、XML视图预览相关属性"></a>三、XML视图预览相关属性</h4><h5 id="1-tools-替代android"><a href="#1-tools-替代android" class="headerlink" title="1. tools:替代android:"></a>1. <code>tools:</code>替代<code>android:</code></h5><p>示例1：预览时展示指定文本。</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_text.png" alt="tools_text"></p>
<p>示例2：<code>tools:text</code>和<code>android:text</code>同时存在，在预览时<code>tools:text</code>属性会覆盖<code>android:text</code>属性。</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_text2.png" alt="tools_text2"></p>
<h5 id="2-tools-context"><a href="#2-tools-context" class="headerlink" title="2. tools:context"></a>2. tools:context</h5><p>声明该布局文件默认关联的Activity，这样可以在预览的时候就知道展示的主题，并且知道在哪插入<code>onClick</code>对应的处理事件。</p>
<p>示例1：为Activity指定主题</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_context_theme.png" alt="tools_context_theme"></p>
<p>示例2：快速创建<code>onClick</code>的事件处理方法</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_context_onclick.png" alt="tools_context_onclick"></p>
<h5 id="3-tools-itemCount"><a href="#3-tools-itemCount" class="headerlink" title="3. tools:itemCount"></a>3. tools:itemCount</h5><p>用在<code>RecyclerView</code>用来指定预览几项</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_itemcount.png" alt="tools_itemCount"></p>
<h5 id="4-tools-layout"><a href="#4-tools-layout" class="headerlink" title="4. tools:layout"></a>4. tools:layout</h5><p>这个属性用来声明这个fragment内部所加载展示的布局</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_layout.png" alt="tools_layout"></p>
<h5 id="5-tools-listitem"><a href="#5-tools-listitem" class="headerlink" title="5. tools:listitem"></a>5. tools:listitem</h5><p>用在ListView用来指定其item的布局</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_listitem.png" alt="tools_listitem"></p>
<h5 id="6-tools-showIn"><a href="#6-tools-showIn" class="headerlink" title="6. tools:showIn"></a>6. tools:showIn</h5><p>指定这个View被<code>&lt;include&gt;</code>到哪个layout中</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:showIn</span>=<span class="string">"@layout/activity_main"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="7-tools-sample-资源"><a href="#7-tools-sample-资源" class="headerlink" title="7.@tools:sample/*资源"></a>7.<code>@tools:sample/*</code>资源</h5><p>为View设置占位文本或图片</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_sample_resource.png" alt="tools_sample_resource"></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>@tools:sample/full_names</td>
<td>姓名</td>
</tr>
<tr>
<td>@tools:sample/date/ddmmyy</td>
<td>日期</td>
</tr>
<tr>
<td>@tools:sample/avatars</td>
<td>头像</td>
</tr>
<tr>
<td>@tools:sample/backgrounds/scenicb</td>
<td>背景图</td>
</tr>
</tbody>
</table>
<h4 id="四、资源压缩相关属性"><a href="#四、资源压缩相关属性" class="headerlink" title="四、资源压缩相关属性"></a>四、资源压缩相关属性</h4><p>开启资源压缩</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            shrinkResources <span class="literal">true</span>  <span class="comment">// 开启资源压缩。minifyEnabled也必须为true，否则编译不通过</span></span><br><span class="line">            minifyEnabled <span class="literal">true</span>    <span class="comment">// 开启代码混淆/压缩</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>),</span><br><span class="line">                    <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="1-tools-shrinkMode"><a href="#1-tools-shrinkMode" class="headerlink" title="1. tools:shrinkMode"></a>1. tools:shrinkMode</h5><p>这个属性允许你指定构建工具是否使用“安全模式”(<code>shrinkMode=&quot;safe&quot;</code>)或“严格模式”(<code>shrinkMode=&quot;strict&quot;</code>)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:shrinkMode</span>=<span class="string">"strict"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>当启用严格模式，需要使用<code>tools:keep</code>来保持那些真实需要但又被删除的资源，使用<code>tools:discard</code>来明确删除更多的资源</p>
<h5 id="2-tools-keep"><a href="#2-tools-keep" class="headerlink" title="2. tools:keep"></a>2. tools:keep</h5><p>这个属性允许你指定那些运行时间接引用的资源。例如动态生成的资源名称传递给<code>Resources.getIdentifier()</code></p>
<p>可以创建一个XML文件，如<code>res/raw/keep.xml</code>，以<code>&lt;resources&gt;</code>为根标签</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:keep</span>=<span class="string">"@layout/used_1,@layout/used_2,@layout/*_3"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="3-tools-discard"><a href="#3-tools-discard" class="headerlink" title="3. tools:discard"></a>3. tools:discard</h5><p>这个属性允许你手动指定需要被删除的资源。(一般因为资源被引用但是没有作用于app，或者因为Gradle插件的误报这个资源被引用)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:discard</span>=<span class="string">"@layout/unused_1"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="五、错误处理相关属性"><a href="#五、错误处理相关属性" class="headerlink" title="五、错误处理相关属性"></a>五、错误处理相关属性</h4><p>以下属性用于过滤<code>Lint</code>警告消息</p>
<h5 id="1-tools-ignore"><a href="#1-tools-ignore" class="headerlink" title="1. tools:ignore"></a>1. tools:ignore</h5><p>该属性可以作用于任何元素，接受逗号分隔的lint Issue列表。</p>
<p>示例：如果对文本进行硬编码时，XML代码将会变黄；添加<code>tools:ignore=&quot;HardcodedText&quot;</code>即可让lint忽略警告</p>
<p><img src="/2018/06/09/android-tools-attributes-use/tools_ignore.png" alt="tools_ignore"></p>
<h5 id="2-tools-targetApi"><a href="#2-tools-targetApi" class="headerlink" title="2. tools:targetApi"></a>2. tools:targetApi</h5><p>指明某个控件只在指定的API 及更高的版本中生效。这样，在使用 Lint 检测时就不会因 minSdkVersion 低于控件出现的版本而报错。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">GridLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:targetApi</span>=<span class="string">"14"</span> &gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="3-tools-locale"><a href="#3-tools-locale" class="headerlink" title="3. tools:locale"></a>3. tools:locale</h5><p>指明 resources 中元素的语言类型，避免拼写检查或者Lint 检查时报错。</p>
<p>例如，可以添加到<code>values/strings.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:locale</span>=<span class="string">"es"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ol>
<li><a href="https://developer.android.com/studio/write/tool-attributes" target="_blank" rel="noopener">Tools attributes reference</a></li>
<li><a href="https://www.jianshu.com/p/2912bcba4465" target="_blank" rel="noopener">Android:Tools命名空间原来是有大用处的</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中一个很有用的属性——clipChildren]]></title>
      <url>https://xch168.github.io/2018/05/28/clip-children/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p><code>android:clipChildren</code>：字面意思是裁剪子视图。用来定义一个子视图的绘制是否可以超出边界。默认值为true，表示不超出边界，设置为false时，表示允许子视图超出边界。</p>
</blockquote>
<a id="more"></a>
<h3 id="一布局三张图了解clipChildren的使用"><a href="#一布局三张图了解clipChildren的使用" class="headerlink" title="一布局三张图了解clipChildren的使用"></a>一布局三张图了解clipChildren的使用</h3><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:clipChildren</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#FDB300"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"68dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="图一：根布局属性android-clipChildren-quot-false-quot-中间ImageView的属性为android-layout-gravity-quot-bottom-quot"><a href="#图一：根布局属性android-clipChildren-quot-false-quot-中间ImageView的属性为android-layout-gravity-quot-bottom-quot" class="headerlink" title="图一：根布局属性android:clipChildren=&quot;false&quot;, 中间ImageView的属性为android:layout_gravity=&quot;bottom&quot;"></a>图一：根布局属性<code>android:clipChildren=&quot;false&quot;</code>, 中间ImageView的属性为<code>android:layout_gravity=&quot;bottom&quot;</code></h4><p><img src="/2018/05/28/clip-children/p1.png" alt="p1"></p>
<h4 id="图二：将根布局属性android-clipChildren-quot-false-quot-去掉"><a href="#图二：将根布局属性android-clipChildren-quot-false-quot-去掉" class="headerlink" title="图二：将根布局属性android:clipChildren=&quot;false&quot;去掉"></a>图二：将根布局属性<code>android:clipChildren=&quot;false&quot;</code>去掉</h4><p><img src="/2018/05/28/clip-children/p2.png" alt="p2"></p>
<h4 id="图三：将第三个ImageView的属性android-layout-gravity-quot-bottom-quot"><a href="#图三：将第三个ImageView的属性android-layout-gravity-quot-bottom-quot" class="headerlink" title="图三：将第三个ImageView的属性android:layout_gravity=&quot;bottom&quot;"></a>图三：将第三个ImageView的属性<code>android:layout_gravity=&quot;bottom&quot;</code></h4><p><img src="/2018/05/28/clip-children/p3.png" alt="p3"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、<code>android:clipChildren</code>必须设置在根布局</p>
<p>2、中间ImageView设置属性<code>android:layout_gravity=bottom</code>，是从底部向上绘制该子View。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android反编译：Apktool、dex2jar、JD-GUI的使用]]></title>
      <url>https://xch168.github.io/2018/05/20/apktool-dex2jar-jd/</url>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>如果看到某款应用的功能很好奇，而对于其实现方式一头雾水。那么就可以对其进行反编译，来获取其中的实现方式。</p>
<p><code>Apktool</code>: </p>
<ol>
<li>可以用来将资源恢复到原来的形式，包括<code>resources.arc</code> 、<code>classes.dex</code>、<code>9.png</code> 和<code>XML文件</code></li>
<li>可以将反编译后的资源文件重新打包成二进制的APK/JAR文件</li>
</ol>
<p><code>dex2jar</code>: 用来将<code>classes.dex</code>转为jar文件</p>
<p><code>JD-GUI</code>: 用来将查看jar文件，机制是将jar中的.class文件转为.java文件<br><a id="more"></a></p>
<h3 id="二、准备工作-Mac版"><a href="#二、准备工作-Mac版" class="headerlink" title="二、准备工作(Mac版)"></a>二、准备工作(Mac版)</h3><ul>
<li><p>ApkTool：</p>
<ul>
<li><p>下载地址：<a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener">ApkTool运行脚本</a>、<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="noopener">ApkTool运行库</a></p>
</li>
<li><p>安装： </p>
</li>
</ul>
<ol>
<li><p>将<code>apktool_x.x.x.jar</code>命名为<code>apktool.jar</code></p>
</li>
<li><p>将<code>apktool</code>脚本、<code>apktool.jar</code>文件移动到<code>/usr/local/bin</code>目录下</p>
</li>
<li><p>为上述两个文件增加可执行权限，命令如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x apktool</span><br><span class="line">chmod +x apktool.jar</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>dex2jar:</p>
<ul>
<li><p>下载地址：<a href="https://sourceforge.net/projects/dex2jar/files/" target="_blank" rel="noopener">dex2jar</a></p>
</li>
<li><p>安装：</p>
</li>
</ul>
<ol>
<li><p>将下载好的dex2jar压缩包解压，将<code>d2j-dex2jar.sh</code>重命名为<code>dex2jar.sh</code>(这个命令最常用，名称短一点好)</p>
</li>
<li><p>将解压后的文件夹复制到<code>/usr/local/bin</code>目录下</p>
</li>
<li><p>为<code>d2j_invoke.sh</code>增加可执行权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x d2j_invoke.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量(因为dex2jar可执行文件下<code>/usr/local/bin</code>的子目录下，所有要配置环境变量)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开.bash_profile文件，并添加如下配置：</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin/dex2jar</span><br><span class="line"><span class="comment"># 2. 执行命令：source ~/.bash_profile，让配置立即生效</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>JD-GUI:</p>
<ol>
<li>下载地址：<a href="http://jd.benow.ca/" target="_blank" rel="noopener">JD-GUI</a></li>
<li>安装：解压后，将<code>JD-GUI.app</code>复制到<code>Applications</code>文件夹，然后点击即可使用</li>
</ol>
</li>
</ul>
<h3 id="三、使用Apktool反编译apk获取资源文件"><a href="#三、使用Apktool反编译apk获取资源文件" class="headerlink" title="三、使用Apktool反编译apk获取资源文件"></a>三、使用Apktool反编译apk获取资源文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在终端执行如下命令，就会在apk文件目录下创建一个和apk同名的文件夹，该文件夹中放的是反编译的资源文件</span></span><br><span class="line">apktool d /xxx/xxx/xxx.apk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将反编译后的文件重新打包</span></span><br><span class="line">apktool b /xx/xx/xxx</span><br></pre></td></tr></table></figure>
<h3 id="四、使用dex2jar将dex反编译成jar"><a href="#四、使用dex2jar将dex反编译成jar" class="headerlink" title="四、使用dex2jar将dex反编译成jar"></a>四、使用dex2jar将dex反编译成jar</h3><ol>
<li><p>使用解压软件将apk文件解压</p>
</li>
<li><p>在终端执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd 到apk解压的目录，然后执行命令(apk解压目录中可能有多个.dex文件，要分别反编译)，</span></span><br><span class="line">dex2jar classes.dex</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="五、JD-GUI的使用"><a href="#五、JD-GUI的使用" class="headerlink" title="五、JD-GUI的使用"></a>五、JD-GUI的使用</h3><p>​    直接打开<code>JD-GUI.app</code>，然后将通过<code>dex2jar</code>反编译后的<code>.jar</code>文件拖动到<code>JD-GUI</code>就可以查看到反编译后的java代码了。(反编译后会出现abc这样的类和包名，是因为作者对代码进行了混淆，这样反编译后代码的可读性变差)</p>
<p><img src="/2018/05/20/apktool-dex2jar-jd/decompile.png" alt="decompile"></p>
<h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>使用这些工具是为了让我们更好的学习代码，写出更好的代码。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
            <tag> Decompile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android代码混淆——Proguard]]></title>
      <url>https://xch168.github.io/2018/05/13/android-garble-proguard/</url>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><blockquote>
<p>ProGuard 会检测和移除封装应用中未使用的类、字段、方法和属性，包括自带代码库中的未使用项（这使其成为以变通方式解决64k 引用限制的有用工具）。ProGuard 还可优化字节码，移除未使用的代码指令，以及用短名称混淆其余的类、字段和方法。混淆过的代码可令您的 APK 难以被逆向工程，这在应用使用许可验证等安全敏感性功能时特别有用。<br><a id="more"></a></p>
</blockquote>
<h3 id="二、开启混淆"><a href="#二、开启混淆" class="headerlink" title="二、开启混淆"></a>二、开启混淆</h3><p>在module的<code>build.gradle</code>文件中添加<code>minifyEnabled true</code>。由于代码混淆会导致构建速度变慢，所有不要在调试的构建中使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled true</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>proguard-android.txt</code> :是系统默认的混淆规则配置文件，位置在 <code>&lt;Android SDK目录&gt;/tools/proguard</code>文件夹下。如果想进一步的压缩代码，可以使用位于相同目录下的<code>proguard-android-optimize.txt</code>文件，它还包含其他在字节码一级（方法内和方法间）执行分析的优化，以进一步减小APK大小和帮助提供运行速度。</li>
<li><code>prguard-rules.pro</code>在每个module中都有一个该文件，用于自定义对应module的ProGuard规则。</li>
</ul>
<h3 id="三、混淆规则"><a href="#三、混淆规则" class="headerlink" title="三、混淆规则"></a>三、混淆规则</h3><p>从系统的<code>proguard-android.txt</code>文件来学习混淆规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"># This file is no longer maintained and is not used by new (2.2+) versions of the</span><br><span class="line"># Android plugin for Gradle. Instead, the Android plugin for Gradle generates the</span><br><span class="line"># default rules at build time and stores them in the build directory.</span><br><span class="line"># SDK中的该文件已经不再维护，从Gradle2.2+版本后，gradle插件会自动生成这个默认配置文件，位置位于&lt;项目根目录&gt;/build/intermediates/proguard-files</span><br><span class="line"></span><br><span class="line"># 混淆时不使用大小写混合，混淆后的类名为小写</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"></span><br><span class="line"># 不跳过非公共的库的类</span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line"></span><br><span class="line"># 混淆后生成映射文件，map 类名-&gt;转化后类名的映射</span><br><span class="line">-verbose</span><br><span class="line"></span><br><span class="line"># Optimization is turned off by default. Dex does not like code run</span><br><span class="line"># through the ProGuard optimize and preverify steps (and performs some</span><br><span class="line"># of these optimizations on its own).</span><br><span class="line"># 优化默认关闭，Dex不喜欢通过ProGuard的优化和预处理操作</span><br><span class="line">-dontoptimize</span><br><span class="line">-dontpreverify</span><br><span class="line"></span><br><span class="line"># Note that if you want to enable optimization, you cannot just</span><br><span class="line"># include optimization flags in your own project configuration file;</span><br><span class="line"># instead you will need to point to the</span><br><span class="line"># &quot;proguard-android-optimize.txt&quot; file instead of this one from your</span><br><span class="line"># project.properties file.</span><br><span class="line"></span><br><span class="line"># 保护代码中的Annotation不被混淆，这在JSON实体映射非常重要，如GSON</span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keep public class com.google.vending.licensing.ILicensingService</span><br><span class="line">-keep public class com.android.vending.licensing.ILicensingService</span><br><span class="line"></span><br><span class="line"># For native methods, see http://proguard.sourceforge.net/manual/examples.html#native</span><br><span class="line"># 保留所有的地方native方法不被混淆</span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># keep setters in Views so that animations can still work.</span><br><span class="line"># see http://proguard.sourceforge.net/manual/examples.html#beans</span><br><span class="line"># 不混淆View中的setXxx()和getXxx()方法，以保证熟悉动画能正常工作</span><br><span class="line">-keepclassmembers public class * extends android.view.View &#123;</span><br><span class="line">   void set*(***);</span><br><span class="line">   *** get*();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># We want to keep methods in Activity that could be used in the XML attribute onClick</span><br><span class="line"># 不混淆Activity中参数是View的方法，保证xml绑定的点击事件可以正常工作</span><br><span class="line">-keepclassmembers class * extends android.app.Activity &#123;</span><br><span class="line">   public void *(android.view.View);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># For enumeration classes, see http://proguard.sourceforge.net/manual/examples.html#enumerations</span><br><span class="line"># 不混淆枚举类中的value()和valueOf()方法</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆Parcelable实现类中的CREATOR字段，以保证Parcelable机制正常工作</span><br><span class="line">-keepclassmembers class * implements android.os.Parcelable &#123;</span><br><span class="line">  public static final android.os.Parcelable$Creator CREATOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆R文件中的所有静态字段，以保证正确找到每个资源id</span><br><span class="line">-keepclassmembers class **.R$* &#123;</span><br><span class="line">    public static &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># The support library contains references to newer platform versions.</span><br><span class="line"># Don&apos;t warn about those in case this app is linking against an older</span><br><span class="line"># platform version.  We know about them, and they are safe.</span><br><span class="line"># 不对android.support包下的代码警告。(如果打包的版本低于support包下某些类的使用版本，会出现警告)</span><br><span class="line">-dontwarn android.support.**</span><br><span class="line"></span><br><span class="line"># Understand the @Keep support annotation.</span><br><span class="line"># 不混淆Keep类</span><br><span class="line">-keep class android.support.annotation.Keep</span><br><span class="line"></span><br><span class="line"># 不混淆使用了注解的类和类成员</span><br><span class="line">-keep @android.support.annotation.Keep class * &#123;*;&#125;</span><br><span class="line"></span><br><span class="line"># 如果类中有使用了注解的方法，则不混淆类和类成员</span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 如果类中有使用了注解的字段，则不混淆类和类成员</span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 如果类中有使用了注解的构造函数，则不混淆类和类成员</span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;init&gt;(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="keep类关键字"><a href="#keep类关键字" class="headerlink" title="keep类关键字"></a>keep类关键字</h4><table>
<thead>
<tr>
<th>关键字</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>keep</td>
<td>保留类和类成员，防止被混淆或移除</td>
</tr>
<tr>
<td>keepnames</td>
<td>保留类和类成员，防止被混淆，但是没被引用的类成员会被移除</td>
</tr>
<tr>
<td>keepclassmembers</td>
<td>只保留类成员，防止被混淆或移除</td>
</tr>
<tr>
<td>keepclassmembersnames</td>
<td>只保留类成员，防止被混淆，但没被引用的类成员会被移除</td>
</tr>
<tr>
<td>keepclasseswithmembers</td>
<td>保留类和类成员，防止被混淆或移除，如果指定的类成员不存在还是会被混淆</td>
</tr>
<tr>
<td>keepclasseswithmembernames</td>
<td>保留类和类成员，防止被混淆，如果指定的类成员不存在还是会被混淆，没有被引用的类成员会被移除</td>
</tr>
</tbody>
</table>
<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><table>
<thead>
<tr>
<th>通配符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>匹配任意长度字符，但不包含分隔符 “.”。例如一个类com.github.xch168.User，使用com.github.xch168.<em> 是可以匹配，但是com.github.</em> 不能匹配</td>
</tr>
<tr>
<td>**</td>
<td>匹配任意长度字符，包括分隔符”.”。如使用com.github.**,匹配包下的所有内容，可以匹配到com.github.xch168.User。</td>
</tr>
<tr>
<td>***</td>
<td>匹配任意参数类型。例如<code>*** getName(***)</code> 可匹配String getName(String)</td>
</tr>
<tr>
<td>…</td>
<td>匹配任意长度的任意类型参数。例如void setName(…) 可以匹配void setName(String firstName, String secondName)</td>
</tr>
<tr>
<td><code>&lt;fileds&gt;</code></td>
<td>匹配类、接口中所有字段</td>
</tr>
<tr>
<td><code>&lt;methods&gt;</code></td>
<td>匹配类、接口中所有方法</td>
</tr>
<tr>
<td><code>&lt;init&gt;</code></td>
<td>匹配类中所有构造函数</td>
</tr>
</tbody>
</table>
<h3 id="四、配置自己的混淆"><a href="#四、配置自己的混淆" class="headerlink" title="四、配置自己的混淆"></a>四、配置自己的混淆</h3><ul>
<li>WebView中使用JS调用，需要添加如下配置：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;</span><br><span class="line">   public *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不混淆某个特定的类和类中的所有成员</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep class com.github.xch168.utils.CommonUtil &#123; *; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不混淆膜拜目录下的文件，例如使用Gson时，数据bean不能被混淆，需要添加如下配置：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep class com.github.xch168.model.** &#123; *; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>保留泛型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes Signature</span><br></pre></td></tr></table></figure>
<ul>
<li>保留用于调试堆栈跟中的行号信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes SourceFile,LineNumberTable</span><br></pre></td></tr></table></figure>
<ul>
<li>如果使用了上一行配置，还需要添加如下配置将源文件重命名为SourceFile，以便通过鼠标点击直达源文件：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-renamesourcefileattribute SourceFile</span><br></pre></td></tr></table></figure>
<ul>
<li>第三方库混淆案例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Retrofit</span><br><span class="line"># Retain generic type information for use by reflection by converters and adapters.</span><br><span class="line">-keepattributes Signature</span><br><span class="line"># Retain service method parameters.</span><br><span class="line">-keepclassmembernames,allowobfuscation interface * &#123;</span><br><span class="line">    @retrofit2.http.* &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"># Ignore annotation used for build tooling.</span><br><span class="line">-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement</span><br><span class="line"></span><br><span class="line"># Okhttp</span><br><span class="line">-dontwarn okhttp3.**</span><br><span class="line">-dontwarn okio.**</span><br><span class="line">-dontwarn javax.annotation.**</span><br><span class="line">-dontwarn org.conscrypt.**</span><br><span class="line"># A resource is loaded with a relative path so the package of this class must be preserved.</span><br><span class="line">-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase</span><br></pre></td></tr></table></figure>
<h3 id="五、查看混淆结果"><a href="#五、查看混淆结果" class="headerlink" title="五、查看混淆结果"></a>五、查看混淆结果</h3><p>混淆打包后就会在<code>&lt;module目录&gt;/build/outputs/mapping/release</code>目录生成混淆的相关文件。</p>
<ul>
<li><p><code>dump.txt</code></p>
<p>说明 APK 中所有类文件的内部结构。</p>
</li>
<li><p><code>mapping.txt</code></p>
<p>提供原始与混淆过的类、方法和字段名称之间的转换。</p>
</li>
<li><p><code>seeds.txt</code></p>
<p>列出未进行混淆的类和成员。</p>
</li>
<li><p><code>usage.txt</code></p>
<p>列出从 APK 移除的代码。</p>
</li>
</ul>
<p>混淆后可以用Android Studio的<code>Analyze APK</code>工具对混淆后的apk包进行分析。</p>
<p><img src="/2018/05/13/android-garble-proguard/apkanalyze.png" alt="apkanalyze"></p>
<h3 id="六、追溯Crash堆栈信息"><a href="#六、追溯Crash堆栈信息" class="headerlink" title="六、追溯Crash堆栈信息"></a>六、追溯Crash堆栈信息</h3><p>混淆后的代码运行出错的堆栈信息如下，看不到具体的类名</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java<span class="variable">.lang</span><span class="variable">.NullPointerException</span>: Attempt to invoke <span class="keyword">virtual</span> method '<span class="keyword">void</span> android<span class="variable">.widget</span><span class="variable">.TextView</span><span class="variable">.setOnClickListener</span>(android<span class="variable">.view</span><span class="variable">.View</span>$OnClickListener)' on a <span class="literal">null</span> object reference</span><br><span class="line">        at com<span class="variable">.github</span><span class="variable">.xch168</span><span class="variable">.testas32</span><span class="variable">.MainActivity</span><span class="variable">.k</span>(Unknown Source:<span class="number">7</span>)</span><br><span class="line">        at com<span class="variable">.github</span><span class="variable">.xch168</span><span class="variable">.testas32</span><span class="variable">.MainActivity</span><span class="variable">.onCreate</span>(Unknown Source:<span class="number">9</span>)</span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.Activity</span><span class="variable">.performCreate</span>(Activity<span class="variable">.java</span>:<span class="number">7130</span>)</span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.Activity</span><span class="variable">.performCreate</span>(Activity<span class="variable">.java</span>:<span class="number">7121</span>)</span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.Instrumentation</span><span class="variable">.callActivityOnCreate</span>(Instrumentation<span class="variable">.java</span>:<span class="number">1262</span>)</span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.ActivityThread</span><span class="variable">.performLaunchActivity</span>(ActivityThread<span class="variable">.java</span>:<span class="number">2905</span>)</span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.ActivityThread</span><span class="variable">.handleLaunchActivity</span>(ActivityThread<span class="variable">.java</span>:<span class="number">3060</span>) </span><br><span class="line">        at android<span class="variable">.app</span><span class="variable">.servertransaction</span><span class="variable">.LaunchActivityItem</span><span class="variable">.execute</span>(LaunchActivityItem<span class="variable">.java</span>:<span class="number">78</span>)</span><br></pre></td></tr></table></figure>
<p>为了解决这个问题，可以使用<code>&lt;SDK目录&gt;\tools\proguard\bin</code>下的<strong>proguardgui.bat</strong>脚本将Crash堆栈信息还原到混淆前的状态。步骤如下：</p>
<ol>
<li>运行<code>proguardgui.bat</code>脚本，然后点击<code>ReTrace</code></li>
<li>选择<code>mapping.txt</code>文件，位于<code>&lt;module目录&gt;/build/outputs/mapping/release</code></li>
<li>拷贝混淆后出错的堆栈信息</li>
<li>点击右下角的ReTrace!按钮，完成Crash堆栈信息的追溯</li>
</ol>
<p><img src="/2018/05/13/android-garble-proguard/retrace.png" alt="retrace"></p>
<h3 id="七、压缩资源"><a href="#七、压缩资源" class="headerlink" title="七、压缩资源"></a>七、压缩资源</h3><blockquote>
<p>资源压缩只与代码压缩协同工作。代码压缩器移除所有未使用的代码后，资源压缩器便可确定应用仍然使用的资源。这在您添加包含资源的代码库时体现得尤为明显 - 您必须移除未使用的库代码，使库资源变为未引用资源，才能通过资源压缩器将它们移除。</p>
</blockquote>
<p>开启资源压缩：</p>
<p>在 <code>build.gradle</code> 文件中将 <code>shrinkResources</code> 属性设置为 <code>true</code>（在用于代码压缩的 <code>minifyEnabled</code> 旁边）</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            shrinkResources <span class="literal">true</span></span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>),</span><br><span class="line">                    <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="八、自定义要保留的资源"><a href="#八、自定义要保留的资源" class="headerlink" title="八、自定义要保留的资源"></a>八、自定义要保留的资源</h3><blockquote>
<p>如果您有想要保留或舍弃的特定资源，请在您的项目中创建一个包含 <code>&lt;resources&gt;</code> 标记的 XML 文件，并在 <code>tools:keep</code> 属性中指定每个要保留的资源，在 <code>tools:discard</code> 属性中指定每个要舍弃的资源。这两个属性都接受逗号分隔的资源名称列表。您可以使用星号字符作为通配符。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:keep</span>=<span class="string">"@layout/l_used*_c,@layout/l_used_a,@layout/l_used_b*"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:discard</span>=<span class="string">"@layout/unused2"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>将该文件保存在项目资源中，例如，保存在 <code>res/raw/keep.xml</code>。构建不会将该文件打包到 APK 之中。</p>
<h3 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h3><p>混淆后可以减小APK的大小，可以提高被反编译的难度，但是混淆后需要进行系统全面的测试。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/studio/build/shrink-code?hl=zh-cn" target="_blank" rel="noopener">压缩代码和资源</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650824879&amp;idx=1&amp;sn=f7d6830cb10046ff61bb461a15353e34&amp;chksm=80b7b431b7c03d271d1d836b586a29f813d738d9b7774075f8b50e7ab0215052c3e075ab71c4&amp;scene=38#wechat_redirect" target="_blank" rel="noopener">Android 混淆查缺补漏</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用UI Automator实现Android UI的自动化测试]]></title>
      <url>https://xch168.github.io/2018/05/06/uiautomator-use/</url>
      <content type="html"><![CDATA[<h3 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h3><p>UI Automator测试框架提供了一组API来构建UI测试，用于在用户应用和系统应用中执行交互。UI Automator测试框架非常适合编写黑盒自动化测试，其中的测试代码不依赖于目标应用的内部实现详情。</p>
<a id="more"></a>
<h3 id="0x02-使用uiautomatorviewer工具获取Android应用的控件信息"><a href="#0x02-使用uiautomatorviewer工具获取Android应用的控件信息" class="headerlink" title="0x02 使用uiautomatorviewer工具获取Android应用的控件信息"></a>0x02 使用uiautomatorviewer工具获取Android应用的控件信息</h3><blockquote>
<p><code>uiautomatorviewer</code> 工具提供了方便的GUI，可以扫描和分析Android设备上当前显示的UI组件。您可以使用此工具检查布局层次结构，并查看在设备前台显示的UI组件属性。利用此信息，可以使用UI Automator创建控制更加精确的测试。</p>
</blockquote>
<p><code>uiautomatorviewer</code> 工具位于<code>&lt;android-sdk&gt;/tools/</code>目录中。</p>
<p><img src="/2018/05/06/uiautomator-use/uiautomatorviewer.png" alt="uiautomatorviewer"></p>
<h3 id="0x03-在Android项目中添加依赖"><a href="#0x03-在Android项目中添加依赖" class="headerlink" title="0x03 在Android项目中添加依赖"></a>0x03 在Android项目中添加依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">androidTestImplementation <span class="string">'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'</span></span><br></pre></td></tr></table></figure>
<h3 id="0x04-创建单元测试类"><a href="#0x04-创建单元测试类" class="headerlink" title="0x04 创建单元测试类"></a>0x04 创建单元测试类</h3><p><img src="/2018/05/06/uiautomator-use/UiTest.png" alt="UiTest"></p>
<h3 id="0x05-创建测试用例"><a href="#0x05-创建测试用例" class="headerlink" title="0x05 创建测试用例"></a>0x05 创建测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用JUnit4运行器</span></span><br><span class="line"><span class="meta">@RunWith</span>(AndroidJUnit4.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instrumentation可以在主程序启动之前，创建模拟的Context；发送UI事件给应用程序；</span></span><br><span class="line">    <span class="comment">// 检查程序当前运行状态；控制Android如何加载应用程序，控制应用程序和控件的生命周期;</span></span><br><span class="line">    <span class="comment">// 可以直接调用控件的方法，对控件的属性进行查看和修改</span></span><br><span class="line">    <span class="keyword">private</span> Instrumentation mInstrumentation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代表着Android设备</span></span><br><span class="line">    <span class="keyword">private</span> UiDevice mUiDevice;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试用例执行前，用于一些处理一些初始化工作</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mInstrumentation = InstrumentationRegistry.getInstrumentation();</span><br><span class="line">        mUiDevice = UiDevice.getInstance(mInstrumentation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个测试用例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取屏幕上计算器的数字"9"的控件，"com.android.calculator2:id/digit_9"为通过uiautomatoviewer工具获取的控件id</span></span><br><span class="line">        UiObject2 digit9 = mUiDevice.findObject(By.res(<span class="string">"com.android.calculator2:id/digit_9"</span>));</span><br><span class="line">        <span class="comment">// 获取屏幕上计算器的数字"8"的控件</span></span><br><span class="line">        UiObject2 digit8 = mUiDevice.findObject(By.res(<span class="string">"com.android.calculator2:id/digit_8"</span>));</span><br><span class="line">        <span class="comment">// 获取屏幕上计算器的"*"控件</span></span><br><span class="line">        UiObject2 opMul = mUiDevice.findObject(By.res(<span class="string">"com.android.calculator2:id/op_mul"</span>));</span><br><span class="line">        <span class="comment">// 获取屏幕上计算器的"="的控件</span></span><br><span class="line">        UiObject2 opEq = mUiDevice.findObject(By.res(<span class="string">"com.android.calculator2:id/eq"</span>));</span><br><span class="line">        <span class="comment">// 获取屏幕上计算器的结果显示控件</span></span><br><span class="line">        UiObject2 result = mUiDevice.findObject(By.res(<span class="string">"com.android.calculator2:id/result"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动依序执行：</span></span><br><span class="line">        <span class="comment">// 1.点击计算器"9"控件</span></span><br><span class="line">        <span class="comment">// 2.点击计算器"*"控件</span></span><br><span class="line">        <span class="comment">// 3.点击计算器"8"控件</span></span><br><span class="line">        <span class="comment">// 4.点击计算器"="控件</span></span><br><span class="line">        digit9.click();</span><br><span class="line">        opMul.click();</span><br><span class="line">        digit8.click();</span><br><span class="line">        opEq.click();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取计算结果控件的值</span></span><br><span class="line">        String resultValue = result.getText();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行断言判断，判断结果是否和预期一致</span></span><br><span class="line">        Assert.assertEquals(<span class="number">72</span>, Integer.parseInt(resultValue));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试用例执行完后执行</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2018/05/06/uiautomator-use/digit9.jpg" alt="digit9"></p>
<h3 id="0x06-执行测试用例"><a href="#0x06-执行测试用例" class="headerlink" title="0x06 执行测试用例"></a>0x06 执行测试用例</h3><p><img src="/2018/05/06/uiautomator-use/result.gif" alt="result"></p>
<h3 id="0x07-相关API介绍"><a href="#0x07-相关API介绍" class="headerlink" title="0x07 相关API介绍"></a>0x07 相关API介绍</h3><p>常见组件操作，类-UiObject2</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>点击</td>
<td>public boolean click()</td>
</tr>
<tr>
<td>长按</td>
<td>public boolean longClick()</td>
</tr>
<tr>
<td>拖动</td>
<td>public void drag(Point dest)</td>
</tr>
<tr>
<td>输入</td>
<td>public boolean setText(String text)</td>
</tr>
</tbody>
</table>
<p>常见设备操作，类-UiDevice</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>点击坐标</td>
<td>public void click(int x, int y)</td>
</tr>
<tr>
<td>按键</td>
<td>public void pressKeyCode(int keyCode)</td>
</tr>
<tr>
<td>滑动</td>
<td>public boolean swipe(int startX, int startY,int endX,int endY,int steps)// 1个步长表示5ms</td>
</tr>
</tbody>
</table>
<h3 id="0x08-其他用途"><a href="#0x08-其他用途" class="headerlink" title="0x08 其他用途"></a>0x08 其他用途</h3><p>自动化是用于解放双手，将机械化的重复操作交由程序。UIAutomator可以用于进行重复的UI测试，也可以用于完成其他的类似转发链接给通讯录里的所有好友。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://developer.android.com/topic/libraries/testing-support-library/#UIAutomator" target="_blank" rel="noopener">测试支持库</a></li>
<li><a href="https://blog.csdn.net/yiwachen/article/details/52464635" target="_blank" rel="noopener">Android白盒测试之Instrumentation初探（一）</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[adb常用命令]]></title>
      <url>https://xch168.github.io/2018/01/21/adb-commands/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>adb(Android Debug Bridge)Android调试桥，是一个通用命令行工具，其允许您与模拟器实例或连接的Android设备进行通信。</p>
</blockquote>
<a id="more"></a>
<h3 id="启动adb服务"><a href="#启动adb服务" class="headerlink" title="启动adb服务"></a>启动adb服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure>
<h3 id="停止adb服务"><a href="#停止adb服务" class="headerlink" title="停止adb服务"></a>停止adb服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>
<h3 id="查询连接的设备"><a href="#查询连接的设备" class="headerlink" title="查询连接的设备"></a>查询连接的设备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<h3 id="安装APK"><a href="#安装APK" class="headerlink" title="安装APK"></a>安装APK</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install &lt;path_to_apk&gt;</span><br></pre></td></tr></table></figure>
<h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall &lt;packageName&gt;</span><br></pre></td></tr></table></figure>
<h3 id="指定执行命令的目标设备"><a href="#指定执行命令的目标设备" class="headerlink" title="指定执行命令的目标设备"></a>指定执行命令的目标设备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s &lt;serialNumber&gt; &lt;command&gt;</span><br></pre></td></tr></table></figure>
<h3 id="从电脑拷贝文件到设备"><a href="#从电脑拷贝文件到设备" class="headerlink" title="从电脑拷贝文件到设备"></a>从电脑拷贝文件到设备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push &lt;电脑文件路径&gt; &lt;手机中的指定路径&gt;</span><br></pre></td></tr></table></figure>
<h3 id="从设备拷贝文件到电脑"><a href="#从设备拷贝文件到电脑" class="headerlink" title="从设备拷贝文件到电脑"></a>从设备拷贝文件到电脑</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &lt;手机中文件的路径&gt; &lt;电脑中文件的存放位置&gt;</span><br></pre></td></tr></table></figure>
<h3 id="查看当前界面显示的Activity的名字"><a href="#查看当前界面显示的Activity的名字" class="headerlink" title="查看当前界面显示的Activity的名字"></a>查看当前界面显示的Activity的名字</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Windows</span><br><span class="line">adb shell dumpsys activity|findstr "mFocusedActivity"</span><br><span class="line">// Mac OS</span><br><span class="line">adb shell dumpsys activity|grep "mFocusedActivity"</span><br></pre></td></tr></table></figure>
<h3 id="清除应用数据与缓存"><a href="#清除应用数据与缓存" class="headerlink" title="清除应用数据与缓存"></a>清除应用数据与缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear &lt;packageName&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、<a href="https://developer.android.google.cn/studio/command-line/adb.html?hl=zh-cn" target="_blank" rel="noopener">Android Debug Bridge (adb)</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高级Android开发工程师必备技能]]></title>
      <url>https://xch168.github.io/2018/01/08/skill-for-advanced-android-development-engineers/</url>
      <content type="html"><![CDATA[<p>1、精通Java、Kotlin，熟悉Java虚拟机工作原理；</p>
<p>2、熟悉面向对象设计和分析，能够运用常用的设计模式；</p>
<a id="more"></a>
<p>3、扎实的数据结构、算法基础；</p>
<p>4、熟悉网络编程、多线程，熟悉TCP/IP、HTTP/HTTPS等协议；</p>
<p>5、熟练使用Android SDK，深入理解Android系统原理和Framework层原理；</p>
<p>6、对Android系统应用管理、进程管理、内存管理机制有深入理解；</p>
<p>7、精通Android上开发、调试、编译、打包等流程；</p>
<p>8、了解ANR、OOM的触发场景及规避方法；</p>
<p>9、熟悉移动APP内存优化、性能优化、电量等的调优，并熟练使用相应的工具进行问题排查（TraceView、MAT、SystemTrace、等）</p>
<p>10、熟悉开源框架（网络引擎、图片缓存框架等）的使用，熟悉开源框架原理及源码；</p>
<p>11、有足够的软件安全意识，掌握数据加密、代码混淆、防破解、性能优化等技术；</p>
<p>12、关注新技术方向，对APP架构设计模式有自己理解，能够实现性能优良、可复用的组件；</p>
<p>13、熟悉JNI/NDK开发</p>
<p>14、有在开源社区如GitHub或Google Code上做过贡献，或者在Stack Overflow上做过Android相关回答</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用bintray-release快速发布库到JCenter]]></title>
      <url>https://xch168.github.io/2017/07/23/use-bintray-release-publish-lib-to-jcenter/</url>
      <content type="html"><![CDATA[<ol>
<li><p>前往<a href="https://bintray.com/" target="_blank" rel="noopener">https://bintray.com/</a> 注册账号</p>
</li>
<li><p>在bintray中创建一个maven仓库</p>
<a id="more"></a>
<p><img src="/2017/07/23/use-bintray-release-publish-lib-to-jcenter/create_maven_repository.png" alt="create_maven_repository"></p>
</li>
<li><p>在Android项目中的根build.gradle中，添加如下代码：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    classpath <span class="string">'com.novoda:bintray-release:0.5.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在local.properties文件中添加bintray的用户名和API key</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bintray.user=xxxxx</span><br><span class="line">bintray.key=xxxxxxxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录下创建secret.gradle用于读取local.properties中配置的用户名和API KEy</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载资源</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties()</span><br><span class="line">InputStream inputStream = project.rootProject.file(<span class="string">'local.properties'</span>).newDataInputStream()</span><br><span class="line">properties.load( inputStream )</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取字段</span></span><br><span class="line">ext.bintray_key = properties.getProperty(<span class="string">'bintray.key'</span>)</span><br><span class="line">ext.bintray_user = properties.getProperty(<span class="string">'bintray.user'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在library所在的module中的build.gradle中，添加bintray-release插件的应用和secret.gradle的配置；</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.novoda.bintray-release'</span></span><br><span class="line">apply <span class="string">from:</span> rootProject.file(<span class="string">"secret.gradle"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在library所在的module中的build.gradle中，添加发布到JCenter的参数配置；</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">publish &#123;</span><br><span class="line">    userOrg = <span class="string">'xch168'</span>            <span class="comment">// bintray.com用户名</span></span><br><span class="line">    groupId = <span class="string">'com.github.xch168'</span> <span class="comment">// jcenter上的路径</span></span><br><span class="line">    artifactId = <span class="string">'androidUtil'</span>    <span class="comment">// 项目名称</span></span><br><span class="line">    publishVersion = <span class="string">'0.0.5'</span>      <span class="comment">// 版本号</span></span><br><span class="line">    desc = <span class="string">'Oh hi, this is a nice description for a project, right?'</span> <span class="comment">// 描述，不重要</span></span><br><span class="line">    website = <span class="string">'https://github.com/xch168/AndroidUtil'</span>                <span class="comment">// 网站，不重要；可以填写GitHub中的项目地址</span></span><br><span class="line"></span><br><span class="line">    bintrayUser = bintray_user <span class="comment">// bintray.com的用户名</span></span><br><span class="line">    bintrayKey = bintray_key   <span class="comment">// bintray.com的API key</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录下创建快速发布脚本publish.sh(Mac OS) or publish.bat(Windows)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Mac OS</span><br><span class="line">./gradlew clean build generatePomFileForReleasePublication bintrayUpload -PdryRun=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">// Windows</span><br><span class="line">gradlew clean build generatePomFileForReleasePublication bintrayUpload -PdryRun=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行publish脚本，发布项目，项目发布成功后进入bintray.com，可以看到如下：<br><img src="/2017/07/23/use-bintray-release-publish-lib-to-jcenter/library_maven.png" alt="library_maven"></p>
</li>
<li><p>将项目同步到JCenter(需要等待审核)<br><img src="/2017/07/23/use-bintray-release-publish-lib-to-jcenter/add_to_jcenter.png" alt="add_to_jcenter"><br><img src="/2017/07/23/use-bintray-release-publish-lib-to-jcenter/jcenter.png" alt="jcenter"></p>
</li>
<li><p>使用自己发布的库</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.github.xch168:androidUtil:0.0.5'</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android性能优化典范]]></title>
      <url>https://xch168.github.io/2017/02/05/android-performance-patterns/</url>
      <content type="html"><![CDATA[<p><a href="http://hukai.me/android-performance-patterns/" target="_blank" rel="noopener">Android 性能优化典范（一）</a>：主要从 Android 的渲染机制、内存与 GC、电量优化三个方面展开，介绍了 Android 中性能问题的底层工作原理，以及如何通过工具来找出性能问题及提升性能的建议。<br><a href="http://hukai.me/android-performance-patterns-season-2/" target="_blank" rel="noopener">Android 性能优化典范（二）</a>：20 个短视频，主要内容为：电量优化、网络优化、Android Wear 上如何做优化、使用对象池来提高效率、LRU Cache、Bitmap 的缩放、缓存、重用、PNG 压缩、自定义 View 的性能、提升设置 alpha 之后 View 的渲染性能，以及 Lint、StictMode 等工具的使用技巧。<br><a id="more"></a><br><a href="http://hukai.me/android-performance-patterns-season-3/" target="_blank" rel="noopener">Android 性能优化典范（三）</a>：更高效的 ArrayMap 容器，使用 Android 系统提供的特殊容器来避免自动装箱，避免使用枚举类型，注意onLowMemory与onTrimMemory的回调，避免内存泄漏，高效的位置更新操作，重复 layout 操作的性能影响，以及使用 Batching，Prefetching 优化网络请求，压缩传输数据等使用技巧。<br><a href="http://hukai.me/android-performance-patterns-season-4/" target="_blank" rel="noopener">Android 性能优化典范（四）</a>：优化网络请求的行为，优化安装包的资源文件，优化数据传输的效率，性能优化的几大基础原理等。<br><a href="http://hukai.me/android-performance-patterns-season-5/" target="_blank" rel="noopener">Android 性能优化典范（五）</a>：文章共有10个段落，涉及的内容有：多线程并发的性能问题，介绍了 AsyncTask、HandlerThread、IntentService 与 ThreadPool 分别适合的使用场景以及各自的使用注意事项。这是一篇了解 Android 多线程编程不可多得的基础文章，清楚地了解这些 Android 系统提供的多线程基础组件之间的差异以及优缺点，才能够在项目实战中做出最恰当的选择。<br><a href="http://hukai.me/android-performance-patterns-season-6/" target="_blank" rel="noopener">Android 性能优化典范（六）</a>：文章共 6 个段落，涉及的内容主要有程序启动时间性能优化的三个方面：优化 activity 的创建过程，优化 Application 对象的启动过程，正确使用启动显屏达到优化程序启动性能的目的。另外还介绍了减少安装包大小的 checklist 以及如何使用 VectorDrawable 来减少安装包的大小。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Performance </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
